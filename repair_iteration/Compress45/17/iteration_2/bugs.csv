bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  if  (negative  &&  value  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  value  >=  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  >=  maxAsOctalChar)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  if  (negative  ||  value  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  ||  value  <  =  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  value  <  =  maxAsOctalChar)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
11	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  0)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  maxAsOctalChar!=  0)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  0)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
12	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  negative)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  negative)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
13	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  maxAsOctalChar  ==  0)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  ==  0)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
14	[BUG]  [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
15	[BUG]  [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
16	[BUG]  [BUGGY]  if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(!negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
25	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
30	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
34	[BUG]  [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  value.getBytes(maxAsOctalChar);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(maxAsOctalChar);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
37	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])value.clone();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =(byte[])value.clone();  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])value.clone();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
38	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  value.getBytes();  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
39	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])value;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =(byte[])value;  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])value;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  getBytes(maxAsOctalChar);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(maxAsOctalChar);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  final  int  len  =  value.length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  int  len  =  value.length();  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
43	[BUG]  [BUGGY]  ||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  ||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
46	[BUG]  [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
47	[BUG]  [BUGGY]  if(negative  ||  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
50	[BUG]  [BUGGY]  if(negative)  {  if  (value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  if(negative)  {  if  (maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
53	[BUG]  [BUGGY]  if(negative)  {  if  (maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
54	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
55	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
56	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
57	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
59	[BUG]  [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
60	[BUG]  [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
61	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
62	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
69	[BUG]  [BUGGY]  if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  buffer(maxAsOctalChar);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(maxAsOctalChar);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
71	[BUG]  [BUGGY]  final  int  len  =  getLength();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  int  len  =  getLength();  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
72	[BUG]  [BUGGY]  final  byte[]  buf  =  value.toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  byte[]  buf  =  value.toByteArray();  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.toByteArray();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar;  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
76	[BUG]  [BUGGY]  negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
78	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
79	[BUG]  [BUGGY]  if(negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
82	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
83	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
84	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
85	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
86	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  value  >  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
87	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
88	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
89	[BUG]  [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
90	[BUG]  [BUGGY]  final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
91	[BUG]  [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
92	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
93	[BUG]  [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
94	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
95	[BUG]  [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
96	[BUG]  [BUGGY]  if  (negative  &&  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  length  <  =  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  length  <  =  maxAsOctalChar)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
98	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
99	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
100	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
101	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
102	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
103	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
104	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
106	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {	  if(negative)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
107	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
108	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
109	[BUG]  [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;    [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]    return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if    (negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
