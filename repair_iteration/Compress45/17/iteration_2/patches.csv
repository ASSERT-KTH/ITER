bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (!negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
2	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (!negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
3	[BUG]  [BUGGY]  parent!=  null  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent!=  null  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent!=  null  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
4	[BUG]  [BUGGY]  negative  &&(maxAsOctalChar  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(maxAsOctalChar  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(maxAsOctalChar  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
5	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
6	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  size()))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
7	[BUG]  [BUGGY]  negative  &&(maxAsOctalChar  <  =  0))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(maxAsOctalChar  <  =  0))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(maxAsOctalChar  <  =  0))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
8	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(value);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(value);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(value);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
9	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
10	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(maxAsOctalChar,  negative);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(maxAsOctalChar,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(maxAsOctalChar,  negative);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
11	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(buf,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(buf,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(buf,  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative,  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
13	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(value,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(value,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(value,  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
14	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(length);  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(length);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
15	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
16	[BUG]  [BUGGY]  if(negative  ||  length  >=  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >=  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >=  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
17	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
18	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
19	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  value.length)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  value.length)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  value.length)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
20	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  >=  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
21	[BUG]  [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
22	[BUG]  [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
23	[BUG]  [BUGGY]  if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
24	[BUG]  [BUGGY]  if(negative)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
25	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
26	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
27	[BUG]  [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
28	[BUG]  [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
29	[BUG]  [BUGGY]  negative  &&  length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
30	[BUG]  [BUGGY]  result[0]  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatBigIntegerBytes(value,  buf,  offset,  length);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
31	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
32	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length,  negative);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
33	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  -  1);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
34	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(value,  buf,  offset,  length  +  1);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
35	[BUG]  [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
36	[BUG]  [BUGGY]  result[0]  =  formatBigDecimalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatBigDecimalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatBigDecimalBytes(value,  buf,  offset,  length);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
37	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
42	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
43	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
44	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
45	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
46	[BUG]  [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
47	[BUG]  [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
48	[BUG]  [BUGGY]  negative  &&(maxAsOctalChar  >=  maxAsOctalChar  ||  length  ==  TarConstants.MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(maxAsOctalChar  >=  maxAsOctalChar  ||  length  ==  TarConstants.MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(maxAsOctalChar  >=  maxAsOctalChar  ||  length  ==  TarConstants.MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
49	[BUG]  [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent!=  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
50	[BUG]  [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent  ==  null  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
51	[BUG]  [BUGGY]  final  boolean  negative  =  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
52	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
53	[BUG]  [BUGGY]  final  boolean  negative  =  length  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
54	[BUG]  [BUGGY]  final  boolean  negative  =  length!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
55	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
56	[BUG]  [BUGGY]  if(negative)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
57	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
58	[BUG]  [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
59	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
60	[BUG]  [BUGGY]  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
61	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
62	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
63	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
64	[BUG]  [BUGGY]  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
65	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
66	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(maxAsOctalChar,  0,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(maxAsOctalChar,  0,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(maxAsOctalChar,  0,  buf,  offset,  length);  }	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
67	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(buf,  offset,  maxAsOctalChar,  0,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(buf,  offset,  maxAsOctalChar,  0,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  System.arraycopy(buf,  offset,  maxAsOctalChar,  0,  negative);  }	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
68	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
69	[BUG]  [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
70	[BUG]  [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
71	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
72	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    >=    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
73	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXID;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value!=  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.MAXID;	  if(length    >=    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	82	None	replace
74	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
75	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
76	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buffer,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
77	[BUG]  [BUGGY]  negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    ||    length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
78	[BUG]  [BUGGY]  positive  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  positive  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	positive  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    ||    length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
79	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
80	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
81	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
82	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
83	[BUG]  [BUGGY]  while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
84	[BUG]  [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
85	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
86	[BUG]  [BUGGY]  while(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
87	[BUG]  [BUGGY]  while(negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
88	[BUG]  [BUGGY]  while(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
89	[BUG]  [BUGGY]  if  (negative  ||  value  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  ||  value  <  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  value  <  maxAsOctalChar)  {	  if    (negative    ||    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
90	[BUG]  [BUGGY]  if  (negative  ||  value  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  ||  value  >=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  value  >=  maxAsOctalChar)  {	  if    (negative    ||    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
91	[BUG]  [BUGGY]  if  (negative  ||  value  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  ||  value  ==  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  value  ==  maxAsOctalChar)  {	  if    (negative    ||    value    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
96	[BUG]  [BUGGY]  if  (negative  &&  length  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  length  <  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  length  <  maxAsOctalChar)  {	  if    (negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
97	[BUG]  [BUGGY]  if  (negative  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  length  <  =  maxAsOctalChar)  {	  if    (negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
98	[BUG]  [BUGGY]  if  (negative  &&  length  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  length  >=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  length  >=  maxAsOctalChar)  {	  if    (negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
99	[BUG]  [BUGGY]  if  (negative  &&  offset  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  offset  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  offset  <  =  maxAsOctalChar)  {	  if    (negative    &&    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
100	[BUG]  [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent!=  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent!=  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
101	[BUG]  [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent  ==  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent  ==  null  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
102	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
103	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
104	[BUG]  [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
105	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
106	[BUG]  [BUGGY]  negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
107	[BUG]  [BUGGY]  negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
108	[BUG]  [BUGGY]  negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
109	[BUG]  [BUGGY]  final  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  negative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
110	[BUG]  [BUGGY]  negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
111	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
112	[BUG]  [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
113	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  +  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  +  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
114	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  1;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  -  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  -  1;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
115	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  *  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  *  maxAsOctalChar;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
116	[BUG]  [BUGGY]  final  int  len  =  getLength()  -  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  -  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  -  maxAsOctalChar;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
117	[BUG]  [BUGGY]  final  int  len  =  getLength()  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  >  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  >  maxAsOctalChar;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
118	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  2;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  *  2;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  *  2;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
119	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  2;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  +  2;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  +  2;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
120	[BUG]  [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
121	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
122	[BUG]  [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
123	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
124	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
125	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
126	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
127	[BUG]  [BUGGY]  negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
128	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar!=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar!=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar!=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
129	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
130	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  ==  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  ==  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  ==  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
131	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
132	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
133	[BUG]  [BUGGY]  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
134	[BUG]  [BUGGY]  while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
135	[BUG]  [BUGGY]  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
136	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  =  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  =  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  <  =  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
137	[BUG]  [BUGGY]  negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
138	[BUG]  [BUGGY]  negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
139	[BUG]  [BUGGY]  negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
140	[BUG]  [BUGGY]  if(value  <  =  length)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  <  =  length)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  length)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
141	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  MAXID)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  MAXID)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
142	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
143	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigDecimalBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigDecimalBytes(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigDecimalBytes(maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
144	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(maxAsOctalChar,  negative);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
145	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(value);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(value);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(value);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
146	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(negative);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
147	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(buf,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(buf,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(buf,  maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
148	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(length);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
149	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigDecimalChar(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigDecimalChar(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigDecimalChar(maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
150	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
151	[BUG]  [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
152	[BUG]  [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
153	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
154	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
155	[BUG]  [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(Exception  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
156	[BUG]  [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(IllegalArgumentException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(IllegalArgumentException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
157	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
158	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(NumberFormatException  e)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
159	[BUG]  [BUGGY]  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
160	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer.toByteArray();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
161	[BUG]  [BUGGY]  final  byte[]  buf  =  maxAsOctalChar.toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  maxAsOctalChar.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  maxAsOctalChar.toByteArray();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
162	[BUG]  [BUGGY]  final  byte[]  buf  =  value.toByteArray(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.toByteArray(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.toByteArray(maxAsOctalChar);	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
163	[BUG]  [BUGGY]  final  byte[]  buf  =  this.value.toByteArray();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  this.value.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  this.value.toByteArray();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
164	[BUG]  [BUGGY]  final  byte[]  buf  =  container.toByteArray();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  container.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  container.toByteArray();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
165	[BUG]  [BUGGY]  final  byte[]  buf  =  value.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.toByteArray()  +  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.toByteArray()  +  1;	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
166	[BUG]  [BUGGY]  while(negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
167	[BUG]  [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
168	[BUG]  [BUGGY]  while(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
169	[BUG]  [BUGGY]  while(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
170	[BUG]  [BUGGY]  while(negative  >  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  >  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
171	[BUG]  [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length  -  1);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
172	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
173	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
174	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
175	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
176	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
177	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
178	[BUG]  [BUGGY]  negative  &&  value  <  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    =    length)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
179	[BUG]  [BUGGY]  if(negative  ||  maxAsOctalChar  >=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  maxAsOctalChar  >=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  maxAsOctalChar  >=  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
180	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  value)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  >=  value)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  value)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
181	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  >=  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  negative)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
182	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  value.length)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  >=  value.length)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  value.length)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
183	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  length)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  >=  length)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  length)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
184	[BUG]  [BUGGY]  if(negative  &&  length  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  ==  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  ==  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar    ==    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
185	[BUG]  [BUGGY]  if(negative  ||  maxAsOctalChar  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  maxAsOctalChar  ==  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  maxAsOctalChar  ==  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar    ==    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
186	[BUG]  [BUGGY]  if(negative  &&  value  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  ==  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  ==  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar    ==    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
187	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  ==  value)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  ==  value)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  ==  value)  {	  if(negative    &&    maxAsOctalChar    ==    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
188	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  value)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar!=  value)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  value)  {	  if(negative    &&    maxAsOctalChar    ==    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
189	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
190	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
191	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
192	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
193	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
194	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
195	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
196	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer.getBytes();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer.getBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer.getBytes();	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
197	[BUG]  [BUGGY]  final  byte[]  buf  =  maxAsOctalChar.getBytes();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  maxAsOctalChar.getBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  maxAsOctalChar.getBytes();	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
198	[BUG]  [BUGGY]  final  byte[]  buf  =  this.value.getBytes();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  this.value.getBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  this.value.getBytes();	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
199	[BUG]  [BUGGY]  parent!=  null  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  parent!=  null  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	parent!=  null  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
200	[BUG]  [BUGGY]  negative  &&  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
201	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar  ||  negative)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
202	[BUG]  [BUGGY]  if  (negative  ||  value  <  =  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  ||  value  <  =  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  ||  value  <  =  maxAsOctalChar  ||  negative)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
203	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  2)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  2)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  2)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
204	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  1)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  1)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  1)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
205	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
206	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
207	[BUG]  [BUGGY]  if(negative  &&  length  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  ==  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  ==  0)  {	  if(negative    &&    maxAsOctalChar    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
208	[BUG]  [BUGGY]  if(negative  ||  maxAsOctalChar  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  maxAsOctalChar  ==  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  maxAsOctalChar  ==  0)  {	  if(negative    &&    maxAsOctalChar    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
209	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  <  =  0)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  <  =  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  <  =  0)  {	  if(negative    &&    maxAsOctalChar    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
210	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  ==  1)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  ==  1)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  ==  1)  {	  if(negative    &&    maxAsOctalChar    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
211	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar;	  if(negative    &&    value    >=    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
212	[BUG]  [BUGGY]  ||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
213	[BUG]  [BUGGY]  if(negative  ||  maxAsOctalChar!=  0)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  maxAsOctalChar!=  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  maxAsOctalChar!=  0)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
214	[BUG]  [BUGGY]  if(negative  &&  length!=  0)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length!=  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length!=  0)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
215	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  >=  0)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  >=  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  >=  0)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
216	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  1)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar!=  1)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  1)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
217	[BUG]  [BUGGY]  if(negative  &&  length  >=  0)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >=  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >=  0)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
218	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
219	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
220	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
221	[BUG]  [BUGGY]  negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
222	[BUG]  [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
223	[BUG]  [BUGGY]  negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
224	[BUG]  [BUGGY]  if(negative  &&  value!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value!=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value!=  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar!=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
225	[BUG]  [BUGGY]  if(negative  ||  maxAsOctalChar!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  maxAsOctalChar!=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  maxAsOctalChar!=  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar!=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
226	[BUG]  [BUGGY]  if(negative  &&  length!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length!=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length!=  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar!=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
227	[BUG]  [BUGGY]  final  int  len  =  maxAsOctalChar.length();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  maxAsOctalChar.length();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  maxAsOctalChar.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
228	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  1;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  value.length()  -  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length()  -  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
229	[BUG]  [BUGGY]  final  int  len  =  value.length()  +  1;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  value.length()  +  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length()  +  1;	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
230	[BUG]  [BUGGY]  final  int  len  =  value.length()  -  2;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  value.length()  -  2;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length()  -  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
231	[BUG]  [BUGGY]  final  int  len  =  value.length()  *  2;  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  value.length()  *  2;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length()  *  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
232	[BUG]  [BUGGY]  final  int  len  =  value.length()  +  2;  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  value.length()  +  2;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  value.length()  +  2;	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
233	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
234	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.NULL;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.NULL;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  ==  TarConstants.UIDLEN?  TarConstants.MAXID  :  TarConstants.NULL;	  if(negative    &&    length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
235	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
236	[BUG]  [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(NumberFormatException  nfe)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
237	[BUG]  [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  try  {  [Delete]  catch(Exception  e)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	try  {  [Delete]  catch(Exception  e)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
238	[BUG]  [BUGGY]  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
239	[BUG]  [BUGGY]  readBytes(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  readBytes(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	readBytes(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
240	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
241	[BUG]  [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
242	[BUG]  [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
243	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
244	[BUG]  [BUGGY]  final  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
245	[BUG]  [BUGGY]  positive  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  positive  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	positive  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
246	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(!negative    &&    value    <    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
247	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
248	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
249	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
250	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  maxAsOctalChar;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  maxAsOctalChar;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  maxAsOctalChar;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
251	[BUG]  [BUGGY]  negative?  0xff  :  0x80)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative?  0xff  :  0x80)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative?  0xff  :  0x80)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
252	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  size;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  size;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  size;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
253	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  &&  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
254	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
255	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
256	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
257	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
258	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
259	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  maxAsOctalChar);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
260	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  length);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
261	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  0,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  0,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  0,  maxAsOctalChar);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
262	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  offset);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  offset);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  offset);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
263	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  offset,  length);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
264	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
265	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(buf,  0,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(buf,  0,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(buf,  0,  length);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
266	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
267	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
268	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  >=  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
269	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
270	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  MAXID;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  MAXID;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  MAXID;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
271	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
272	[BUG]  [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
273	[BUG]  [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }	  if(negative    &&    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
274	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
275	[BUG]  [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset  <  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
276	[BUG]  [BUGGY]  if(negative  &&  offset  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset  >  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
277	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
278	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
279	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
280	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
281	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
282	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
283	[BUG]  [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
284	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
285	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  0;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  0;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  0;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
286	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  1;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  1;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  +  1;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
287	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  >  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  >  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
288	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  length;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  length;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  +  length;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
289	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
290	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
291	[BUG]  [BUGGY]  if(negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
292	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
293	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
294	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
295	[BUG]  [BUGGY]  negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    <    =    0)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
296	[BUG]  [BUGGY]  negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  maxAsOctalChar);  }	  negative    &&    maxAsOctalChar    <    =    0)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
297	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
298	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  length;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  length;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
299	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
300	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
301	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
302	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  size;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  size;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  size;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
303	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
304	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
305	[BUG]  [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
306	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
307	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  ==  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
308	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value!=  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
309	[BUG]  [BUGGY]  final  boolean  negative  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
310	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
311	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
312	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
313	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  positive);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
314	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
315	[BUG]  [BUGGY]  final  boolean  negative  =  offset  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  offset  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  offset  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
316	[BUG]  [BUGGY]  final  boolean  negative  =  size  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  size  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  size  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
317	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  size);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
318	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer.getBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer.getBytes(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer.getBytes(maxAsOctalChar);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
319	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.getBytes(negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(negative);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
320	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(maxAsOctalChar,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.getBytes(maxAsOctalChar,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(maxAsOctalChar,  negative);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
321	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.getBytes(length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(length);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
322	[BUG]  [BUGGY]  final  byte[]  buf  =  this.value.getBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  this.value.getBytes(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  this.value.getBytes(maxAsOctalChar);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
323	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(buf,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.getBytes(buf,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(buf,  maxAsOctalChar);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
324	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])buf.clone();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])buf.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])buf.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
325	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative.clone();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
326	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])this.value.clone();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])this.value.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])this.value.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
327	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])super.clone();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])super.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])super.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
328	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])value.cloneBytes();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])value.cloneBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])value.cloneBytes();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
329	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])value.toCharArray();  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])value.toCharArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])value.toCharArray();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
330	[BUG]  [BUGGY]  ||(negative  &&  value  <  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  <  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
331	[BUG]  [BUGGY]  ||(negative  &&  length  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  length  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  length  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
332	[BUG]  [BUGGY]  ||(negative  &&  value  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  >=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
333	[BUG]  [BUGGY]  ||(negative  &&  value  <  =  length))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  <  =  length))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  =  length))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
334	[BUG]  [BUGGY]  ||(negative  &&  value!=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value!=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value!=  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
335	[BUG]  [BUGGY]  ||(negative  &&  value  <  =  MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  <  =  MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  =  MAXID))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
336	[BUG]  [BUGGY]  final  boolean  negative  =  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
337	[BUG]  [BUGGY]  ||  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
338	[BUG]  [BUGGY]  final  boolean  negative  =  negative  <  =  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  negative  <  =  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  negative  <  =  maxAsOctalChar;	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
339	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
340	[BUG]  [BUGGY]  if(value  <  =  length)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  <  =  length)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  <  =  length)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
341	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
342	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
343	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
344	[BUG]  [BUGGY]  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
345	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
346	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :(byte[])value;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :(byte[])value;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :(byte[])value;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
347	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])maxAsOctalChar;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
348	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])buf;  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])buf;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])buf;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
349	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :  value;  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :  value;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative?  maxAsOctalChar  :  value;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
350	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative,  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative,  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative,  maxAsOctalChar;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
351	[BUG]  [BUGGY]  if(negative  ||  value  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  value  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  value  >  maxAsOctalChar)  {	  if(negative    &&    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
352	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative  <  =  length)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative  <  =  length)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >  maxAsOctalChar  ||  negative  <  =  length)  {	  if(negative    &&    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
353	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
354	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
355	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  ==  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
356	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >=  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
357	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
358	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar  ||  negative!=  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
359	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
360	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buffer,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
361	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
362	[BUG]  [BUGGY]  negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    =    length)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
363	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    <    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
364	[BUG]  [BUGGY]  negative  &&(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
365	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    <    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
366	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar  <  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    <    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
367	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
368	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
369	[BUG]  [BUGGY]  negative?  0xff  :  0x80)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative?  0xff  :  0x80)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative?  0xff  :  0x80)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
370	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
371	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
372	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
373	[BUG]  [BUGGY]  if(negative  ||  length  >=  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >=  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >=  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
374	[BUG]  [BUGGY]  if(negative  ||  offset  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  offset  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  offset  >  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
375	[BUG]  [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  =  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  =  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
376	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  value  <  =  Long.MAX_VALUE)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
377	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
378	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar!=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar!=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar!=  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
379	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
380	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
381	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar!=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar!=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar!=  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
382	[BUG]  [BUGGY]  negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
383	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
384	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
385	[BUG]  [BUGGY]  if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if  (!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
386	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buffer,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buffer,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
387	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
388	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigBytes(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigBytes(maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
389	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative?  1  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative?  1  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(negative?  1  :  maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
390	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
391	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
392	[BUG]  [BUGGY]  negative  =  negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
393	[BUG]  [BUGGY]  negative  =  negative  &&  length  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
394	[BUG]  [BUGGY]  if(negative)  {  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
395	[BUG]  [BUGGY]  negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
396	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(negative  &&  value  >=  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
397	[BUG]  [BUGGY]  final  int  len  =  buffer.length();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  buffer.length();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  buffer.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
398	[BUG]  [BUGGY]  if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
399	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
400	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
401	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
402	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  ++idx;)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    ++idx;)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
403	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
404	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  ==  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  ==  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  ==  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
405	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  Long.MAX_VALUE)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
406	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
407	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
408	[BUG]  [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
409	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
410	[BUG]  [BUGGY]  ||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
411	[BUG]  [BUGGY]  ||(negative  &&  value  <  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  ||(negative  &&  value  <  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	||(negative  &&  value  <  maxAsOctalChar))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
412	[BUG]  [BUGGY]  &&(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  &&(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	&&(negative  &&  value  <  =  maxAsOctalChar))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  ||(negative    &&    value    <    =    maxAsOctalChar))    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
413	[BUG]  [BUGGY]  final  boolean  negative  =  value  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >>  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
414	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
415	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
416	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >=  buffer.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
417	[BUG]  [BUGGY]  final  boolean  negative  =  duration  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  duration  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  duration  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
418	[BUG]  [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
419	[BUG]  [BUGGY]  negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
420	[BUG]  [BUGGY]  readBytes(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  readBytes(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	readBytes(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
421	[BUG]  [BUGGY]  if(negative)  {  return  formatBigBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
422	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
423	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
424	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
425	[BUG]  [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
426	[BUG]  [BUGGY]  while(negative  &&  offset  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  offset  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  offset  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
427	[BUG]  [BUGGY]  negative  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
428	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
429	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  negative)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar!=  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  negative)  {	  if(negative    &&    maxAsOctalChar!=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
430	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  length)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar!=  length)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  length)  {	  if(negative    &&    maxAsOctalChar!=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
431	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
432	[BUG]  [BUGGY]  if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
433	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
434	[BUG]  [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
435	[BUG]  [BUGGY]  if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
436	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  limit;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  limit;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  limit;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
437	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  offset;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
438	[BUG]  [BUGGY]  if(negative  &&  offset  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset  >  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
439	[BUG]  [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset  <  maxAsOctalChar  ||  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
440	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  value  >  negative)  {  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  value  >  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  value  >  negative)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
441	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
442	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  maxAsOctalChar;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
443	[BUG]  [BUGGY]  negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
444	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  value.toByteArray()  :  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  value.toByteArray()  :  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  value.toByteArray()  :  maxAsOctalChar;	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
445	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  maxAsOctalChar  :  value.toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  maxAsOctalChar  :  value.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  maxAsOctalChar  :  value.toByteArray();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
446	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
447	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  -  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
448	[BUG]  [BUGGY]  return  formatBigIntegerBytes(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigIntegerBytes(negative,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigIntegerBytes(negative,  buf,  offset,  length);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
449	[BUG]  [BUGGY]  final  byte[]  buf  =  new  byte[maxAsOctalChar];  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  new  byte[maxAsOctalChar];  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  new  byte[maxAsOctalChar];	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
450	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])negative?  value  :  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])negative?  value  :  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])negative?  value  :  maxAsOctalChar;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
451	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
452	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
453	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  0)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
454	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
455	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
456	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
457	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
458	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
459	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
460	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
461	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  limitAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
462	[BUG]  [BUGGY]  if(negative  &&  length  >  0)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  0)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  0)  {	  if(negative    &&    maxAsOctalChar    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
463	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative!=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
464	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar    ||    negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
465	[BUG]  [BUGGY]  negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
466	[BUG]  [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
467	[BUG]  [BUGGY]  negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
468	[BUG]  [BUGGY]  negative  =  value  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
469	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
470	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  maxAsOctalChar;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
471	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
472	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  0,  length  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
473	[BUG]  [BUGGY]  final  byte[]  buf  =  value  ==  null?  false  :  value.getBytes();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value  ==  null?  false  :  value.getBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value  ==  null?  false  :  value.getBytes();	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
474	[BUG]  [BUGGY]  if(length  <  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  <  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  <  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
475	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
476	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >  value)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
477	[BUG]  [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
478	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >  maxAsOctalChar  ||  negative)  {	  if(negative    &&    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
479	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >  value;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
480	[BUG]  [BUGGY]  negative  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
481	[BUG]  [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
482	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
483	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative?  0,  maxAsOctalChar  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative?  0,  maxAsOctalChar  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative?  0,  maxAsOctalChar  :  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
484	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  BYTE_MASK);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative?  maxAsOctalChar  :  BYTE_MASK);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
485	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(negative?  1  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(negative?  1  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(negative?  1  :  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
486	[BUG]  [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  0)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
487	[BUG]  [BUGGY]  return  formatBigDecimalBytes(maxAsOctalChar,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatBigDecimalBytes(maxAsOctalChar,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatBigDecimalBytes(maxAsOctalChar,  buf,  offset,  length);	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
488	[BUG]  [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);	  while(negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	93	None	replace
489	[BUG]  [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
490	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  >  0)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >  0)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
491	[BUG]  [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(maxAsOctalChar  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
492	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
493	[BUG]  [BUGGY]  negative  &&  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
494	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
495	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
496	[BUG]  [BUGGY]  negative  &&  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
497	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  maxAsOctalChar);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  maxAsOctalChar);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  maxAsOctalChar);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
498	[BUG]  [BUGGY]  negative  &&  formatBigDecimalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  formatBigDecimalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  formatBigDecimalBytes(value,  buf,  offset,  length);	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
499	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
500	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar!=  2)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar!=  2)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar!=  2)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
501	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])positive.clone();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])positive.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])positive.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
502	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])value.toByteArray();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])value.toByteArray();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])value.toByteArray();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
503	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(negative?  maxAsOctalChar  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(negative?  maxAsOctalChar  :  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(negative?  maxAsOctalChar  :  maxAsOctalChar);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
504	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(negative);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
505	[BUG]  [BUGGY]  final  byte[]  buf  =  buffer(value);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  buffer(value);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  buffer(value);	  final    byte[]    buf    =    buffer(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
506	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  Long.MAX_VALUE  ||  negative  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  Long.MAX_VALUE  ||  negative  >  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  Long.MAX_VALUE  ||  negative  >  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
507	[BUG]  [BUGGY]  negative  &&  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
508	[BUG]  [BUGGY]  final  bytenegative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  bytenegative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  bytenegative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
509	[BUG]  [BUGGY]  negative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative?  maxAsOctalChar  :  maxAsOctalChar;	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
510	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
511	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
512	[BUG]  [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  <  =  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
513	[BUG]  [BUGGY]  final  bytenegative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  bytenegative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  bytenegative  =  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
514	[BUG]  [BUGGY]  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
515	[BUG]  [BUGGY]  result[0]  =  formatBigBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[0]  =  formatBigBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[0]  =  formatBigBytes(value,  buf,  offset,  length);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
516	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  maxAsOctalChar)  {  //  OK  to  store  as  octalchars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    <    maxAsOctalChar)    {    //    OK    to    store    as    octalchars    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
517	[BUG]  [BUGGY]  negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
518	[BUG]  [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
519	[BUG]  [BUGGY]  if(negative)  {  if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
520	[BUG]  [BUGGY]  negative  &&  length  >  0)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  >  0)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  >  0)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
521	[BUG]  [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
522	[BUG]  [BUGGY]  final  int  len  =  getLength()  +  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  +  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  +  maxAsOctalChar;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
523	[BUG]  [BUGGY]  final  int  len  =  getLengthOctalChar();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLengthOctalChar();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLengthOctalChar();	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
524	[BUG]  [BUGGY]  negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
525	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  value.getBytes(maxAsOctalChar):  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  value.getBytes(maxAsOctalChar):  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  value.getBytes(maxAsOctalChar):  maxAsOctalChar;	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
526	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(negative);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(negative);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
527	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  buffer.getBytes(maxAsOctalChar):  buffer.getBytes(maxAsOctalChar);	  final    byte[]    buf    =    value.getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
528	[BUG]  [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBigIntegerBytes(negative,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBigIntegerBytes(negative,  maxAsOctalChar);	  final    byte[]    buf    =    getBigIntegerBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
529	[BUG]  [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
530	[BUG]  [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
531	[BUG]  [BUGGY]  negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
532	[BUG]  [BUGGY]  if(negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
533	[BUG]  [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
534	[BUG]  [BUGGY]  if(negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
535	[BUG]  [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
536	[BUG]  [BUGGY]  final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
537	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigDecimalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
538	[BUG]  [BUGGY]  final  byte[]  buf  =  negative?  value.toByteArray()  :  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  negative?  value.toByteArray()  :  BYTE_MASK;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  negative?  value.toByteArray()  :  BYTE_MASK;	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
539	[BUG]  [BUGGY]  final  byte[]  buf  =  value.trim();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.trim();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.trim();	  final    byte[]    buf    =    value.toByteArray();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
540	[BUG]  [BUGGY]  final  int  len  =  buf.length();  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  buf.length();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  buf.length();	  final    int    len    =    value.length();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
541	[BUG]  [BUGGY]  negative  &&  maxAsOctalChar  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  maxAsOctalChar  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  maxAsOctalChar  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    maxAsOctalChar    <    =    0)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
542	[BUG]  [BUGGY]  negative  =  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
543	[BUG]  [BUGGY]  if(negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(maxAsOctalChar  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
544	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAXID_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAXID_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  MAXID_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
545	[BUG]  [BUGGY]  final  byte[]  buf  =  value.toBytes();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.toBytes();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.toBytes();	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
546	[BUG]  [BUGGY]  final  byte[]  buf  =  value.getBytes(negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  value.getBytes(negative,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  value.getBytes(negative,  maxAsOctalChar);	  final    byte[]    buf    =    value.getBytes();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
547	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
548	[BUG]  [BUGGY]  if(negative  <  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  <  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  <  =  length)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
549	[BUG]  [BUGGY]  if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
550	[BUG]  [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	Integer  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
551	[BUG]  [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(length  >  0)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(length  >  0)  {  if(!negative  &&  value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (!negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
552	[BUG]  [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(!negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(!negative  &&  value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
553	[BUG]  [BUGGY]  result[1]  =  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  result[1]  =  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	result[1]  =  formatLongOctalBytes(value,  buf,  offset,  length);	  result[0]    =    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
554	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  positive)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  positive)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  positive)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
555	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  buffer.length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  buffer.length  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  buffer.length  >  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    negative)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
556	[BUG]  [BUGGY]  negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
557	[BUG]  [BUGGY]  if(negative  &&  offset!=  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset!=  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset!=  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar!=    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
558	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  if  (!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    if    (!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
559	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar!=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    maxAsOctalChar    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
560	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar)||  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar)||  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar)||  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
561	[BUG]  [BUGGY]  if(negative)  {  if(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(value  <  maxAsOctalChar  ||  value  >  Long.MAX_VALUE)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
562	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
563	[BUG]  [BUGGY]  final  boolean  negative  =  weight  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  weight  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  weight  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    negative    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
564	[BUG]  [BUGGY]  negative  =  value  <  maxAsOctalChar  ||  negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  value  <  maxAsOctalChar  ||  negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  value  <  maxAsOctalChar  ||  negative  >  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    ||    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
565	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
566	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  MAXID)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  MAXID)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  MAXID)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
567	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  LAST_VALID_BYTE_MASK)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
568	[BUG]  [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  2  ||  length  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  2  ||  length  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  >  maxAsOctalChar  ||  length  <  =  2  ||  length  >  maxAsOctalChar)  {	  if(negative    ||    length    >    maxAsOctalChar    ||    length    <    =    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	106	None	replace
569	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    <    =    maxAsOctalChar)    {    if(negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
570	[BUG]  [BUGGY]  if(negative  &&  maxAsOctalChar  <  =  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  maxAsOctalChar  <  =  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  maxAsOctalChar  <  =  maxAsOctalChar)  {	  if(negative    &&    maxAsOctalChar    >=    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
571	[BUG]  [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(length  >  maxAsOctalChar  ||  length  >  BigIntegerBytes.MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if(length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
572	[BUG]  [BUGGY]  while(negative  &&  length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  while(negative  &&  length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	while(negative  &&  length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  while(negative    &&    value    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
573	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  value.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  maxAsOctalChar  >  value.length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  final    boolean    negative    =    value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
574	[BUG]  [BUGGY]  final  byte[]  buf  =  getBytes(buf,  0,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =  getBytes(buf,  0,  maxAsOctalChar);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =  getBytes(buf,  0,  maxAsOctalChar);	  final    byte[]    buf    =    getBytes(maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
575	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])data.clone();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])data.clone();  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])data.clone();	  final    byte[]    buf    =(byte[])value.clone();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
576	[BUG]  [BUGGY]  if(negative  ||  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  ||  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  ||  length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative    ||    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
577	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
578	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  BYTE_MASK)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
579	[BUG]  [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  LONG_BACK_ENCODING)  {  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  LONG_BACK_ENCODING)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >  maxAsOctalChar  ||  negative  >  LONG_BACK_ENCODING)  {	  if(negative    &&    length    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
580	[BUG]  [BUGGY]  negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    =    value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
581	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  if(!negative  &&  value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    if(!negative    &&    value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
582	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
583	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  offset;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    offset;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
584	[BUG]  [BUGGY]  if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
585	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
586	[BUG]  [BUGGY]  negative  &&  length  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  length  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  length  <  =  MAX_VALUE)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  negative    &&    value    <    =    length)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
587	[BUG]  [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  for(int  i  =  0,  len  =  maxAsOctalChar;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  bu  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  for(int  i  =  0,  len  =  maxAsOctalChar;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  bu  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  for(int  i  =  0,  len  =  maxAsOctalChar;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  bu	  return    formatLongOctalBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
588	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
589	[BUG]  [BUGGY]  negative  &&  value!=  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  value!=  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  value!=  maxAsOctalChar)  {  for(int  idx  =  0,  len  =  value.length;  idx  <  len;  ++idx)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    for(int    idx    =    0,    len    =    value.length;    idx    <    len;    ++idx)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
590	[BUG]  [BUGGY]  final  byte[]  buf  =(byte[])positive;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  byte[]  buf  =(byte[])positive;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  byte[]  buf  =(byte[])positive;	  final    byte[]    buf    =(byte[])value;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
591	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
592	[BUG]  [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  maxAsOctalChar  ||  length  >  Long.MAX_VALUE)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    Long.MAX_VALUE)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
593	[BUG]  [BUGGY]  negative  =  negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
594	[BUG]  [BUGGY]  if(negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    value    >=    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
595	[BUG]  [BUGGY]  negative  =  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
596	[BUG]  [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  offset  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  offset  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
597	[BUG]  [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    for(int    idx    =    start;    idx    <    maxAsOctalChar;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
598	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
599	[BUG]  [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length,  maxAsOctalChar);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
600	[BUG]  [BUGGY]  negative  ||  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  ||  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  ||  negative)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(negative)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
601	[BUG]  [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  int  len  =  getLength()  *  BYTE_MASK;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  int  len  =  getLength()  *  BYTE_MASK;	  final    int    len    =    getLength();    	non-compiled	[CE]  <identifier>  expected	71	None	replace
602	[BUG]  [BUGGY]  negative  =  negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  =  negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  =  negative  &&  length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(negative    &&    length    <    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
603	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar.length;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar.length;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar.length;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
604	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar;  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	73	None	replace
605	[BUG]  [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative)  {  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative);  }	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
606	[BUG]  [BUGGY]  negative  &&  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
607	[BUG]  [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  if(negative    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
608	[BUG]  [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  LAST_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  negative  &&(value  <  =  maxAsOctalChar  ||  value  >  LAST_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	negative  &&(value  <  =  maxAsOctalChar  ||  value  >  LAST_BYTE_MASK))  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(negative)    {    if    (maxAsOctalChar    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
609	[BUG]  [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID_BYTE_MASK)  {  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID_BYTE_MASK)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if  (negative  &&  value  <  =  maxAsOctalChar  ||  negative  >  MAXID_BYTE_MASK)  {	  if    (negative    &&    value    <    =    maxAsOctalChar    ||    negative    >    BYTE_MASK)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
610	[BUG]  [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	return  formatIntegerBytes(value,  buf,  offset,  length);	  return    formatBigIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
611	[BUG]  [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;      [BUGGY]  if(negative  &&  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {  [BUGGY]      return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	481	482	1	replace	if(negative  &&  value  >  maxAsOctalChar  ||  negative  >  maxAsOctalChar)  {	  if(negative    &&    value    >    maxAsOctalChar)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
