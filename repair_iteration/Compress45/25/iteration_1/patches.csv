bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  len  =  b.length  /  4;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  /  4;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  /  4;	  final    int    len    =    b.length    -    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  final  int  len  =  b.length  -  3;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  3;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  3;	  final    int    len    =    b.length    -    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  final  int  len  =  b.length  -  5;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  5;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  5;	  final    int    len    =    b.length    -    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	BigInteger  val  =  BigInteger.valueOf(value);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
6	[BUG]  [BUGGY]  byte[]  b  =  val.toByteArray();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  byte[]  b  =  val.toByteArray();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	byte[]  b  =  val.toByteArray();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  int  len  =  b.length();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  int  len  =  b.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	int  len  =  b.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  final  int  len  =  b.length();  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  int  len  =  val.length();  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  int  len  =  val.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	int  len  =  val.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  final  int  len  =  val.length();  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  val.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  val.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  final  int  len  =  b.length  /  2;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  /  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  /  2;	  final    int    len    =    b.length    -    2;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  final  int  len  =  val.length  -  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  val.length  -  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  val.length  -  1;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  final  int  len  =(b.length  >  0)?  val.length  :  b.length;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  >  0)?  val.length  :  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  >  0)?  val.length  :  b.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  final  int  len  =  val.length  -  2;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  val.length  -  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  val.length  -  2;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  final  int  len  =(b.length  <  2)?  val.length  :  b.length;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  <  2)?  val.length  :  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  <  2)?  val.length  :  b.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  final  int  len  =  val.length  +  1;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  val.length  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  val.length  +  1;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  final  long  len  =  val.length;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  long  len  =  val.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  long  len  =  val.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  final  int  len  =  b.length  *  2  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  *  2  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  2  +  1;	  final    int    len    =    b.length    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
19	[BUG]  [BUGGY]  final  int  len  =  b.length  *  2  +  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  *  2  +  length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  2  +  length;	  final    int    len    =    b.length    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
20	[BUG]  [BUGGY]  final  int  len  =  b.length  /  1;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  /  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  /  1;	  final    int    len    =    b.length    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  final  int  len  =  b.length  *  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  *  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  1;	  final    int    len    =    b.length    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  1  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1  +  1;	  final    int    len    =    b.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
23	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1L;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  1L;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1L;	  final    int    len    =    b.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
24	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1  +  length;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  1  +  length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1  +  length;	  final    int    len    =    b.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  final  int  len  -=  b.length  -  1;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  b.length  -  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length  -  1;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  final  int  len  -=  b.length  +  1;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  b.length  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length  +  1;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  final  int  len  -=  b.length  -  2;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  b.length  -  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length  -  2;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  final  int  len  -=  val.length;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  val.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  val.length;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
29	[BUG]  [BUGGY]  final  int  len  -=  b.length  *  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  b.length  *  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length  *  2;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
30	[BUG]  [BUGGY]  final  int  len  -=  b.length  +  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  -=  b.length  +  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length  +  2;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
31	[BUG]  [BUGGY]  final  byte  len  =  b.length  -  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  -  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  -  1;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
32	[BUG]  [BUGGY]  final  byte  len  =  b.length  -  2;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  -  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  -  2;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  final  byte  len  =  b.length  +  1;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  +  1;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  final  byte  len  =  val.length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  val.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  val.length;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  final  byte  len  =  b.length  -  4;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  -  4;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  -  4;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  final  byte  len  =  b.length  *  2;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  *  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  *  2;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  int  len  =  b.length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  int  len  =  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	int  len  =  b.length;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  int  len  =  val.length;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  int  len  =  val.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	int  len  =  val.length;	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  long  len  =  val.length();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  long  len  =  val.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	long  len  =  val.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
40	[BUG]  [BUGGY]  byte  len  =  val.length();  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  byte  len  =  val.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	byte  len  =  val.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
41	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1  +  2;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  1  +  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1  +  2;	  final    int    len    =    b.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  final  byte  len  =  b.length  +  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  +  2;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  +  2;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  final  int  len  =  b.length  -  2  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  2  +  1;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  2  +  1;	  final    int    len    =    b.length    -    2;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
44	[BUG]  [BUGGY]  final  int  len  =  b.length  -  2  +  length;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  2  +  length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  2  +  length;	  final    int    len    =    b.length    -    2;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
45	[BUG]  [BUGGY]  final  int  len  =  b.length  *  4;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  *  4;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  4;	  final    int    len    =    b.length    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
46	[BUG]  [BUGGY]  final  int  len  =  b.length  *  2  +  4;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  *  2  +  4;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  2  +  4;	  final    int    len    =    b.length    *    2;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  final  int  len  =  b.length  +  4;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  +  4;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  +  4;	  final    int    len    =    b.length    -    4;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  final  int  len  =(b  ==  null)?  val.length  :  b.length;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b  ==  null)?  val.length  :  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b  ==  null)?  val.length  :  b.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  final  int  len  =(b  ==  null)?  0xff  :  val.length;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b  ==  null)?  0xff  :  val.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b  ==  null)?  0xff  :  val.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  final  int  len  =(b  ==  null)?  val.length  :  BYTE_MASK;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b  ==  null)?  val.length  :  BYTE_MASK;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b  ==  null)?  val.length  :  BYTE_MASK;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
51	[BUG]  [BUGGY]  final  byte  len  -=  b.length;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  -=  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  -=  b.length;	  final    int    len    -=    b.length;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
52	[BUG]  [BUGGY]  final  byte  len  =  b.length  &  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  byte  len  =  b.length  &  BYTE_MASK;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length  &  BYTE_MASK;	  final    byte    len    =    b.length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
53	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1  +  offset;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =  b.length  -  1  +  offset;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1  +  offset;	  final    int    len    =    b.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
54	[BUG]  [BUGGY]  final  int  len  =(b.length  <  BigInteger.MAX_VALUE)?  val.length  :  b.length;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  <  BigInteger.MAX_VALUE)?  val.length  :  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  <  BigInteger.MAX_VALUE)?  val.length  :  b.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
55	[BUG]  [BUGGY]  final  int  len  =(b.length  <  BigInteger.MIN_VALUE)?  val.length  :  b.length;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  <  BigInteger.MIN_VALUE)?  val.length  :  b.length;  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  <  BigInteger.MIN_VALUE)?  val.length  :  b.length;	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
56	[BUG]  [BUGGY]  final  int  len  =(b.length  <  2)?  val.length  :  b.length);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  <  2)?  val.length  :  b.length);  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  <  2)?  val.length  :  b.length);	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
57	[BUG]  [BUGGY]  final  int  len  =(b.length  <  1)?  val.length  :  b.length);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  final  int  len  =(b.length  <  1)?  val.length  :  b.length);  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =(b.length  <  1)?  val.length  :  b.length);	  final    int    len    =    val.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
58	[BUG]  [BUGGY]  Integer  len  =  b.length();  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  Integer  len  =  b.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	Integer  len  =  b.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  long  len  =  b.length();  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  long  len  =  b.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	long  len  =  b.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  byte  len  =  b.length();  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();    [BUGGY]  byte  len  =  b.length();  [BUGGY]    if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	byte  len  =  b.length();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
