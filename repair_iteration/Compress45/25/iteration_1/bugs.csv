bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  len  =  b.length  -  1;  [CE]  <identifier>  expected  [FE]    IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  -  1;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  1;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
2	[BUG]  [BUGGY]  final  int  len  =  val.length;  [CE]  <identifier>  expected  [FE]      IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  val.length;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  val.length;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
3	[BUG]  [BUGGY]  final  int  len  =  b.length  +  1;  [CE]  <identifier>  expected  [FE]        IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  +  1;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  +  1;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
4	[BUG]  [BUGGY]  final  int  len  =  b.length  -  2;  [CE]  <identifier>  expected  [FE]          IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  -  2;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  2;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
5	[BUG]  [BUGGY]  final  byte  len  =  b.length;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  byte  len  =  b.length;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  byte  len  =  b.length;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
6	[BUG]  [BUGGY]  final  int  len  =  b.length  -  4;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  -  4;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  -  4;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]  final  int  len  =  b.length  *  2;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  *  2;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  *  2;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]    [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	  	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
9	[BUG]  [BUGGY]  final  int  len  =  b.length  +  2;  [CE]  <identifier>  expected  [FE]    IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  =  b.length  +  2;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  =  b.length  +  2;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
10	[BUG]  [BUGGY]  final  int  len  -=  b.length;  [CE]  <identifier>  expected  [FE]    IllegalArgumentException  [CONTEXT]  private  static  void  formatBigIntegerBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  BigInteger  val  =  BigInteger.valueOf(value);  final  byte[]  b  =  val.toByteArray();  [BUGGY]  final  int  len  -=  b.length;  [BUGGY]  if  (len  >  length  -  1)  {  throw  new  IllegalArgumentException( "Value   "  +  value  +   "  is  too  large  for   "  +  length  +   "  byte  field. ");  }  final  int  off  =  offset  +  length  -  len;  System.arraycopy(b,  0,  buf,  off,  len);  final  byte  fill  =  (byte)  (negative  ?  0xff  :  0);  for  (int  i  =  offset  +  1;  i  <  off;  i++)  {  buf[i]  =  fill;  }  [CLASS]  TarUtils  1  [METHOD]  formatBigIntegerBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  b  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  byte  fill  BigInteger  val  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  off  offset  remaining  start  long  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	521	521	1	replace	final  int  len  -=  b.length;	final  int  len  =  b.length;  	non-compiled	[CE]  <identifier>  expected	49	None	replace
