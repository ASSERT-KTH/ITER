bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
2	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
3	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
4	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
5	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
6	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
7	[BUG]  [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntegerBytes(value,  buf,  offset,  length,  negative);	  return    formatIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
8	[BUG]  [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntegerBytes(value,  buf,  offset,  length  -  1);	  return    formatIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
9	[BUG]  [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  negative);	  return    formatBigIntegerOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
10	[BUG]  [BUGGY]  return  formatIntegerOrBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntegerOrBytes(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntegerOrBytes(value,  buf,  offset,  length);	  return    formatBigIntegerOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
11	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  -  4);	  return    formatBigChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
12	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  +  2);	  return    formatBigChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
13	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  -  3);	  return    formatBigChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
14	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  -  2);	  return    formatBigChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
15	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  -  3);	  return    formatLongOctalBytes(value,    buf,    offset,    length    +    3);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
16	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  2  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  2  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  /  2  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
17	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  4  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  4  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  4  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
18	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  2);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
19	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  2  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  2  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  -  2  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
20	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
21	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
22	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  idx);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
23	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
24	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  value.length);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
25	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatBigCharBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
26	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatBigCharBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
27	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatBigCharBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  value.length);	  return    formatBigCharBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
29	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  4);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
30	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  2);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
31	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  9);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  9);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  9);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
32	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  true);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  true);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  negative);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  null);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  null);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  null);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  value.length);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  value.length);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  true);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  false,  true);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative    +    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
38	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  idx  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  idx  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  idx  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative    +    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
39	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  +  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative    +    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
40	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  value  +  1);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  value  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  value  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative    +    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
41	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
42	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
43	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
44	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
45	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
46	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
47	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
48	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
49	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
50	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
51	[BUG]  [BUGGY]  int  idx  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
52	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start;  i  <  limit;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  offset;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
57	[BUG]  [BUGGY]  For(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  For(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	For(int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
58	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
59	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  size  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  size  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  size  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
60	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  value.length  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  value.length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  value.length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
61	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maxAsOctalChar  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maxAsOctalChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maxAsOctalChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
62	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  buffer.length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  buffer.length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
63	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  MAXID  -  1);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  MAXID  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  MAXID  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
64	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  Long.parseLong(value));  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  Long.parseLong(value));  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  Long.parseLong(value));	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
65	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  idx);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative,  value.length);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  -  4);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
71	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  +  2);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
72	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  -  3);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
73	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  len);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  len);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  len);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    idx);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
74	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  chars);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  chars);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  chars);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    idx);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
75	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative  +  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
76	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  2);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  2);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
77	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0,  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0,  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0,  maxAsOctalChar  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  1  :  0);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  1  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  1  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
79	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  4);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  4);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
80	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
81	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
82	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
83	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
84	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
85	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
87	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative  +  1);	  return    formatLongOctalChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
88	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  +  2);	  return    formatLongOctalChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
89	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  +  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  +  3);	  return    formatLongOctalChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
90	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
91	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative  +  1);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  +  3);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  -  maxAsOctalChar);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
94	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  maxAsOctalChar);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
95	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  -  negative);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
96	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
97	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
98	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar.length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar.length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar.length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
99	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  value.length  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  value.length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  value.length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
100	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar;  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar;	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
101	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative  +  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
102	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
103	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
104	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
105	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
106	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
107	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
109	[BUG]  [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatIntBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
110	[BUG]  [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatIntBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
111	[BUG]  [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatIntBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
112	[BUG]  [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntBytes(value,  buf,  offset,  length,  negative,  idx);	  return    formatIntBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
113	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  -  4);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
114	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  9);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  9);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  -  9);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
115	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  9);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  9);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  -  9);	  return    formatLongOctalBytes(value,    buf,    offset,    length    -    4);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
116	[BUG]  [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBinary(value,  buf,  offset,  length,  negative);	  return    formatLongOctalOrBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
117	[BUG]  [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBinary(value,  buf,  offset,  length  -  1);	  return    formatLongOctalOrBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
118	[BUG]  [BUGGY]  return  formatBigDecimalOrBinary(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBinary(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBinary(value,  buf,  offset,  length);	  return    formatLongOctalOrBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
119	[BUG]  [BUGGY]  return  formatLongOrBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOrBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOrBinary(value,  buf,  offset,  length,  negative);	  return    formatLongOctalOrBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
120	[BUG]  [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigInteger(value,  buf,  offset,  length,  negative);	  return    formatBigInteger(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
121	[BUG]  [BUGGY]  return  formatInteger(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatInteger(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatInteger(value,  buf,  offset,  length);	  return    formatBigInteger(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
122	[BUG]  [BUGGY]  return  formatLong(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLong(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLong(value,  buf,  offset,  length);	  return    formatBigInteger(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
123	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
124	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
125	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
126	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
127	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
128	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
129	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.length()  >  0))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
130	[BUG]  [BUGGY]  final  int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
131	[BUG]  [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  start,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start,  len  =  value.length;  i  <  len;  i++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
133	[BUG]  [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
134	[BUG]  [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
135	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  +  1);	  return    formatBigChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
136	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative  +  1);	  return    formatBigChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
137	[BUG]  [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigInteger(value,  buf,  offset,  length  +  1);	  return    formatBigChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
138	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
139	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
140	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
141	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
142	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
143	[BUG]  [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
144	[BUG]  [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
145	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
146	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
147	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
148	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
149	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
150	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  true);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  true);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
151	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  negative);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  false,  negative);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
152	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  null);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  null);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  null);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
153	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  value.length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  false,  value.length);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
154	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  true);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  false,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  false,  true);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
155	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  -  2);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
156	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
157	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
158	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
159	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
160	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
161	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
162	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
163	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
164	[BUG]  [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalCharBytes(value,  buf,  offset,  length,  negative);	  return    formatLongOctalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
165	[BUG]  [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalCharBytes(value,  buf,  offset,  length  -  1);	  return    formatLongOctalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
166	[BUG]  [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalCharBytes(value,  buf,  offset,  length  +  1);	  return    formatLongOctalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
167	[BUG]  [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalCharBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalCharBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
168	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
169	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  4);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
170	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatLongOctalChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
171	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  size);	  return    formatLongOctalChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
172	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  negative,  0);	  return    formatLongOctalChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
173	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  value);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length,  value);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length,  value);	  return    formatLongOctalChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
174	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  -  1);	  return    formatBigChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
175	[BUG]  [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigInteger(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigInteger(value,  buf,  offset,  length  -  1);	  return    formatBigChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
176	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatBigChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
177	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative  +  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
178	[BUG]  [BUGGY]  for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
179	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
180	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
181	[BUG]  [BUGGY]  final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
182	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
183	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  10);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  10);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  10);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
184	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  3);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  3);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
185	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
186	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
187	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  1  :  0);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  1  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  1  :  0);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
188	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  negative);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
189	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  1);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
190	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  1);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
191	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  2);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
192	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
193	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
194	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
195	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
196	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
197	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  value.length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
198	[BUG]  [BUGGY]  long  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  long  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	long  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
199	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  size  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
200	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
201	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
202	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value.length);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
203	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
204	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
205	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
206	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
207	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
208	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  >=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  >=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  >=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
209	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
210	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
211	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length,  negative);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
212	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length  -  1);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
213	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length  +  1);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
214	[BUG]  [BUGGY]  return  formatBigIntegerChar(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerChar(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerChar(value,  buf,  offset,  length);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
215	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length  -  2);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
216	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  maxAsOctalChar);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
217	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  false);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  false);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
218	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  0);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
219	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  size);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  0,  size);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
220	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  2);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  2);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
221	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  10);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  10);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  10);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
222	[BUG]  [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBinary(value,  buf,  offset,  length,  negative);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
223	[BUG]  [BUGGY]  return  formatBigIntegerBinary(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBinary(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBinary(value,  buf,  offset,  length);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
224	[BUG]  [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBinary(value,  buf,  offset,  length  -  1);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
225	[BUG]  [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBinary(value,  buf,  offset,  length  +  1);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
226	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
227	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length,  negative);	  return    formatBigDecimal(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
228	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    2);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
229	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  +  2);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    2);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
230	[BUG]  [BUGGY]  negative  =  false;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  false;  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  false;	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
231	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
232	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
233	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  0))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
234	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)  ==  '-'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
235	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '0'))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
236	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.equals(value.length)))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value.equals(value.length)))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	||(value  <  =  maxAsOctalChar  &&  value.equals(value.length)))  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
237	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
238	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.longValue());  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.longValue());  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.longValue());	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
239	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatBigChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
240	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  false);	  return    formatBigChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
241	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  -  maxAsOctalChar);	  return    formatBigChar(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
242	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  -  maxAsOctalChar);	  return    formatBigChar(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
243	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  -  negative);	  return    formatBigChar(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
244	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
245	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  9);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  9);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  9);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
246	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    value.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
247	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.length  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    value.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
248	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  value.length);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  value.length);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    value.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
249	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.charAt(offset));  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.charAt(offset));  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative,  value.charAt(offset));	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    value.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
250	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length,  negative);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
251	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  1);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
252	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  1);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
253	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  true);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  true);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
254	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  negative);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
255	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  null);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  null);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  null);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
256	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  value.length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  value.length);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
257	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  true);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  true);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  false,  true);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
258	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  -  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
259	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  1  +  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  1  +  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  1  +  negative);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
260	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
261	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
262	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
263	[BUG]  [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigBytes(value,  buf,  offset,  length,  negative);	  return    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
264	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
265	[BUG]  [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
266	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  value.length);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  value.length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  value.length);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    value.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
267	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  start;  i  <  =  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  start;  i  <  =  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
268	[BUG]  [BUGGY]  int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  i  =  start;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
269	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative  +  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  -  negative  +  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
270	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  negative);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  *  negative);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
271	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  offset;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
272	[BUG]  [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  offset;  idx  <  length;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
273	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  idx);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    idx);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
274	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  *  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  *  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  *  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
275	[BUG]  [BUGGY]  return  formatOctalChar(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalChar(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalChar(value,  buf,  offset,  length,  negative);	  return    formatLongOctalChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
276	[BUG]  [BUGGY]  return  formatBigCharBinary(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBinary(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBinary(value,  buf,  offset,  length);	  return    formatLongOctalOrBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
277	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
278	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
279	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
280	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
281	[BUG]  [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
282	[BUG]  [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerOrBytes(value,  buf,  offset,  length  -  1);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
283	[BUG]  [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBinary(value,  buf,  offset,  length  -  negative);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
284	[BUG]  [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBinary(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBinary(value,  buf,  offset,  length  -  2);	  return    formatBigDecimalBinary(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
285	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  value);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
286	[BUG]  [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  1;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
287	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
288	[BUG]  [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  offset;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
289	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  negative);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
290	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length  -  2);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
291	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(value,  buf,  offset,  length  +  2);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
292	[BUG]  [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerOrBytes(value,  buf,  offset,  length  +  1);	  return    formatBigIntegerOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
293	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  /  2);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  /  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  /  2);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    2);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
294	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);	  return    formatBigChar(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
295	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  -  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  -  3);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
296	[BUG]  [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  *  2);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalChar(value,  buf,  offset,  length  *  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalChar(value,  buf,  offset,  length  *  2);	  return    formatLongOctalChar(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
297	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  2  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  2  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  *  2  -  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
298	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length  -  negative);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
299	[BUG]  [BUGGY]  for(int  idx  =  end;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  end;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  end;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
300	[BUG]  [BUGGY]  for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
301	[BUG]  [BUGGY]  for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
302	[BUG]  [BUGGY]  int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  length;  idx  <  maxAsOctalChar.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
303	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    0);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
304	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
305	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  3  +  1);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  3  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  3  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
306	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  +  4);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  +  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  2  +  4);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
307	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
308	[BUG]  [BUGGY]  int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
309	[BUG]  [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  0,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
310	[BUG]  [BUGGY]  int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  len  =  value.length;  idx  =  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
311	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  2);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  /  2);	  return    formatLongOctalBytes(value,    buf,    offset,    length    +    2);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
312	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length  -  negative);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
313	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length  +  2);	  return    formatBigDecimalChar(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
314	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
315	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
316	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
317	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length  -  negative);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
318	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(value,  buf,  offset,  length  +  2);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
319	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  3);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  3);	  return    formatLongOctalBytes(value,    buf,    offset,    length    +    3);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
320	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  3);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  /  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  /  3);	  return    formatLongOctalBytes(value,    buf,    offset,    length    +    3);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
321	[BUG]  [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntegerBytes(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntegerBytes(value,  buf,  offset,  length  +  1);	  return    formatIntegerBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
322	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  *  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
323	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  *  2  +  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
324	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  +  3);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
325	[BUG]  [BUGGY]  NegativeUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegativeUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegativeUtils.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
326	[BUG]  [BUGGY]  NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
327	[BUG]  [BUGGY]  NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegatedBytes.formatBigIntegerBytes(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
328	[BUG]  [BUGGY]  NegatedBytes.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegatedBytes.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegatedBytes.formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
329	[BUG]  [BUGGY]  NegativeUtil.copyBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegativeUtil.copyBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegativeUtil.copyBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
330	[BUG]  [BUGGY]  NegativeUtil.copyBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  NegativeUtil.copyBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	NegativeUtil.copyBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
331	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    1);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
332	[BUG]  [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimal(value,  buf,  offset,  length  +  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimal(value,  buf,  offset,  length  +  2);	  return    formatBigDecimal(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
333	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
334	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length  *  2  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length  *  2  +  1);	  return    formatBigChar(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
335	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
336	[BUG]  [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
337	[BUG]  [BUGGY]  negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
338	[BUG]  [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
339	[BUG]  [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  &&  value  >=  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
340	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  +  1  :  negative  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  +  1  :  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  +  1  :  negative  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative    +    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
341	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  3);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  3);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
342	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  *  2);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  *  2);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  *  2);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
343	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
344	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
345	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
346	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length  -  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length  -  4);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
347	[BUG]  [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatIntBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatIntBytes(value,  buf,  offset,  length  -  negative);	  return    formatIntBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
348	[BUG]  [BUGGY]  if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
349	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(value  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
350	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(value  >  maxAsOctalChar)  {  if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
351	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  negative  =  true;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  negative  =  true;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(value  <  =  maxAsOctalChar)  {  negative  =  true;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
352	[BUG]  [BUGGY]  int  idx  =  length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  length;  idx  <  start;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
353	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
354	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  *  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
355	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  2  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  *  2  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  *  2  +  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
356	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  negative);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  -  negative);	  return    formatLongOctalBytes(value,    buf,    offset,    length    -    4);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
357	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  idx);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  idx);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative,  idx);	  return    formatBigCharBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
358	[BUG]  [BUGGY]  for(int  idx  =  start,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start,  len  =  buf.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
359	[BUG]  [BUGGY]  for(int  idx  =  start,  len  =  maxAsOctalChar;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start,  len  =  maxAsOctalChar;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start,  len  =  maxAsOctalChar;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
360	[BUG]  [BUGGY]  int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  start,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
361	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
362	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maximumChar  -  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maximumChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  maximumChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
363	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  -  negative,  maxAsOctalChar);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
364	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  negative  +  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length  -  negative  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length  -  negative  +  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    negative);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
365	[BUG]  [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(length  >  0)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
366	[BUG]  [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(negative  &&  value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
367	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(value  >  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(value  >  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  return  offset  +  length;  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    return    offset    +    length;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
368	[BUG]  [BUGGY]  return  formatOctalCharBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalCharBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalCharBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
369	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
370	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
371	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  +  1);  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
372	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
373	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
374	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
375	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
376	[BUG]  [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  0);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    maxAsOctalChar    :    0);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
377	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative,  size);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    size);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
378	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative,  len);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
379	[BUG]  [BUGGY]  return  formatBigDecimalBytes(negative,  buf,  offset,  length,  value);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(negative,  buf,  offset,  length,  value);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(negative,  buf,  offset,  length,  value);	  return    formatBigDecimalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
380	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative,  0);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative,  0);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative,  0);	  return    formatBigChar(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
381	[BUG]  [BUGGY]  return  formatBigDecimalOrBytes(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalOrBytes(negative,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalOrBytes(negative,  buf,  offset,  length);	  return    formatBigDecimalOrBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
382	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
383	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
384	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
385	[BUG]  [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
386	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
387	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  maxAsOctalChar  +  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  -  maxAsOctalChar  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  -  maxAsOctalChar  +  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length    *    2    +    1);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
388	[BUG]  [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalChar(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalChar(value,  buf,  offset,  length,  false);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
389	[BUG]  [BUGGY]  return  formatOctalChar(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalChar(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalChar(value,  buf,  offset,  length,  false);	  return    formatLongOctalChar(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
390	[BUG]  [BUGGY]  negative  =  negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
391	[BUG]  [BUGGY]  result[0]  =  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  result[0]  =  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	result[0]  =  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);	  if(value    >    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
392	[BUG]  [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
394	[BUG]  [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  encoding);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalBytes(value,  buf,  offset,  length,  negative,  encoding);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalBytes(value,  buf,  offset,  length,  negative,  encoding);	  return    formatOctalBytes(value,    buf,    offset,    length,    negative);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
395	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  i  =  1;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  i  =  1;  i  <  len;  ++i)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    i    =    start;    i    <    len;    ++i)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
396	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1,  negative);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length  +  1,  negative);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
397	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
398	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
399	[BUG]  [BUGGY]  for(int  idx  =  offset;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset;  idx  <  len;  idx++)  {  if(negative)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    if(negative)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	55	None	replace
400	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatBigChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
401	[BUG]  [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigChar(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigChar(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);	  return    formatBigChar(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
402	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
403	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length,  negative?  0x80  :  maxAsOctalChar  -  1);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative?    0x80    :    length    -    1);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
404	[BUG]  [BUGGY]  return  formatBigDecimalCharBytes(negative,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalCharBytes(negative,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalCharBytes(negative,  buf,  offset,  length);	  return    formatBigDecimalCharBytes(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
405	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  1,  negative);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  1,  negative);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length  -  1,  negative);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    2);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
406	[BUG]  [BUGGY]  return  formatChar(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatChar(value,  buf,  offset,  length);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatChar(value,  buf,  offset,  length);	  return    formatBigInteger(value,    buf,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
407	[BUG]  [BUGGY]  int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  idx  =  0,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
408	[BUG]  [BUGGY]  for(int  idx  =  offset,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  offset,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  offset,  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
409	[BUG]  [BUGGY]  return  formatOctalCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalCharBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
410	[BUG]  [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigBytes(value,  buf,  offset,  length,  negative,  maxAsOctalChar);	  return    formatLongOctalBytes(value,    buf,    offset,    length,    negative,    maxAsOctalChar);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
411	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  FormatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
412	[BUG]  [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  positive);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  positive);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  negative  &&  value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  positive);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
413	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  4);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length  *  4);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length  *  4);	  return    formatLongOctalBytes(value,    buf,    offset,    length    -    4);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
414	[BUG]  [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigDecimalBytes(value,  buf,  offset,  length,  negative?  0x80  :  length  -  1);	  return    formatBigDecimalBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
415	[BUG]  [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	int  len  =  value.length;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  for(int    idx    =    0,    len    =    value.length;    idx    <    len;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
416	[BUG]  [BUGGY]  if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(negative)  {  if(value  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
417	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(length  <  =  maxAsOctalChar)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
418	[BUG]  [BUGGY]  if(value  <  =  0)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(value  <  =  0)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(value  <  =  0)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
419	[BUG]  [BUGGY]  if(negative)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  if(negative)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	if(negative)  {  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
420	[BUG]  [BUGGY]  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	negative  =  false;  }  else  {  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  }	  if(value    <    =    maxAsOctalChar)    {    negative    =    false;    }    else    {    formatBigIntegerBinary(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
421	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length,  negative);  }	  for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length,    negative);    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
422	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	for(int  idx  =  start;  idx  <  limit.length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    idx    =    start;    idx    <    maxAsOctalChar.length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
423	[BUG]  [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBinary(value,  buf,  offset,  length  +  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBinary(value,  buf,  offset,  length  +  1);	  return    formatBigIntegerBytes(value,    buf,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
424	[BUG]  [BUGGY]  return  formatOctalOrBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatOctalOrBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatOctalOrBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
425	[BUG]  [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  false);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  false);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigIntegerOrBytes(value,  buf,  offset,  length,  false);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length,    false);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
426	[BUG]  [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatBigCharBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatBigCharBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
427	[BUG]  [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;  final  boolean  negative  =  value  <  0;  if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars      [BUGGY]  return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);  [BUGGY]      }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  return  offset  +  length;  }  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	482	482	1	replace	return  formatLongOctalOrBytes(value,  buf,  offset,  length,  negative?  maxAsOctalChar  :  length  -  1);	  return    formatLongOctalOrBytes(value,    buf,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
