bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (value  <  =  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  =  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  =  0  ||  val  >  max)  {	  if    (value    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if  (val  <  =  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  =  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  =  0  ||  val  >  max)  {	  if    (value    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  if  (val  <  0  ||  max  >  value.length)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  max  >  value.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  max  >  value.length)  {	  if    (value    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  if  (value  <  =  0  ||  value  >  max)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  =  0  ||  value  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  =  0  ||  value  >  max)  {	  if    (value    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
5	[BUG]  [BUGGY]  if  (value  <  0  ||  value  >  max  ||  negative)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  value  >  max  ||  negative)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  value  >  max  ||  negative)  {	  if    (value    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
6	[BUG]  [BUGGY]  if  (value  <  0  ||  value  >  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  value  >  Long.MIN_VALUE)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  value  >  Long.MIN_VALUE)  {	  if    (value    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  ((  Long)val).longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  ((  Long)val).longValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	((  Long)val).longValue();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  final  int  len  =  Math.min(value.length,  max);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  final  int  len  =  Math.min(value.length,  max);  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	final  int  len  =  Math.min(value.length,  max);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  final  int  len  =  getLength();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  final  int  len  =  getLength();  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	final  int  len  =  getLength();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
10	[BUG]  [BUGGY]  Long.MIN_VALUE  =  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  Long.MIN_VALUE  =  Long.MIN_VALUE;  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	Long.MIN_VALUE  =  Long.MIN_VALUE;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  Long.MIN_VALUE  =  Long.MAX_VALUE;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  Long.MIN_VALUE  =  Long.MAX_VALUE;  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	Long.MIN_VALUE  =  Long.MAX_VALUE;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  val  =  Math.abs(max);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  val  =  Math.abs(max);  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	val  =  Math.abs(max);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  final  int  len  =  Math.min(length,  max);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  final  int  len  =  Math.min(length,  max);  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	final  int  len  =  Math.min(length,  max);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  if  (val  >=  0  ||  val  >=  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >=  0  ||  val  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >=  0  ||  val  >=  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
15	[BUG]  [BUGGY]  if  (value  <  =  0  ||  val  >=  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  =  0  ||  val  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  =  0  ||  val  >=  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
16	[BUG]  [BUGGY]  if  (val  <  =  0  ||  val  ==  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  =  0  ||  val  ==  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  =  0  ||  val  ==  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
17	[BUG]  [BUGGY]  if  (val  <  =  0  ||  value  >  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  =  0  ||  value  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  =  0  ||  value  >  max)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if  (val  <  0  ||  value  ==  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  value  ==  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  value  ==  max)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if  (val  <  0  ||  value  >=  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  value  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  value  >=  max)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if  (val  <  0  ||  value  >  Long.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  value  >  Long.MIN_VALUE)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  value  >  Long.MIN_VALUE)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if  (val  <  max  ||  value  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  ||  value  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  ||  value  >  0)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if  (val  >=  0  ||  val  <  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >=  0  ||  val  <  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >=  0  ||  val  <  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  if  (val  >=  0  ||  val  <  =  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >=  0  ||  val  <  =  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >=  0  ||  val  <  =  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if  (val  >  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >  0  ||  val  >  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if  (val  >=  0L  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >=  0L  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >=  0L  ||  val  >  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if  (val  <  max  ||  val  >  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  ||  val  >  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  ||  val  >  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  if  (val  <  =  max  ||  val  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  =  max  ||  val  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  =  max  ||  val  >=  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  if  (value  <  max  ||  val  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  max  ||  val  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  max  ||  val  >=  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  if  (val  <  max  ||  val  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  ||  val  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  ||  val  ==  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  if  (val  <  max  &&  val  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  &&  val  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  &&  val  >=  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
31	[BUG]  [BUGGY]  if  (val  >  max  ||  val  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  >  max  ||  val  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  >  max  ||  val  >=  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  if  (length  <  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (length  <  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (length  <  0  ||  val  >  max)  {	  if    (val    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
33	[BUG]  [BUGGY]  if  (value  >=  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  >=  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  >=  0  ||  val  >  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
34	[BUG]  [BUGGY]  if  (val  ==  0  ||  val  >  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  ==  0  ||  val  >  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  ==  0  ||  val  >  max)  {	  if    (val    >=    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  if  (value  <  0  ||  value  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  value  >  Long.MAX_VALUE)  {	  if    (value    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
36	[BUG]  [BUGGY]  if  (value  <  0  ||  value  >  length)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  value  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  value  >  length)  {	  if    (value    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
37	[BUG]  [BUGGY]  if  (val  <  0  ||  max  >  value)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  max  >  value)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  max  >  value)  {	  if    (value    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
38	[BUG]  [BUGGY]  if  (value  <  0  ||  val  >=  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  val  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  val  >=  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  if  (val  ==  0  ||  val  >=  max)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  ==  0  ||  val  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  ==  0  ||  val  >=  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  ((  Long)value).longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  ((  Long)value).longValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	((  Long)value).longValue();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  val  =  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  val  =  Long.MIN_VALUE;  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	val  =  Long.MIN_VALUE;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  long  value  =  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  long  value  =  Long.MIN_VALUE;  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	long  value  =  Long.MIN_VALUE;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  Long.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  Long.MIN_VALUE;  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	Long.MIN_VALUE;	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  val  =  Math.abs(value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  val  =  Math.abs(value);  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	val  =  Math.abs(value);	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
45	[BUG]  [BUGGY]  if  (value  <  0  ||  max  >  value)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (value  <  0  ||  max  >  value)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (value  <  0  ||  max  >  value)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
46	[BUG]  [BUGGY]  if  (val  <  0  ||  value  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  value  >  Long.MAX_VALUE)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  value  >  Long.MAX_VALUE)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
47	[BUG]  [BUGGY]  if  (val  <  0  ||  val  >  MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  0  ||  val  >  MAX_VALUE)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  0  ||  val  >  MAX_VALUE)  {	  if    (val    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  if  (val  <  max  +  length  ||  val  >=  0)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  +  length  ||  val  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  +  length  ||  val  >=  0)  {	  if    (val    <    max    ||    val    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
49	[BUG]  [BUGGY]  if  (val  <  max  ||  value  >  val)  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  ||  value  >  val)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  ||  value  >  val)  {	  if    (val    <    0    ||    value    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  if  (val  <  =  0xfffl  ||  val  >=  max)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  =  0xfffl  ||  val  >=  max)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  =  0xfffl  ||  val  >=  max)  {	  if    (val    <    =    0    ||    val    >=    max)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  BYTE_MASK;  }  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  BYTE_MASK;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
52	[BUG]  [BUGGY]  long  field  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  long  field  =  value.longValue();  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	long  field  =  value.longValue();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  Long.MAX_VALUE;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  Long.MAX_VALUE;  }  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  buf[i]  *  Long.MAX_VALUE;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  value[i];  }  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  value[i];  }  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  val  +=  value[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buffer[i]  =(byte)value;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buffer[i]  =(byte)value;  }  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	for(int  i  =  offset  +  length;  i  <  len;  i++)  {  buffer[i]  =(byte)value;  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if  (val  <  max  ||  val  >  value)  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    private  static  void  formatLongBinary(final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length,  final  boolean  negative)  {  final  int  bits  =  (length  -  1)  *  8;  final  long  max  =  1l  <<  bits;  long  val  =  Math.abs(value);  //  Long.MIN_VALUE  stays  Long.MIN_VALUE    [BUGGY]  if  (val  <  max  ||  val  >  value)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Value     "  +  value  +     "  is  too  large  for     "  +  length  +     "  byte  field.   ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {  buf[i]  =  (byte)  val;  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	500	500	1	replace	if  (val  <  max  ||  val  >  value)  {	  if    (value    <    0    ||    val    >    max)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
