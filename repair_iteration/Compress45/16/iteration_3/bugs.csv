bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  [Delete]  0;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  [Delete]  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  [Delete]  0;	  final    boolean    negative    =    maxAsOctalChar    <    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  <  =  0;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  <  =  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  <  =  0;	  final    boolean    negative    =    maxAsOctalChar    <    =    0;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  final  boolean  negative  =  length  >=  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >=  TarConstants.MAXID;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >=  TarConstants.MAXID;	  final    boolean    negative    =    length    >=    0;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  final  boolean  negative  =  length  >>  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >>  TarConstants.MAXID;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >>  TarConstants.MAXID;	  final    boolean    negative    =    length    >=    0;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  final  boolean  negative  =  length  <  =  0;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  <  =  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  <  =  0;	  final    boolean    negative    =    length    >=    0;    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
8	[BUG]  [BUGGY]  while(value  <  maxAsOctalChar)  {  value  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  maxAsOctalChar)  {  value  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  maxAsOctalChar)  {  value  =  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
9	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
10	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
12	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
13	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
14	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
15	[BUG]  [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
16	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
17	[BUG]  [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
24	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
25	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
26	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  idx  =  start;  idx  <  len;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
27	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
28	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  offset;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
29	[BUG]  [BUGGY]  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  idx  =  start;  idx  <  maxAsOctalChar;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
30	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >  0;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  >  0;	  final    boolean    negative    =    maxAsOctalChar    >    0;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  0;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  ==  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  ==  0;	  final    boolean    negative    =    length    <    0;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
32	[BUG]  [BUGGY]  final  boolean  negative  =  length!=  0;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length!=  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length!=  0;	  final    boolean    negative    =    length    <    0;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
33	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  true;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  ==  true;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  ==  true;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
34	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  false;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value!=  false;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value!=  false;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  false;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  false;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  ==  false;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  final  boolean  negative  =  true;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  true;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  true;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  true;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value!=  true;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value!=  true;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
38	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  false,  maxAsOctalChar);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  ==  false,  maxAsOctalChar);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  ==  false,  maxAsOctalChar);	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
39	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
42	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
45	[BUG]  [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  NUMBER_INDEX))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(value  <  =  maxAsOctalChar  &&  value  <  =  NUMBER_INDEX))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(value  <  =  maxAsOctalChar  &&  value  <  =  NUMBER_INDEX))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  minAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  minAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  value.length;  i  <  len;  i++)  {  if(value  <  minAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
51	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
52	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
53	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
54	[BUG]  [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
55	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
56	[BUG]  [BUGGY]  while(value  <  maxAsOctalChar)  {  value  =  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  maxAsOctalChar)  {  value  =  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  maxAsOctalChar)  {  value  =  formatLongOctalBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
57	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  MAXID)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
58	[BUG]  [BUGGY]  while(value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
59	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  0L;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar!=  0L;	  final    boolean    negative    =    value!=    0L;    	non-compiled	[CE]  <identifier>  expected	20	None	replace
60	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.MAXID;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.MAXID;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  ==  TarConstants.MAXID;	  final    boolean    negative    =    length    >>    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
61	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.BIGINT;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.BIGINT;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  ==  TarConstants.BIGINT;	  final    boolean    negative    =    length    >>    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
62	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.VALUE_NUMBER_INT;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  ==  TarConstants.VALUE_NUMBER_INT;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  ==  TarConstants.VALUE_NUMBER_INT;	  final    boolean    negative    =    length    >>    0;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
63	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MAX_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
65	[BUG]  [BUGGY]  ||  length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||  length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||  length  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
66	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  Integer.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
67	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  Long.MIN_VALUE))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
68	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  LAST_VALID_BYTE))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
69	[BUG]  [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  <  =  maxAsOctalChar  &&  value  <  =  MAXID))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
70	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  0)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  0)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
71	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
72	[BUG]  [BUGGY]  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
73	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
74	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
75	[BUG]  [BUGGY]  if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  0)  {  if(maxAsOctalChar  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
76	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  size;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
77	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  0xff;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  ==  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  ==  0xff;	  final    boolean    negative    =    value    ==    0L;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
81	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
82	[BUG]  [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
83	[BUG]  [BUGGY]  while(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
84	[BUG]  [BUGGY]  while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
85	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >=  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >=  maxAsOctalChar;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
86	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  this.maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  this.maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  this.maxAsOctalChar;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
87	[BUG]  [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  ==  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  ==  maxAsOctalChar;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
88	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value!=  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value!=  maxAsOctalChar;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
89	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar.length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar.length;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar.length;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
90	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  0L;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >=  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  >=  0L;	  final    boolean    negative    =    maxAsOctalChar    <    =    0L;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
91	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  0L;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  <  0L;	  final    boolean    negative    =    maxAsOctalChar    <    =    0L;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
92	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
93	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  value  <  =  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  value  <  =  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  value  <  =  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
94	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar.length;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar.length;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar.length;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
95	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  <  =  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
96	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
97	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
98	[BUG]  [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
99	[BUG]  [BUGGY]  if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  length)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
100	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
101	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  0xff;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  0xff;	  final    boolean    negative    =    value    <    0L;    	non-compiled	[CE]  <identifier>  expected	18	None	replace
102	[BUG]  [BUGGY]  final  boolean  negative  =  value  >>  0L;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >>  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >>  0L;	  final    boolean    negative    =    value    >=    0L;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
103	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar!=  0;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar!=  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar!=  0;	  final    boolean    negative    =    this.maxAsOctalChar    <    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
104	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  ==  0;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  ==  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  ==  0;	  final    boolean    negative    =    this.maxAsOctalChar    <    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
105	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >=  0;  [CE]  <identifier>  expected  [FE]                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >=  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  >=  0;	  final    boolean    negative    =    this.maxAsOctalChar    <    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
106	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >>  0;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  >>  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  >>  0;	  final    boolean    negative    =    this.maxAsOctalChar    <    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
107	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  [Delete]  0;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  [Delete]  0;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  [Delete]  0;	  final    boolean    negative    =    this.maxAsOctalChar    <    0;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
108	[BUG]  [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  ==  0L;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  this.maxAsOctalChar  ==  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  this.maxAsOctalChar  ==  0L;	  final    boolean    negative    =    maxAsOctalChar    ==    0L;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length  -  1;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
113	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
114	[BUG]  [BUGGY]  while(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
115	[BUG]  [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  while(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
117	[BUG]  [BUGGY]  while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(value  <  =  maxAsOctalChar)  {  if(length  <  =  0)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  4;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  4;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  4;	  final    boolean    negative    =    length    >    0;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
119	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  1;  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  1;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  1;	  final    boolean    negative    =    length    >    0;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
120	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  2;  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  2;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  2;	  final    boolean    negative    =    length    >    0;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
121	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  5;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  5;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  5;	  final    boolean    negative    =    length    >    0;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
122	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  =  0xff;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  <  =  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  <  =  0xff;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
123	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  0xff;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >=  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >=  0xff;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
124	[BUG]  [BUGGY]  final  boolean  negative  =  value!=  0xff;  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value!=  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value!=  0xff;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
125	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  0xff;  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  0xff;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  0xff;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
126	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  0L;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  >  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  >  0L;	  final    boolean    negative    =    value    >    0L;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
127	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  >  0L;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  >  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  >  0L;	  final    boolean    negative    =    value    >    0L;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
128	[BUG]  [BUGGY]  while(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
129	[BUG]  [BUGGY]  while(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  while(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	while(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
130	[BUG]  [BUGGY]  ||(length  >  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  >  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  >  maxAsOctalChar  &&  value.charAt(maxAsOctalChar)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
131	[BUG]  [BUGGY]  ||(length  >  maxAsOctalChar  &&  value.charAt(offset)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  ||(length  >  maxAsOctalChar  &&  value.charAt(offset)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	||(length  >  maxAsOctalChar  &&  value.charAt(offset)!=  '-'))  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
132	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  1;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  1;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  ==  1;	  final    boolean    negative    =    maxAsOctalChar    ==    0;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
133	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
135	[BUG]  [BUGGY]  if(length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  ==  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
136	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
137	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
138	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
139	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
140	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
141	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
142	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
143	[BUG]  [BUGGY]  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  >=  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
144	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
145	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  length;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  length;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  +  length;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
146	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  1;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  +  1;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  +  1;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
147	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
148	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	int  idx  =  start;  idx  <  limit;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
149	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  end;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    limit;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
150	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
151	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
152	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  >  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
153	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  length)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
154	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(maxAsOctalChar,    buf,    offset,    length);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
155	[BUG]  [BUGGY]  if(value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
156	[BUG]  [BUGGY]  safeToInt(value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeToInt(value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeToInt(value)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
157	[BUG]  [BUGGY]  safely(value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safely(value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safely(value)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
158	[BUG]  [BUGGY]  safeToInt(0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeToInt(0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeToInt(0)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
159	[BUG]  [BUGGY]  safeNegatedBytes(value,  buf,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeNegatedBytes(value,  buf,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeNegatedBytes(value,  buf,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
160	[BUG]  [BUGGY]  safeNegatives(value)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeNegatives(value)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeNegatives(value)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
161	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
162	[BUG]  [BUGGY]  if(length  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
163	[BUG]  [BUGGY]  Integer  chars  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  Integer  chars  =  formatBigIntegerBytes(value,  buf,  offset,  length);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	Integer  chars  =  formatBigIntegerBytes(value,  buf,  offset,  length);	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
164	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  size);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
165	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
166	[BUG]  [BUGGY]  safeToInt(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeToInt(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeToInt(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
167	[BUG]  [BUGGY]  safeGet(value,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  safeGet(value,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	safeGet(value,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
168	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
169	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  false;  [CE]  <identifier>  expected  [FE]                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar!=  false;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar!=  false;	  final    boolean    negative    =    maxAsOctalChar!=    0;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
170	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  return  formatBigDecimalBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buffer.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  ==  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
173	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  for(int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
174	[BUG]  [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	int  idx  =  start;  idx  <  length;  idx++)  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    >    maxAsOctalChar)    {    for(int    idx    =    start;    idx    <    length;    idx++)    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
175	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
176	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
177	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
178	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
179	[BUG]  [BUGGY]  if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  0)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
180	[BUG]  [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  0);  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  maxAsOctalChar  ==  0);  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  maxAsOctalChar  ==  0);	  final    boolean    negative    =    maxAsOctalChar    ==    0L;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
181	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  false;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >=  false;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >=  false;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
182	[BUG]  [BUGGY]  final  boolean  negative  =  value  >=  true;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >=  true;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >=  true;	  final    boolean    negative    =    value    ==    false;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
183	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  +  1;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  +  1;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar  +  1;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
184	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  maxAsOctalChar;	  final    boolean    negative    =    length    >    0;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
185	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  0x80;  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  0x80;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  0x80;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
186	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  0x7F;  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  0x7F;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  0x7F;	  final    boolean    negative    =    value    <    =    0xff;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
187	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
188	[BUG]  [BUGGY]  if(length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  maxAsOctalChar  ||  length  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
189	[BUG]  [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  maxAsOctalChar)  {  return  formatLongOctalOrBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
190	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
191	[BUG]  [BUGGY]  if(length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
192	[BUG]  [BUGGY]  final  boolean  negative  =  length  ==  0L;  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  ==  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  ==  0L;	  final    boolean    negative    =    maxAsOctalChar    ==    0L;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
193	[BUG]  [BUGGY]  if(length  <  1)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  1)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  1)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
194	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
195	[BUG]  [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length  +  1);  }	  if(length    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
196	[BUG]  [BUGGY]  final  boolean  negative  =  length  <  =  0L;  [CE]  <identifier>  expected  [FE]                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  <  =  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  <  =  0L;	  final    boolean    negative    =    maxAsOctalChar    <    =    0L;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
197	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatLongOctalBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
198	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  length;  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  length;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  length;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
199	[BUG]  [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  length  >  4;  [CE]  <identifier>  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  length  >  4;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  <  =  maxAsOctalChar  ||  length  >  4;	  final    boolean    negative    =    value    <    =    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
200	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  maxAsOctalChar)  {  for(int  i  =  0,  len  =  buf.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    buf.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  maxAsOctalChar.length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	for(int  i  =  0,  len  =  length;  i  <  len;  i++)  {  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  for(int    i    =    0,    len    =    value.length;    i    <    len;    i++)    {    if(value    >    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
203	[BUG]  [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  >  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
204	[BUG]  [BUGGY]  if(length  <  2)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
205	[BUG]  [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  length)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
206	[BUG]  [BUGGY]  final  boolean  negative  =  length  >  0L;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  length  >  0L;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  length  >  0L;	  final    boolean    negative    =    value    >    0L;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
207	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
208	[BUG]  [BUGGY]  if(value  <  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  maxAsOctalChar  ||  value  >  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
209	[BUG]  [BUGGY]  if(value  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  MAXID)  {  throw  new  IllegalArgumentException( " ");  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
210	[BUG]  [BUGGY]  if(value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  <identifier>  expected  [FE]                                        IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(value  <  =  maxAsOctalChar)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(value    <    =    maxAsOctalChar)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
211	[BUG]  [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                          IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  >=  maxAsOctalChar)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
212	[BUG]  [BUGGY]  if(length  <  1)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  1)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  1)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
213	[BUG]  [BUGGY]  if(length  <  2)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                              IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  2)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  2)  {  return  formatBigIntegerBytes(maxAsOctalChar,  buf,  offset,  length);  }	  if(length    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(maxAsOctalChar,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
214	[BUG]  [BUGGY]  if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [CE]  <identifier>  expected  [FE]                            IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	if(length  <  =  MAXID)  {  if(value  <  =  maxAsOctalChar)  {  return  formatBigIntegerBytes(value,  buf,  offset,  length);  }  else  {  formatBigIntegerBytes(value,  buf,  offset,  length);  }	  if(value    <    =    maxAsOctalChar)    {    return    formatBigIntegerBytes(value,    buf,    offset,    length);    }    else    {    formatBigIntegerBytes(value,    buf,    offset,    length);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
215	[BUG]  [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  >  maxAsOctalChar;  [CE]  <identifier>  expected  [FE]                      IllegalArgumentException      [CONTEXT]      public  static  int  formatLongOctalOrBinaryBytes(  final  long  value,  final  byte[]  buf,  final  int  offset,  final  int  length)  {  final  long  maxAsOctalChar  =  length  ==  TarConstants.UIDLEN  ?  TarConstants.MAXID  :  TarConstants.MAXSIZE;      [BUGGY]  final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  >  maxAsOctalChar;  [BUGGY]      if  (!negative  &&  value  <=  maxAsOctalChar)  {  //  OK  to  store  as  octal  chars  return  formatLongOctalBytes(value,  buf,  offset,  length);  }  if  (length  <  9)  {  formatLongBinary(value,  buf,  offset,  length,  negative);  }  formatBigIntegerBinary(value,  buf,  offset,  length,  negative);  buf[offset]  =  (byte)  (negative  ?  0xff  :  0x80);  [CLASS]  TarUtils  1  [METHOD]  formatLongOctalOrBinaryBytes  [RETURN_TYPE]  int  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  current  end  i  idx  len  length  limit  offset  remaining  start  long  maxAsOctalChar  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	0.7071067811865475	480	480	1	replace	final  boolean  negative  =  value  >  maxAsOctalChar  ||  length  >  maxAsOctalChar;	  final    boolean    negative    =    value    >    maxAsOctalChar;    	non-compiled	[CE]  <identifier>  expected	38	None	replace
