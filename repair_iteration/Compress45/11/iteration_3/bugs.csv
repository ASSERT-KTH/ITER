bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  long  val  =  buf[idx  -  1];  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  -  1];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  -  1];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
2	[BUG]  [BUGGY]  int  val  =  buf[idx];  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  val  =  buf[idx];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  val  =  buf[idx];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
3	[BUG]  [BUGGY]  long  val  =  buf[idx  +  1];  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  +  1];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  +  1];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
4	[BUG]  [BUGGY]  long  val  =  buf[i];  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[i];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[i];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
5	[BUG]  [BUGGY]  long  val  =  value[idx];  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value[idx];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value[idx];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
6	[BUG]  [BUGGY]  byte  val  =  buf[idx];  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  byte  val  =  buf[idx];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	byte  val  =  buf[idx];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
7	[BUG]  [BUGGY]  long  val  =  buf[idx]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx]  &  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx]  &  0xff;	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
8	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  4  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  4  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  4  +  1);	  buf[i]    =    (byte)(value    %    4);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  3);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  3);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  3);	  buf[i]    =    (byte)(value    %    4);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  %  2);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  %  2);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  %  2);	  buf[i]    =    (byte)(value    %    4);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  4);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  4);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  4);	  buf[i]    =    (byte)(value    %    4);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xff;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xff;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
13	[BUG]  [BUGGY]  buf[i]  =(byte)value  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  -  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  -  BYTE_MASK;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
14	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  BYTE_MASK;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
15	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  BYTE_MASK;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
16	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  BYTE_MASK  |  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  BYTE_MASK  |  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  BYTE_MASK  |  1;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
17	[BUG]  [BUGGY]  buf[i]  =  value?  negative  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value?  negative  :  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value?  negative  :  BYTE_MASK;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
18	[BUG]  [BUGGY]  buf[i]  =  value?  BYTE_MASK  :  negative;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value?  BYTE_MASK  :  negative;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value?  BYTE_MASK  :  negative;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
19	[BUG]  [BUGGY]  buf[i]  =  positive?  value  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  positive?  value  :  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  positive?  value  :  BYTE_MASK;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
20	[BUG]  [BUGGY]  buf[idx]  =  (byte)value  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  (byte)value  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  (byte)value  +  1;	  buf[idx]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
21	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xffl;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xffl;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
22	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffl  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffl  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffl  +  1;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
23	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffl  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffl  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffl  +  1;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xfffl;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xfffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xfffl;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  ((  long)value).setLong(buf,  i);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf,  i);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
26	[BUG]  [BUGGY]  ((  long)value).setLong(val  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(val  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(val  +  1);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
27	[BUG]  [BUGGY]  ((  long)value).setLong(val  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(val  -  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(val  -  1);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
28	[BUG]  [BUGGY]  ((  long)value).setLong(i);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(i);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
29	[BUG]  [BUGGY]  ((  long)val).setLong(buf,  i);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).setLong(buf,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).setLong(buf,  i);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
30	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  10  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  10  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  10  +  1);	  buf[i]    =    (byte)(value    %    10);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
31	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  2;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
32	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  4;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  4;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
33	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  10;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  10;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  10;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
34	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  8;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  8;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
35	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  3;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  3;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  3;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
36	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  1024;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  1024;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  1024;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
37	[BUG]  [BUGGY]  buf[i]  =  value?  negative  :  val;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value?  negative  :  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value?  negative  :  val;	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
38	[BUG]  [BUGGY]  buf[i]  =  negative?  value  :  val.longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  value  :  val.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  value  :  val.longValue();	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
39	[BUG]  [BUGGY]  buf[i]  =  positive?  value  :  val;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  positive?  value  :  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  positive?  value  :  val;	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
40	[BUG]  [BUGGY]  buf[i]  =  negative?  value  :  val.length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  value  :  val.length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  value  :  val.length;	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
41	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx  -  1]);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx  -  1]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx  -  1]);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
42	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx  +  1]);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx  +  1]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx  +  1]);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
43	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx],  val);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx],  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx],  val);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
44	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx]  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx]  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx]  +  1);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
45	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx]  -  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx]  -  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx]  -  1);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
46	[BUG]  [BUGGY]  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	remaining  +=  length;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
47	[BUG]  [BUGGY]  val  =  value.longValue();  remaining  +=  i;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue();  remaining  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue();  remaining  +=  i;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
48	[BUG]  [BUGGY]  val  =  buf.longValue();  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  buf.longValue();  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  buf.longValue();  remaining  +=  length;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
49	[BUG]  [BUGGY]  val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
50	[BUG]  [BUGGY]  val  =  value.longValue();  remaining  +=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue();  remaining  +=  length  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue();  remaining  +=  length  +  1;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
51	[BUG]  [BUGGY]  remainder  +=  value.longValue();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  remainder  +=  value.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	remainder  +=  value.longValue();	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
52	[BUG]  [BUGGY]  val  =  value.longValue()  +  1;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  +  1;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  +  1;  remaining  +=  length;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
53	[BUG]  [BUGGY]  buf[idx]  =(byte)value  /  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)value  /  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)value  /  1;	  buf[idx]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
54	[BUG]  [BUGGY]  buf[idx]  =(byte)value  -  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)value  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)value  -  1L;	  buf[idx]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
55	[BUG]  [BUGGY]  buf[idx]  =(byte)value  -  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)value  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)value  -  2;	  buf[idx]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
56	[BUG]  [BUGGY]  ((  long)i).setLong(val,  0,  buf.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).setLong(val,  0,  buf.length);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).setLong(val,  0,  buf.length);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
57	[BUG]  [BUGGY]  ((  long)i).setLong(value,  0,  val);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).setLong(value,  0,  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).setLong(value,  0,  val);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
58	[BUG]  [BUGGY]  ((  long)val).setLong(buf,  0,  i);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).setLong(buf,  0,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).setLong(buf,  0,  i);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
59	[BUG]  [BUGGY]  ((  int)i).setLong(buf,  0,  val);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)i).setLong(buf,  0,  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)i).setLong(buf,  0,  val);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
60	[BUG]  [BUGGY]  ((  long)i).setLong(buf,  0,  val  +  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).setLong(buf,  0,  val  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).setLong(buf,  0,  val  +  1);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
61	[BUG]  [BUGGY]  ((  byte)i).setLong(buf,  0,  val);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  byte)i).setLong(buf,  0,  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  byte)i).setLong(buf,  0,  val);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
62	[BUG]  [BUGGY]  ((  long)i).setLong(buf,  0,  val.length);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).setLong(buf,  0,  val.length);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).setLong(buf,  0,  val.length);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
63	[BUG]  [BUGGY]  buf[i]  =(byte)val  /  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  /  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  /  1L;	  buf[i]    =(byte)val    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
64	[BUG]  [BUGGY]  buf[i]  =(byte)value  -  1L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  -  1L;	  buf[i]    =(byte)val    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
65	[BUG]  [BUGGY]  buf[i]  =(byte)max  -  1L;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)max  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)max  -  1L;	  buf[i]    =(byte)val    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
66	[BUG]  [BUGGY]  buf[i]  =(byte)length  -  1L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)length  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)length  -  1L;	  buf[i]    =(byte)val    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
67	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  i  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  i  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  +  i  +  1);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  %  BYTE_MASK  +  i);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  %  BYTE_MASK  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  %  BYTE_MASK  +  i);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  i);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  i);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  offset);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  +  offset);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
71	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  2  +  i);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  2  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  2  +  i);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
72	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
73	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  val);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  val);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
74	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  offset);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  offset);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
75	[BUG]  [BUGGY]  val[i]  =  ValueUtils.toByteArray(value);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  ValueUtils.toByteArray(value);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  ValueUtils.toByteArray(value);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
76	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  offset);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  offset);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
77	[BUG]  [BUGGY]  long  val  =  buf.longValue();  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf.longValue();  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf.longValue();  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
78	[BUG]  [BUGGY]  long  val  =  value.longValue();  remaining  +=  i;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue();  remaining  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue();  remaining  +=  i;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
79	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  1;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  1;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  1;  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
80	[BUG]  [BUGGY]  long  val  =  buf[i].longValue();  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[i].longValue();  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[i].longValue();  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
81	[BUG]  [BUGGY]  long  val  =  buf[idx];  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx];  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx];  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
82	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  offset  +  length;  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
83	[BUG]  [BUGGY]  ((  long)val).longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).longValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
84	[BUG]  [BUGGY]  ((  long)value).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).doubleValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).doubleValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
85	[BUG]  [BUGGY]  ((  long)value).intValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).intValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).intValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
86	[BUG]  [BUGGY]  ((  long)value).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).longValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).longValue()  +  1;	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
87	[BUG]  [BUGGY]  ((  int)value).longValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)value).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)value).longValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
88	[BUG]  [BUGGY]  ((  long)val).doubleValue();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).doubleValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).doubleValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
89	[BUG]  [BUGGY]  buf[i]  =(byte)val  /  0xfff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  /  0xfff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  /  0xfff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  buf[i]  =(byte)val  /  0xffff;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  /  0xffff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  /  0xffff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  buf[i]  =(byte)value  -  0xfff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  -  0xfff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  -  0xfff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  0xfff;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  0xfff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  0xfff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  buf[i]  =(byte)val  -  offset;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  -  offset;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  -  offset;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
94	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(buf[i]);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(buf[i]);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
95	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray()  +  1;	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
96	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(offset);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(offset);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(i);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(i);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
98	[BUG]  [BUGGY]  val[i]  =  val.toByteArray();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  val.toByteArray();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  val.toByteArray();	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
99	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffffl  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffffl  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffffl  +  1;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
100	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xffffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xffffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xffffl;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
101	[BUG]  [BUGGY]  buf[i]  =  value  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  /  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  /  BYTE_MASK;	  buf[i]    =    value    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
102	[BUG]  [BUGGY]  buf[i]  =  value  *  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  *  BYTE_MASK  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  *  BYTE_MASK  +  1;	  buf[i]    =    value    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
103	[BUG]  [BUGGY]  buf[i]  =  value  *  BYTE_MASK  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  *  BYTE_MASK  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  *  BYTE_MASK  -  1;	  buf[i]    =    value    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
104	[BUG]  [BUGGY]  buf[i]  =  value  +  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  +  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  +  BYTE_MASK;	  buf[i]    =    value    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  int  len  =  buf[i].length  -  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  buf[i].length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  buf[i].length  -  1;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
106	[BUG]  [BUGGY]  byte  len  =  buf[i].length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  byte  len  =  buf[i].length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	byte  len  =  buf[i].length;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
107	[BUG]  [BUGGY]  int  len  =  value[i].length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  value[i].length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  value[i].length;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
108	[BUG]  [BUGGY]  long  len  =  buf[i].length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  len  =  buf[i].length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  len  =  buf[i].length;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
109	[BUG]  [BUGGY]  int  len  =  val[i].length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  val[i].length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  val[i].length;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
110	[BUG]  [BUGGY]  int  len  =  buf[i].length  +  1;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  buf[i].length  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  buf[i].length  +  1;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
111	[BUG]  [BUGGY]  int  len  =  buf[i].length  -  2;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  buf[i].length  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  buf[i].length  -  2;	  int    len    =    buf[i].length;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
112	[BUG]  [BUGGY]  buf[i]  =  val.longValue();  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.longValue();	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
113	[BUG]  [BUGGY]  buf[i]  =  value.longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.longValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.longValue()  +  1;	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
114	[BUG]  [BUGGY]  buf[i]  =  value.intValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.intValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.intValue();	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
115	[BUG]  [BUGGY]  buf[i]  =  value.byteValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.byteValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.byteValue();	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
116	[BUG]  [BUGGY]  buf[i]  =  value.longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.longValue()  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.longValue()  -  1;	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
117	[BUG]  [BUGGY]  ((  int)value).setLength(0);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)value).setLength(0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)value).setLength(0);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
118	[BUG]  [BUGGY]  ((  long)val).setLength(0);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).setLength(0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).setLength(0);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
119	[BUG]  [BUGGY]  ((  long)value).setLength(i);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLength(i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLength(i);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
120	[BUG]  [BUGGY]  ((  long)value).setLength(1);  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLength(1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLength(1);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
121	[BUG]  [BUGGY]  ((  byte)value).setLength(0);  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  byte)value).setLength(0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  byte)value).setLength(0);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
122	[BUG]  [BUGGY]  ((  long)value).setLength(2);  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLength(2);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLength(2);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
123	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  i);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  i);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
124	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  i  +  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  i  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  i  +  1);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
125	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  offset  +  i);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  offset  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  offset  +  i);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
126	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  length);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  length);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  length);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
127	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf,  i);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf,  i);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
128	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  0);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  0);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
129	[BUG]  [BUGGY]  int  val  =  buf[idx  +  i];  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  val  =  buf[idx  +  i];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  val  =  buf[idx  +  i];	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
130	[BUG]  [BUGGY]  long  val  =  buf[idx  +  i]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  +  i]  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  +  i]  *  BYTE_MASK;	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
131	[BUG]  [BUGGY]  long  val  =  buf[idx  +  i]  &  0xff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  +  i]  &  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  +  i]  &  0xff;	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
132	[BUG]  [BUGGY]  long  val  =  buf[idx  +  i]  &  0xfff;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  +  i]  &  0xfff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  +  i]  &  0xfff;	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
133	[BUG]  [BUGGY]  long  val  =  buf[idx  +  i]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx  +  i]  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx  +  i]  &  BYTE_MASK;	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
134	[BUG]  [BUGGY]  val  =  value.longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  +  1;	  val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
135	[BUG]  [BUGGY]  val  =  buf.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  buf.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  buf.longValue();	  val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
136	[BUG]  [BUGGY]  val  =  value.longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  -  1;	  val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
137	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i]  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i]  -  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i]  -  1);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
138	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i],  negative);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i],  negative);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i],  negative);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
139	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i],  val);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i],  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i],  val);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
140	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i]  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i]  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i]  +  1);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
141	[BUG]  [BUGGY]  ((  long)val).setLong(buf[i]);  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).setLong(buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).setLong(buf[i]);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
142	[BUG]  [BUGGY]  ((  long)i).doubleValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).doubleValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).doubleValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
143	[BUG]  [BUGGY]  ((  long)i).longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).longValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).longValue()  +  1;	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
144	[BUG]  [BUGGY]  ((  int)i).longValue();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)i).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)i).longValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
145	[BUG]  [BUGGY]  ((  long)i).intValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).intValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).intValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
146	[BUG]  [BUGGY]  ((  long)i).longValue()  -  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).longValue()  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).longValue()  -  1;	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
147	[BUG]  [BUGGY]  val  +=  i;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  i;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
148	[BUG]  [BUGGY]  val  -=  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  -=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  -=  length;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
149	[BUG]  [BUGGY]  val  +=  length  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  length  -  1;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
150	[BUG]  [BUGGY]  val  +=  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  offset;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  offset;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
151	[BUG]  [BUGGY]  val  +=  length  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  length  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  length  +  1;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
152	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xffff;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xffff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xffff;	  buf[i]    =(byte)val    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
153	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffffl;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffffl;	  buf[i]    =(byte)val    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
154	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffff;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffff;	  buf[i]    =(byte)val    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
155	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xfffff;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xfffff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xfffff;	  buf[i]    =(byte)val    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
156	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffffL;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffffL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffffL;	  buf[i]    =(byte)val    &    0xffff;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
157	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xffffL;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xffffL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xffffL;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
158	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffffL  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffffL  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffffL  +  1;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
159	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffffL  *  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffffL  *  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffffL  *  2;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
160	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  2;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
161	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  4;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  4;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
162	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  10;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  10;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  10;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
163	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  3;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  3;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  3;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
164	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  1;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
165	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  8;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  8;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
166	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xfffL;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xfffL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xfffL;	  buf[i]    =(byte)value    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
167	[BUG]  [BUGGY]  buf[idx]  =  val  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  val  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  val  +  1;	  buf[idx]    =    val;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
168	[BUG]  [BUGGY]  buf[idx]  =  val.toByteArray();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  val.toByteArray();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  val.toByteArray();	  buf[idx]    =    val;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
169	[BUG]  [BUGGY]  buf[idx]  =  val  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  val  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  val  *  BYTE_MASK;	  buf[idx]    =    val;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
170	[BUG]  [BUGGY]  buf[idx]  =  val.byteValue();  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  val.byteValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  val.byteValue();	  buf[idx]    =    val;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
171	[BUG]  [BUGGY]  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
172	[BUG]  [BUGGY]  long  val  =  buf.longValue();  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf.longValue();  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf.longValue();  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
173	[BUG]  [BUGGY]  int  val  =  value.longValue();  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  val  =  value.longValue();  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  val  =  value.longValue();  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
174	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  offset  +  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  offset  +  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
175	[BUG]  [BUGGY]  long  val  =  buf[i].longValue();  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[i].longValue();  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[i].longValue();  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
176	[BUG]  [BUGGY]  long  val  =  value.longValue();  offset  +=  i;  [CE]  illegal  start  of  expression  [FE]                                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue();  offset  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue();  offset  +=  i;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
177	[BUG]  [BUGGY]  long  val  =  buf[idx];  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx];  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx];  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
178	[BUG]  [BUGGY]  buf[i]  =  (byte)(buf[idx  %  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(buf[idx  %  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(buf[idx  %  BYTE_MASK);	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
179	[BUG]  [BUGGY]  val[i]  =  (byte)(value  %  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  (byte)(value  %  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  (byte)(value  %  BYTE_MASK);	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
180	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  %  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  %  BYTE_MASK  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  %  BYTE_MASK  +  1);	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
181	[BUG]  [BUGGY]  buf[i]  =  val  %  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  %  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  %  BYTE_MASK;	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  buf[i]  =  val  +  1L;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  1L;	  buf[i]    =    val    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
183	[BUG]  [BUGGY]  buf[i]  =  val  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  2;	  buf[i]    =    val    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
184	[BUG]  [BUGGY]  buf[i]  =  val  +  3;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  3;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  3;	  buf[i]    =    val    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
185	[BUG]  [BUGGY]  buf[i]  =  val  +  4;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  4;	  buf[i]    =    val    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
186	[BUG]  [BUGGY]  buf[i]  =  val  +  8;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  8;	  buf[i]    =    val    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
187	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  &  0xfff);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  &  0xfff);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  &  0xfff);	  buf[i]    =    (byte)(value    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
188	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  &  0xffff);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  &  0xffff);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  &  0xffff);	  buf[i]    =    (byte)(value    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
189	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  &  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  &  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  &  BYTE_MASK);	  buf[i]    =    (byte)(value    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
190	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  +  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  +  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  +  BYTE_MASK);	  buf[i]    =    (byte)(value    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
191	[BUG]  [BUGGY]  buf[i]  =  val.byteValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.byteValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.byteValue()  +  1;	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
192	[BUG]  [BUGGY]  val[i]  =  val.byteValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  val.byteValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  val.byteValue();	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
193	[BUG]  [BUGGY]  buf[i]  =  val.byteValue(i);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.byteValue(i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.byteValue(i);	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
194	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  2  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  2  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  2  +  1);	  buf[i]    =    (byte)(value    %    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
195	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  2);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  2);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  2);	  buf[i]    =    (byte)(value    %    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
196	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  2  +  offset);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  2  +  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  2  +  offset);	  buf[i]    =    (byte)(value    %    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
197	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  %  2  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  %  2  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  %  2  +  1);	  buf[i]    =    (byte)(value    %    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
198	[BUG]  [BUGGY]  int  len  =  val.length();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  val.length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  val.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
199	[BUG]  [BUGGY]  int  len  =  length()  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  length()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  length()  +  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
200	[BUG]  [BUGGY]  int  len  =  length()  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  length()  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  length()  -  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
201	[BUG]  [BUGGY]  int  len  =  value.length();  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  value.length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  value.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
202	[BUG]  [BUGGY]  long  len  =  length();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  len  =  length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  len  =  length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
203	[BUG]  [BUGGY]  int  len  =  i.length();  [CE]  illegal  start  of  expression  [FE]                                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  i.length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  i.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
204	[BUG]  [BUGGY]  int  len  =  idx.length();  [CE]  illegal  start  of  expression  [FE]                                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  idx.length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  idx.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
205	[BUG]  [BUGGY]  buf[i]  =(byte)val  /  2;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  /  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  /  2;	  buf[i]    =(byte)val    -    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
206	[BUG]  [BUGGY]  buf[i]  =(byte)value  -  2;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  -  2;	  buf[i]    =(byte)val    -    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
207	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  2;	  buf[i]    =(byte)val    -    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
208	[BUG]  [BUGGY]  buf[i]  =(byte)val  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  +  2;	  buf[i]    =(byte)val    -    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
209	[BUG]  [BUGGY]  buf[i]  =(byte)max  -  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)max  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)max  -  2;	  buf[i]    =(byte)val    -    2;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
210	[BUG]  [BUGGY]  buf[idx]  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  BYTE_MASK;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
211	[BUG]  [BUGGY]  val[i]  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  BYTE_MASK;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
212	[BUG]  [BUGGY]  buf[i]  =  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  BYTE_MASK  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  BYTE_MASK  +  1;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
213	[BUG]  [BUGGY]  buf[i]  =  BYTE_MASK  |  val;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  BYTE_MASK  |  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  BYTE_MASK  |  val;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
214	[BUG]  [BUGGY]  buf[i]  =  BYTE_MASK  +  val;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  BYTE_MASK  +  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  BYTE_MASK  +  val;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
215	[BUG]  [BUGGY]  buf[i]  =  value  /  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  /  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  /  1;	  buf[i]    =    value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
216	[BUG]  [BUGGY]  buf[i]  =  value  +  1L;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  +  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  +  1L;	  buf[i]    =    value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
217	[BUG]  [BUGGY]  buf[i]  =  value  +  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  +  2;	  buf[i]    =    value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
218	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  1;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
219	[BUG]  [BUGGY]  long  val  =  buf.longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf.longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
220	[BUG]  [BUGGY]  long  val  =  buf[i].longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[i].longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[i].longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
221	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  *  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  *  2;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
222	[BUG]  [BUGGY]  int  val  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  val  =  value.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  val  =  value.longValue();	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
223	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  2;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  2;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
224	[BUG]  [BUGGY]  buf[idx]  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value.longValue();	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
225	[BUG]  [BUGGY]  buf[idx]  =  value  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value  *  BYTE_MASK;	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
226	[BUG]  [BUGGY]  buf[idx]  =  value.toByteArray();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value.toByteArray();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value.toByteArray();	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
227	[BUG]  [BUGGY]  buf[idx]  =  value  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value  +  1;	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
228	[BUG]  [BUGGY]  buf[idx]  =  value  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value  -  1;	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
229	[BUG]  [BUGGY]  buf[idx]  =(byte)val;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
230	[BUG]  [BUGGY]  buf[idx]  =(byte)val  /  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val  /  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val  /  1;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
231	[BUG]  [BUGGY]  buf[idx]  =(byte)val  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val  +  1;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  buf[idx]  =(byte)max  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)max  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)max  -  1;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
233	[BUG]  [BUGGY]  buf[idx]  =(byte)length  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)length  -  1;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
234	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  BYTE_MASK  +  1);	  buf[i]    =    (byte)(value    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
235	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  -  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  BYTE_MASK  -  1);	  buf[i]    =    (byte)(value    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
236	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  +  i);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  BYTE_MASK  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  BYTE_MASK  +  i);	  buf[i]    =    (byte)(value    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
237	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  /  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  /  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  /  BYTE_MASK);	  buf[i]    =    (byte)(value    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
238	[BUG]  [BUGGY]  val[i]  =  value;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  value;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  value;	  val[i]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
239	[BUG]  [BUGGY]  val[i]  =  (byte)value  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  (byte)value  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  (byte)value  +  1;	  val[i]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
240	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray()  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray()  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray()  +  1;	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
241	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray()  -  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray()  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray()  -  1;	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
242	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(i);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(i);	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
243	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(offset);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(offset);	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
244	[BUG]  [BUGGY]  val  >  >=  4;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  >  >=  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  >  >=  4;	  val    >    >=    8;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
245	[BUG]  [BUGGY]  val  >  >=  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  >  >=  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  >  >=  1;	  val    >    >=    8;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
246	[BUG]  [BUGGY]  val  >  >=  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  >  >=  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  >  >=  2;	  val    >    >=    8;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
247	[BUG]  [BUGGY]  val  >  >=  3;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  >  >=  3;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  >  >=  3;	  val    >    >=    8;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
248	[BUG]  [BUGGY]  val  >  >=  16;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  >  >=  16;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  >  >=  16;	  val    >    >=    8;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
249	[BUG]  [BUGGY]  buf[i]  =  val  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  -  1;	  buf[i]    =    value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
250	[BUG]  [BUGGY]  buf[i]  =  value  -  1L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  -  1L;	  buf[i]    =    value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
251	[BUG]  [BUGGY]  buf[i]  =  value  -  2;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  -  2;	  buf[i]    =    value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
252	[BUG]  [BUGGY]  buf[i]  =  val  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  /  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  /  BYTE_MASK;	  buf[i]    =    val    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
253	[BUG]  [BUGGY]  buf[i]  =  val  *  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  *  BYTE_MASK  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  *  BYTE_MASK  +  1;	  buf[i]    =    val    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
254	[BUG]  [BUGGY]  buf[i]  =  val  *  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  *  BYTE_MASK  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  *  BYTE_MASK  +  2;	  buf[i]    =    val    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
255	[BUG]  [BUGGY]  buf[i]  =  val  +  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  +  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  +  BYTE_MASK;	  buf[i]    =    val    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
256	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK  +  1);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
257	[BUG]  [BUGGY]  buf[i]  =  (byte)(buf[idx  %  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(buf[idx  %  BYTE_MASK  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(buf[idx  %  BYTE_MASK  +  1);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
258	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  1  +  i);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  1  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  +  1  +  i);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
259	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  2);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  2);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  +  2);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
260	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  BYTE_MASK  +  1);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
261	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_VALUE);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_VALUE);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_VALUE);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
262	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_SIZE);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_SIZE);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  BYTE_MASK  *  BYTE_SIZE);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
263	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value[i]);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value[i]);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
264	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  val);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf[i],  val);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
265	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  value);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  value);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf[i],  value);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
266	[BUG]  [BUGGY]  val[i]  =  ValueUtils.toByteArray(buf[i]);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  ValueUtils.toByteArray(buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  ValueUtils.toByteArray(buf[i]);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
267	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  offset);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf[i],  offset);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
268	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  buf[i]);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  buf[i]);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
269	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  val);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i],  val);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
270	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  offset);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i],  offset);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
271	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  negative);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i],  negative);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i],  negative);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
272	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  &  0xffff);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  &  0xffff);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i]  &  0xffff);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
273	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i]  +  1);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
274	[BUG]  [BUGGY]  buf[i]  =  val  <  <  4;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  4;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
275	[BUG]  [BUGGY]  buf[i]  =  value  <  <  8;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  <  <  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  <  <  8;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
276	[BUG]  [BUGGY]  buf[i]  =  val  <  <  8  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  8  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  8  +  1;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
277	[BUG]  [BUGGY]  buf[i]  =  val  <  <  16;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  16;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  16;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
278	[BUG]  [BUGGY]  buf[i]  =  val  <  <  1;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  1;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
279	[BUG]  [BUGGY]  buf[i]  =  val  <  <  2;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  2;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
280	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  4;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  4;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
281	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  1L;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  1L;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
282	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  1024;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  1024;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  1024;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
283	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  8;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  8;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
284	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  3;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  3;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  3;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
285	[BUG]  [BUGGY]  buf[i]  =(byte)max  +  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)max  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)max  +  1;	  buf[i]    =(byte)max    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
286	[BUG]  [BUGGY]  buf[i]  =(byte)length  -  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)length  -  1;	  buf[i]    =(byte)max    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
287	[BUG]  [BUGGY]  buf[i]  =(byte)max  /  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)max  /  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)max  /  1;	  buf[i]    =(byte)max    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
288	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  BYTE_MASK  |  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  BYTE_MASK  |  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  BYTE_MASK  |  1;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
289	[BUG]  [BUGGY]  buf[i]  =(byte)val  -  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  -  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  -  BYTE_MASK;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
290	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  BYTE_MASK  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  BYTE_MASK  +  1;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
291	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xff;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
292	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  BYTE_MASK;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
293	[BUG]  [BUGGY]  buf[i]  =  (byte)length  /  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)length  /  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)length  /  1;	  buf[i]    =    (byte)val    /    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
294	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  1);	  buf[i]    =    (byte)val    /    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
295	[BUG]  [BUGGY]  ((  int)value).setLong(val);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)value).setLong(val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)value).setLong(val);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
296	[BUG]  [BUGGY]  ((  long)value).setLong(buf,  0,  i);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf,  0,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf,  0,  i);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
297	[BUG]  [BUGGY]  long  val  =  buf[offset  +  i];  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[offset  +  i];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[offset  +  i];	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
298	[BUG]  [BUGGY]  byte  val  =  buf[idx  +  i];  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  byte  val  =  buf[idx  +  i];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	byte  val  =  buf[idx  +  i];	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
299	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  10);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  10);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  10);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
300	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  2);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  2);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  2);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
301	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  8);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  8);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  8);	  buf[i]    =    (byte)(value    /    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
302	[BUG]  [BUGGY]  ((  long)value).floatValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).floatValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).floatValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
303	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  10  +  i);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  10  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  10  +  i);	  buf[i]    =    (byte)(value    %    10);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
304	[BUG]  [BUGGY]  buf[idx]  =  (byte)value  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  (byte)value  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  (byte)value  &  BYTE_MASK;	  buf[idx]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
305	[BUG]  [BUGGY]  buf[idx]  =  (byte)(value  *  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  (byte)(value  *  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  (byte)(value  *  BYTE_MASK);	  buf[idx]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
306	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  -  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i]  -  1);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
307	[BUG]  [BUGGY]  buf[idx]  =(byte)val  -  0xfff;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val  -  0xfff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val  -  0xfff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
308	[BUG]  [BUGGY]  buf[i]  =(byte)value  -  0xff;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  -  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  -  0xff;	  buf[i]    =(byte)val    -    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
309	[BUG]  [BUGGY]  buf[i]  =(byte)value  /  10;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  /  10;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  /  10;	  buf[i]    =(byte)value    /    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
310	[BUG]  [BUGGY]  ((  double)i).longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  double)i).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  double)i).longValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
311	[BUG]  [BUGGY]  ((  byte)i).longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  byte)i).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  byte)i).longValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
312	[BUG]  [BUGGY]  buf[idx]  =(byte)value  %  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)value  %  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)value  %  BYTE_MASK;	  buf[idx]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
313	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  *  8);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  *  8);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  *  8);	  buf[i]    =    (byte)(value    *    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
314	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_VALUE;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_VALUE;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  BYTE_VALUE;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
315	[BUG]  [BUGGY]  buf[i]  =  negative?  value  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  value  :  BYTE_MASK  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  value  :  BYTE_MASK  +  1;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
316	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_BACKSLASH;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_BACKSLASH;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  BYTE_BACKSLASH;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
317	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  BYTE_MASK;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
318	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffL  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffL  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffL  +  1;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
319	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffL  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffL  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffL  *  BYTE_MASK;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
320	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffL  *  2;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffL  *  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffL  *  2;	  buf[i]    =(byte)val    &    0xfffL;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
321	[BUG]  [BUGGY]  ((  int)value).setLong(buf[i]);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)value).setLong(buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)value).setLong(buf[i]);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
322	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i]  +  offset);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i]  +  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i]  +  offset);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
323	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  1;  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  1;  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  1;  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
324	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  offset;  offset  +=  length;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  offset;  offset  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  offset;  offset  +=  length;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
325	[BUG]  [BUGGY]  long  val  =  buf.longValue();  offset  +=  i;  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf.longValue();  offset  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf.longValue();  offset  +=  i;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
326	[BUG]  [BUGGY]  ((  long)i).setLong(buf,  0,  offset);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)i).setLong(buf,  0,  offset);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)i).setLong(buf,  0,  offset);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
327	[BUG]  [BUGGY]  buf[i]  =  negative?  value  :  val  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  value  :  val  +  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  value  :  val  +  1;	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
328	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  4  +  i);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  4  +  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  4  +  i);	  buf[i]    =    (byte)(value    %    4);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
329	[BUG]  [BUGGY]  buf[i]  =(byte)val  -  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  -  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  -  8;	  buf[i]    =(byte)val    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
330	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  8);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  +  8);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  +  8);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
331	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  bits  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  bits  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  bits  +  1);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    1);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
332	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  0xffL;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  0xffL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  0xffL;	  buf[i]    =(byte)value    &    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
333	[BUG]  [BUGGY]  long  val  =  buf[idx]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  buf[idx]  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  buf[idx]  &  BYTE_MASK;	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
334	[BUG]  [BUGGY]  short  val  =  buf[idx];  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  short  val  =  buf[idx];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	short  val  =  buf[idx];	  long    val    =    buf[idx];    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
335	[BUG]  [BUGGY]  buf[i]  =(byte)value  &  1;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  &  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  &  1;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
336	[BUG]  [BUGGY]  buf[i]  =(byte)val  /  8;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  /  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  /  8;	  buf[i]    =    (byte)val    /    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
337	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffl  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffl  &  BYTE_MASK;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
338	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffflL;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffflL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffflL;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
339	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfffl  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfffl  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfffl  *  BYTE_MASK;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
340	[BUG]  [BUGGY]  remaining  +=  i;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  remaining  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	remaining  +=  i;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
341	[BUG]  [BUGGY]  val  =  value.longValue()  +  length;  remaining  +=  i;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  +  length;  remaining  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  +  length;  remaining  +=  i;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
342	[BUG]  [BUGGY]  remaining  +=  value.longValue();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  remaining  +=  value.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	remaining  +=  value.longValue();	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
343	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length;  remaining  +=  i;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  length;  remaining  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  length;  remaining  +=  i;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
344	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  &  0xffl);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  &  0xffl);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  &  0xffl);	  buf[i]    =    (byte)(value    &    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
345	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  negative);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i],  negative);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf[i],  negative);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
346	[BUG]  [BUGGY]  buf[i]  =  value  *  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  *  BYTE_MASK  +  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  *  BYTE_MASK  +  2;	  buf[i]    =    value    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
347	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  12;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  12;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  12;	  buf[i]    =(byte)value    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
348	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(value);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(value);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(value);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
349	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(Long.parseLong(value));  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(Long.parseLong(value));  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(Long.parseLong(value));	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
350	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(Long.MAX_VALUE);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(Long.MAX_VALUE);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(Long.MAX_VALUE);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
351	[BUG]  [BUGGY]  buf[i]  =  DEFAULT_ENCODING;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  DEFAULT_ENCODING;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  DEFAULT_ENCODING;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
352	[BUG]  [BUGGY]  buf[i]  =  0;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  0;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  0;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
353	[BUG]  [BUGGY]  buf[idx]  =  (byte)(value  %  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  (byte)(value  %  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  (byte)(value  %  BYTE_MASK);	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
354	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf,  i);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf,  i);	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
355	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(jp);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(jp);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(jp);	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
356	[BUG]  [BUGGY]  ((  long)value).getLength();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).getLength();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).getLength();	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
357	[BUG]  [BUGGY]  ((  long)value).remainder(0);  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).remainder(0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).remainder(0);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
358	[BUG]  [BUGGY]  int  len  =  buf.length();  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  buf.length();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  buf.length();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
359	[BUG]  [BUGGY]  int  len  =  offset();  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  offset();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  offset();	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
360	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(length,  i);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(length,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(length,  i);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
361	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  0,  i);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(val,  0,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(val,  0,  i);	  buf[i]    =    ValueUtils.toByteArray(val,    i);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
362	[BUG]  [BUGGY]  val  +=  0xffl;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  0xffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  0xffl;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
363	[BUG]  [BUGGY]  val  +=  0xff;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  0xff;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
364	[BUG]  [BUGGY]  val  +=  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  1;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
365	[BUG]  [BUGGY]  buf[i]  =  val  *  4;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  *  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  *  4;	  buf[i]    =    val    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
366	[BUG]  [BUGGY]  buf[i]  =(byte)0xfff  %  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)0xfff  %  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)0xfff  %  BYTE_MASK;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
367	[BUG]  [BUGGY]  buf[i]  =(byte)value  %  0xff;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)value  %  0xff;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)value  %  0xff;	  buf[i]    =(byte)val    %    0xfff;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
368	[BUG]  [BUGGY]  buf[i]  =  val.substring(0,  i);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.substring(0,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.substring(0,  i);	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
369	[BUG]  [BUGGY]  buf[i]  =  val  <  <  8L;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val  <  <  8L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val  <  <  8L;	  buf[i]    =    val    <    <    8;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
370	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  8  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  8  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  8  +  1);	  buf[i]    =    (byte)(value    %    8);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
371	[BUG]  [BUGGY]  buf[idx  -  1]  =  val;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx  -  1]  =  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx  -  1]  =  val;	  buf[idx]    =    val;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
372	[BUG]  [BUGGY]  buf[idx]  =  negative?  value  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  negative?  value  :  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  negative?  value  :  BYTE_MASK;	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
373	[BUG]  [BUGGY]  buf[idx]  =  value.toByteArray(buf[idx]);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value.toByteArray(buf[idx]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value.toByteArray(buf[idx]);	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
374	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffl  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffl  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffl  &  BYTE_MASK;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
375	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xfflL;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xfflL;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xfflL;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
376	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffl  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffl  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffl  *  BYTE_MASK;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
377	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  0xffl  |  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  0xffl  |  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  0xffl  |  1;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
378	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  buffer);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  buffer);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  buffer);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
379	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  0);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  0);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
380	[BUG]  [BUGGY]  buf[i]  =  value  +  8;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value  +  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value  +  8;	  buf[i]    =    value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
381	[BUG]  [BUGGY]  ((  int)value).setLong(buf[idx]);  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  int)value).setLong(buf[idx]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  int)value).setLong(buf[idx]);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
382	[BUG]  [BUGGY]  ((  long)value).setLong(buf[idx],  negative);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[idx],  negative);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[idx],  negative);	  ((    long)value).setLong(buf[idx]);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
383	[BUG]  [BUGGY]  buf[i]  =(byte)Value  -  1;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)Value  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)Value  -  1;	  buf[i]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
384	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  BYTE_MASK  *  BYTE_MASK);	  buf[i]    =    (byte)(value    %    BYTE_MASK    +    i);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
385	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  &  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf[i]  &  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf[i]  &  BYTE_MASK);	  buf[i]    =    value.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
386	[BUG]  [BUGGY]  ((  long)val).setLong(value);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)val).setLong(value);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)val).setLong(value);	  ((    long)value).setLong(val);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
387	[BUG]  [BUGGY]  ((  long)value).setLong(buf[i]  &  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)value).setLong(buf[i]  &  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)value).setLong(buf[i]  &  BYTE_MASK);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
388	[BUG]  [BUGGY]  ((  byte)value).setLong(buf[i]);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  byte)value).setLong(buf[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  byte)value).setLong(buf[i]);	  ((    long)value).setLong(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
389	[BUG]  [BUGGY]  buf[i]  =(byte)Value  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)Value  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)Value  &  BYTE_MASK;	  buf[i]    =(byte)value    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
390	[BUG]  [BUGGY]  long  val  =  value.longValue()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  *  BYTE_MASK;	  long    val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
391	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  0xffl;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  0xffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  0xffl;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
392	[BUG]  [BUGGY]  buf[i]  =(byte)val  -  0xffl;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  -  0xffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  -  0xffl;	  buf[i]    =(byte)val    &    0xffl;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
393	[BUG]  [BUGGY]  val[i]  =  (byte)(value  *  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val[i]  =  (byte)(value  *  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val[i]  =  (byte)(value  *  BYTE_MASK);	  val[i]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
394	[BUG]  [BUGGY]  buf[idx]  =  value  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value  &  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value  &  BYTE_MASK;	  buf[idx]    =    value;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
395	[BUG]  [BUGGY]  ((  long)idx).longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  long)idx).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  long)idx).longValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
396	[BUG]  [BUGGY]  ((  short)i).longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  short)i).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  short)i).longValue();	  ((    long)i).longValue();    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
397	[BUG]  [BUGGY]  buf[i]  =(byte)val  &  FALLBACK_ENCODING;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  &  FALLBACK_ENCODING;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  &  FALLBACK_ENCODING;	  buf[i]    =(byte)val    &    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
398	[BUG]  [BUGGY]  buf[idx]  =(byte)val  -  2;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val  -  2;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val  -  2;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
399	[BUG]  [BUGGY]  buf[idx]  =(byte)val  -  1L;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)val  -  1L;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)val  -  1L;	  buf[idx]    =(byte)val    -    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
400	[BUG]  [BUGGY]  buf[i]  =  val.subtract(offset,  i);  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.subtract(offset,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.subtract(offset,  i);	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
401	[BUG]  [BUGGY]  buf[idx]  =  value.byteValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  value.byteValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  value.byteValue();	  buf[i]    =    val.byteValue();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
402	[BUG]  [BUGGY]  buf[i]  =  (byte)val  /  4;  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)val  /  4;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)val  /  4;	  buf[i]    =    (byte)val    /    1;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
403	[BUG]  [BUGGY]  buf[i]  =  value.substring(offset,  i);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.substring(offset,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.substring(offset,  i);	  buf[i]    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
404	[BUG]  [BUGGY]  buf[i]  =  value.toByteArray(buf,  0,  i);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  value.toByteArray(buf,  0,  i);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  value.toByteArray(buf,  0,  i);	  buf[i]    =    value.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
405	[BUG]  [BUGGY]  int  len  =  length  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  int  len  =  length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	int  len  =  length  -  1;	  int    len    =    length();    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
406	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  FALLBACK_ENCODING;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  FALLBACK_ENCODING;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  FALLBACK_ENCODING;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
407	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_DEFAULT_ENCODING;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_DEFAULT_ENCODING;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  BYTE_DEFAULT_ENCODING;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
408	[BUG]  [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_FALLBACK_ENCODING;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  BYTE_MASK  :  BYTE_FALLBACK_ENCODING;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  BYTE_MASK  :  BYTE_FALLBACK_ENCODING;	  buf[i]    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
409	[BUG]  [BUGGY]  long  val  =  value[idx  +  i];  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value[idx  +  i];  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value[idx  +  i];	  long    val    =    buf[idx    +    i];    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
410	[BUG]  [BUGGY]  buf[i]  =  val.toByteArray(byteArray[i]);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  val.toByteArray(byteArray[i]);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  val.toByteArray(byteArray[i]);	  buf[i]    =    val.toByteArray();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
411	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  %  2  +  idx);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  %  2  +  idx);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  %  2  +  idx);	  buf[i]    =    (byte)(value    %    2);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
412	[BUG]  [BUGGY]  val  =  value.longValue()  +  length;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  +  length;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  +  length;  remaining  +=  length;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
413	[BUG]  [BUGGY]  val  =  value.longValue();  remaining  +=  idx;  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue();  remaining  +=  idx;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue();  remaining  +=  idx;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
414	[BUG]  [BUGGY]  val  =  value.longValue();  remaining  +=  offset;  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue();  remaining  +=  offset;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue();  remaining  +=  offset;	  val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
415	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i]  &  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(buf[i]  &  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(buf[i]  &  BYTE_MASK);	  buf[i]    =    ValueUtils.toByteArray(buf[i]);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
416	[BUG]  [BUGGY]  buf[idx]  =(byte)Value  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =(byte)Value  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =(byte)Value  -  1;	  buf[idx]    =(byte)value    -    1;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
417	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK)+  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  /  BYTE_MASK)+  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  /  BYTE_MASK)+  1;	  buf[i]    =    (byte)value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
418	[BUG]  [BUGGY]  buf[i]  =  (byte)(value  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(value  +  1);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(value  +  1);	  buf[i]    =    (byte)value    +    1;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
419	[BUG]  [BUGGY]  ((  double)value).longValue();  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  double)value).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  double)value).longValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
420	[BUG]  [BUGGY]  ((  byte)value).longValue();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  byte)value).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  byte)value).longValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
421	[BUG]  [BUGGY]  ((  short)value).longValue();  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  short)value).longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  short)value).longValue();	  ((    long)value).longValue();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
422	[BUG]  [BUGGY]  ((  double)value).setLength(0);  [CE]  illegal  start  of  expression  [FE]                            IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  double)value).setLength(0);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  double)value).setLength(0);	  ((    long)value).setLength(0);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
423	[BUG]  [BUGGY]  buf[i]  =  negative?  offset  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  offset  :  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  offset  :  BYTE_MASK;	  buf[i]    =    negative?    value    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
424	[BUG]  [BUGGY]  long  val  =  value.longValue();  offset  +=  length  -  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue();  offset  +=  length  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue();  offset  +=  length  -  1;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
425	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length;  offset  +=  i;  [CE]  illegal  start  of  expression  [FE]                                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  length;  offset  +=  i;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  length;  offset  +=  i;	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
426	[BUG]  [BUGGY]  offset  =  value.longValue();  [CE]  illegal  start  of  expression  [FE]                                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  offset  =  value.longValue();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	offset  =  value.longValue();	  long    val    =    value.longValue();    offset    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
427	[BUG]  [BUGGY]  buf[i]  =(byte)offset  -  1;  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)offset  -  1;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)offset  -  1;	  buf[i]    =(byte)max    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
428	[BUG]  [BUGGY]  buf[i]  =(byte)val  %  0xfffl;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  %  0xfffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  %  0xfffl;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
429	[BUG]  [BUGGY]  buf[i]  =(byte)val  -  0xfffl;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =(byte)val  -  0xfffl;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =(byte)val  -  0xfffl;	  buf[i]    =(byte)val    &    0xfffl;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
430	[BUG]  [BUGGY]  val  +=  8;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  8;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  8;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
431	[BUG]  [BUGGY]  val  +=  10;  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  +=  10;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  +=  10;	  val    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
432	[BUG]  [BUGGY]  buf[idx]  =  (byte)(value  /  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[idx]  =  (byte)(value  /  BYTE_MASK);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[idx]  =  (byte)(value  /  BYTE_MASK);	  buf[idx]    =    (byte)value;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
433	[BUG]  [BUGGY]  buf[i]  =  (byte)(val  %  4);  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  (byte)(val  %  4);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  (byte)(val  %  4);	  buf[i]    =    (byte)(val    %    BYTE_MASK);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
434	[BUG]  [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  idx);  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  ValueUtils.toByteArray(value,  idx);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  ValueUtils.toByteArray(value,  idx);	  buf[i]    =    ValueUtils.toByteArray(value);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
435	[BUG]  [BUGGY]  buf[i]  =  negative?  value  :  val.toByteArray();  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  value  :  val.toByteArray();  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  value  :  val.toByteArray();	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
436	[BUG]  [BUGGY]  buf[i]  =  negative?  offset  :  val;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  buf[i]  =  negative?  offset  :  val;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	buf[i]  =  negative?  offset  :  val;	  buf[i]    =    negative?    value    :    val;    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
437	[BUG]  [BUGGY]  long  val  =  value.longValue()  +  length;  remaining  +=  length;  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue()  +  length;  remaining  +=  length;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue()  +  length;  remaining  +=  length;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
438	[BUG]  [BUGGY]  long  val  =  value.longValue();  remaining  +=  idx;  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  long  val  =  value.longValue();  remaining  +=  idx;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	long  val  =  value.longValue();  remaining  +=  idx;	  long    val    =    value.longValue();    remaining    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
439	[BUG]  [BUGGY]  val  =  value.longValue()  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  val  =  value.longValue()  *  BYTE_MASK;  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	val  =  value.longValue()  *  BYTE_MASK;	  val    =    value.longValue();    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
440	[BUG]  [BUGGY]  ((  short)i).setLong(val,  0,  buf.length);  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  short)i).setLong(val,  0,  buf.length);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  short)i).setLong(val,  0,  buf.length);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
441	[BUG]  [BUGGY]  ((  double)i).setLong(buf,  0,  val);  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      if  (val  <  0  ||  val  >=  max)  {  throw  new  IllegalArgumentException(     "Value       "  +  value  +       "  is  too  large  for       "  +  length  +       "  byte  field.     ");  }  if  (negative)  {  val  ^=  max  -  1;  val++;  val  |=  0xffl  <<  bits;  }  for  (int  i  =  offset  +  length  -  1;  i  >=  offset;  i--)  {      [BUGGY]  ((  double)i).setLong(buf,  0,  val);  [BUGGY]      val  >>=  8;  }  }  [CLASS]  TarUtils  1  [METHOD]  formatLongBinary  [RETURN_TYPE]  void  final  long  value  final  byte[]  buf  final  int  offset  final  int  length  final  boolean  negative  [VARIABLES]  byte[]  buf  boolean  negative  ZipEncoding  DEFAULT_ENCODING  FALLBACK_ENCODING  encoding  int  BYTE_MASK  bits  current  end  i  idx  len  length  limit  offset  remaining  start  long  max  val  value  	projects/Compress45/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	510	510	1	replace	((  double)i).setLong(buf,  0,  val);	  ((    long)i).setLong(buf,    0,    val);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
