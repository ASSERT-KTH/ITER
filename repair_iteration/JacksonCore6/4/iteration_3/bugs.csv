bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
2	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
3	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
4	[BUG]  [BUGGY]  if(i!=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i!=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i!=  end)  {  if(c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
5	[BUG]  [BUGGY]  return  new  JsonPointer(c,  _asString,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  _asString,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  _asString,  input,  EMPTY);	  return    new    JsonPointer(input,    _asString,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
6	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString,  c,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString,  c,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString,  c,  _nextSegment);	  return    new    JsonPointer(input,    _asString,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
7	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
8	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
9	[BUG]  [BUGGY]  ||  c  ==  '')  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  ||  c  ==  '')  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	||  c  ==  '')  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
10	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  _matchingPropertyName);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
11	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _string.substring(0,  i));	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  end),  i,  EMPTY);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  end),  i,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  end),  i,  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(i),  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(i),  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(i),  c,  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(i),  EMPTY,  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(i),  EMPTY,  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(i),  EMPTY,  c);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
16	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(0,  i  +  1),  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
17	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  end  +  1),  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
18	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _asString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i  +  1),  _asString);	  return    new    JsonPointer(input,    input.substring(0,    i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
19	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i  +  1),  c);	  return    new    JsonPointer(input,    input.substring(0,    i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
20	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  c,  input);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  c,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  c,  input);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
21	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input,  _asString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input,  _asString);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
22	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString,  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString,  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString,  c);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
23	[BUG]  [BUGGY]  return  _asString.create(c,  input);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  _asString.create(c,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  _asString.create(c,  input);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
24	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.equals(input.substring(i)))    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.equals(input.substring(i)))    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
26	[BUG]  [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i!=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.equals(input.substring(i)))    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >=  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.equals(input.substring(i)))    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
28	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length(),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length(),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  input.length(),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  _nextSegment.length(),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  _nextSegment.length(),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  _nextSegment.length(),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  _matchingPropertyName.length(),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  _matchingPropertyName.length(),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  _matchingPropertyName.length(),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  c.length(),  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  c.length(),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  c.length(),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  end));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  end));	  return    new    JsonPointer(_asString,    input.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
33	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i));	  return    new    JsonPointer(_asString,    input.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
34	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(0,  end));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(0,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _string.substring(0,  end));	  return    new    JsonPointer(_asString,    input.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
35	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i  +  1));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i  +  1));	  return    new    JsonPointer(_asString,    input.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
36	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  1);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
37	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  2);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
38	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_matchingPropertyName  =  input.substring(i  +  1,  input.length()  -  4);	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
39	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  end  +  1));	  return    new    JsonPointer(input,    input.substring(0,    end));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  -  1));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end  -  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  end  -  1));	  return    new    JsonPointer(input,    input.substring(0,    end));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  end));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  str.substring(0,  end));	  return    new    JsonPointer(input,    input.substring(0,    end));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  i));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  i));	  return    new    JsonPointer(input,    _asString.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
43	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  end));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(0,  end));	  return    new    JsonPointer(input,    _asString.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  c,  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
45	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  input,  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName,  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment,  EMPTY);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment,  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
49	[BUG]  [BUGGY]  ||  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  ||  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	||  c  ==  '')  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
50	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(i),  _asString,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(i),  _asString,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(i),  _asString,  EMPTY);	  return    new    JsonPointer(_asString.substring(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
51	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  i),  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  i),  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  i),  input,  EMPTY);	  return    new    JsonPointer(_asString.substring(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
52	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  input,  EMPTY);	  return    new    JsonPointer(_asString.substring(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
53	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  EMPTY);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i),  _matchingPropertyName,  EMPTY);	  return    new    JsonPointer(_asString.substring(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
54	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  i,  input);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  i,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  i,  input);	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  i,  _asString);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  i,  _asString);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  i,  _asString);  }	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  i,  _asString);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  return  new  JsonPointer(input,  i,  _asString);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  return  new  JsonPointer(input,  i,  _asString);  }	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  i);	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  c);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1),  c);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
59	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
60	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1),  _matchingPropertyName);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
61	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i  +  1),  input,  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
62	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(0,  end),  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    end),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
63	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end),  _asString);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  end),  _asString);	  return    new    JsonPointer(input,    input.substring(0,    end),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
64	[BUG]  [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  str.substring(0,  end),  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    end),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
66	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i),  input,  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
67	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input,  _asString,  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input,  _asString,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input,  _asString,  EMPTY);	  return    new    JsonPointer(_asString,    input,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
68	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  c,  input);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  c,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  EMPTY,  c,  input);	  return    new    JsonPointer(_asString,    input,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
69	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  input,  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  input,  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  EMPTY,  input,  c);	  return    new    JsonPointer(_asString,    input,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
70	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  c,  EMPTY);	  return    new    JsonPointer(_asString,    input,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
71	[BUG]  [BUGGY]  return  new  JsonPointer(c,  i,  input);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  i,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  i,  input);	  return    new    JsonPointer(input,    i,    c);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
72	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input,  c);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input,  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input,  c);	  return    new    JsonPointer(input,    i,    c);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
73	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i,  c,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i,  c,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i,  c,  _matchingPropertyName);	  return    new    JsonPointer(input,    i,    c);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
74	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i,  c,  _asString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i,  c,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i,  c,  _asString);	  return    new    JsonPointer(input,    i,    c);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
75	[BUG]  [BUGGY]  return  new  JsonPointer(i,  input.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(i,  input.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(i,  input.substring(0,  i));	  return    new    JsonPointer(input,    i.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
76	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i.substring(0,  i));	  return    new    JsonPointer(input,    i.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  return  new  JsonPointer(c,  EMPTY,  input);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  EMPTY,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  EMPTY,  input);	  return    new    JsonPointer(input,    EMPTY,    c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY,  c,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY,  c,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY,  c,  _nextSegment);	  return    new    JsonPointer(input,    EMPTY,    c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY,  _nextSegment);	  return    new    JsonPointer(input,    EMPTY,    c);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
80	[BUG]  [BUGGY]  return  new  JsonPointer(_nextSegment,  c,  EMPTY,  input);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_nextSegment,  c,  EMPTY,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_nextSegment,  c,  EMPTY,  input);	  return    new    JsonPointer(input,    c,    EMPTY,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  return  new  JsonPointer(_nextSegment,  c,  INVALID,  input);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_nextSegment,  c,  INVALID,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_nextSegment,  c,  INVALID,  input);	  return    new    JsonPointer(input,    c,    EMPTY,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  c,  EMPTY,  input);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  c,  EMPTY,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  c,  EMPTY,  input);	  return    new    JsonPointer(input,    c,    EMPTY,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input,  EMPTY,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input,  EMPTY,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input,  EMPTY,  _nextSegment);	  return    new    JsonPointer(input,    c,    EMPTY,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  i));	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
85	[BUG]  [BUGGY]  return  new  JsonPointer(i,  EMPTY.substring(1),  input);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(i,  EMPTY.substring(1),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(i,  EMPTY.substring(1),  input);	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input,  EMPTY.substring(1),  i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input,  EMPTY.substring(1),  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input,  EMPTY.substring(1),  i);	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(i,  end));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(i,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(i,  end));	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  c,  EMPTY);	  return    new    JsonPointer(c,    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
89	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i));	  return    new    JsonPointer(input,    String.valueOf(i));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
90	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i  +  1));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i  +  1));	  return    new    JsonPointer(input,    String.valueOf(i));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
91	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i),  c);	  return    new    JsonPointer(input,    String.valueOf(i));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
92	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input.substring(1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input.substring(1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input.substring(1),  EMPTY);	  return    new    JsonPointer(i,    input.substring(1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  input);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  input);	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
94	[BUG]  [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  String.valueOf(i),  _asString);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  return  new  JsonPointer(input,  String.valueOf(i),  _asString);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  return  new  JsonPointer(input,  String.valueOf(i),  _asString);  }	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
95	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(input));  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(input));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(input));	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
96	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(input),  String.valueOf(i);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(input),  String.valueOf(i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(input),  String.valueOf(i);	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
97	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(0,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(0,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(0,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(0,    i);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
98	[BUG]  [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  1);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_asString  =  input.substring(i  +  1,  input.length()  -  1);	  _asString    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
99	[BUG]  [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  2);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_asString  =  input.substring(i  +  1,  input.length()  -  2);	  _asString    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
100	[BUG]  [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  4);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _asString  =  input.substring(i  +  1,  input.length()  -  4);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_asString  =  input.substring(i  +  1,  input.length()  -  4);	  _asString    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
101	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(1),  EMPTY);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(1),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
102	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length()),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length()),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  input.length()),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
103	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length()  -  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  input.length()  -  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  input.length()  -  1),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
104	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  end),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
105	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  end,  input.length()),  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  end,  input.length()),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  end,  input.length()),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
106	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  end),  EMPTY);	  return    new    JsonPointer(input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
107	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  i  +  1),  EMPTY);	  return    new    JsonPointer(input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
108	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  i)+  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  i)+  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  i)+  1,  EMPTY);	  return    new    JsonPointer(input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
109	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  i),  _asString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  i),  _asString);	  return    new    JsonPointer(input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
110	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  EMPTY,  input);	  return    new    JsonPointer(_asString,    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
111	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input,  EMPTY);	  return    new    JsonPointer(_asString,    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
112	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment,  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _nextSegment,  EMPTY);	  return    new    JsonPointer(_asString,    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _nextSegment,  input,  EMPTY);	  return    new    JsonPointer(_asString,    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
114	[BUG]  [BUGGY]  return  new  JsonPointer(_nextSegment,  String.valueOf(i),  input);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_nextSegment,  String.valueOf(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_nextSegment,  String.valueOf(i),  input);	  return    new    JsonPointer(input,    String.valueOf(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
115	[BUG]  [BUGGY]  return  new  JsonPointer(_parseTail(input,  String.valueOf(i),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_parseTail(input,  String.valueOf(i),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_parseTail(input,  String.valueOf(i),  _nextSegment);	  return    new    JsonPointer(input,    String.valueOf(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
116	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(i));	  return    new    JsonPointer(_asString,    input.substring(i));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
117	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1));	  return    new    JsonPointer(_asString,    input.substring(i));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
118	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(i));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(i));	  return    new    JsonPointer(_asString,    input.substring(i));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
119	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  end),  input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  end),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  end),  input);	  return    new    JsonPointer(input,    EMPTY.substring(0,    i),    input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i),  _asString);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  i),  _asString);	  return    new    JsonPointer(input,    EMPTY.substring(0,    i),    input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
121	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i),  c);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  i),  c);	  return    new    JsonPointer(input,    EMPTY.substring(0,    i),    input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
122	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  end),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
123	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName.substring(0,  i),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
124	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i)+  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i)+  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i)+  1,  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
125	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i  +  1),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
126	[BUG]  [BUGGY]  return  new  JsonPointer(str.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(str.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(str.substring(0,  i));	  return    new    JsonPointer(input,    str.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
127	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input.substring(0,  i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input.substring(0,  i));	  return    new    JsonPointer(input,    str.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
128	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  _nextSegment);	  return    new    JsonPointer(_asString,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  _matchingPropertyName);	  return    new    JsonPointer(_asString,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  c);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  String.valueOf(i),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  String.valueOf(i),  c);	  return    new    JsonPointer(_asString,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
131	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  return  new  JsonPointer(i,  input.substring(0,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(i,  input.substring(0,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(i,  input.substring(0,  i),  EMPTY);	  return    new    JsonPointer(input,    i.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
133	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i.substring(0,  end),  EMPTY);	  return    new    JsonPointer(input,    i.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
134	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY,  len,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY,  len,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY,  len,  _matchingPropertyName);	  return    new    JsonPointer(input,    EMPTY,    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
135	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  EMPTY,  len);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  EMPTY,  len);	  return    new    JsonPointer(input,    EMPTY,    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
136	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input,  len);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input,  len);	  return    new    JsonPointer(input,    EMPTY,    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
137	[BUG]  [BUGGY]  return  new  JsonPointer(_valueType,  input.substring(i),  _asString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_valueType,  input.substring(i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_valueType,  input.substring(i),  _asString);	  return    new    JsonPointer(_asString,    input.substring(i),    _valueType);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
138	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _valueType.substring(i),  input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _valueType.substring(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _valueType.substring(i),  input);	  return    new    JsonPointer(_asString,    input.substring(i),    _valueType);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
139	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _valueType);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _valueType);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  _valueType);	  return    new    JsonPointer(_asString,    input.substring(i),    _valueType);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
140	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _valueType);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _valueType);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1),  _valueType);	  return    new    JsonPointer(_asString,    input.substring(i),    _valueType);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
141	[BUG]  [BUGGY]  return  new  JsonPointer(_nextSegment,  i,  input);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_nextSegment,  i,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_nextSegment,  i,  input);	  return    new    JsonPointer(input,    i,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
142	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input,  _nextSegment);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input,  _nextSegment);	  return    new    JsonPointer(input,    i,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
143	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input,  i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input,  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input,  i);	  return    new    JsonPointer(input,    i,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
144	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
145	[BUG]  [BUGGY]  if(i  ==  end)return  null;  if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)return  null;  if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)return  null;  if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
146	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i  +  1));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(0,  i  +  1));	  return    new    JsonPointer(input,    input.substring(0,    i    +    1));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
147	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i  +  1),  end);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i  +  1),  end);	  return    new    JsonPointer(input,    input.substring(0,    i    +    1));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
148	[BUG]  [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  i  +  1));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  str.substring(0,  i  +  1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  str.substring(0,  i  +  1));	  return    new    JsonPointer(input,    input.substring(0,    i    +    1));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
149	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
150	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
151	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
152	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment.substring(i),  input);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _nextSegment.substring(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _nextSegment.substring(i),  input);	  return    new    JsonPointer(_asString,    input.substring(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
153	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  _nextSegment);	  return    new    JsonPointer(_asString,    input.substring(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
154	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1),  _nextSegment);	  return    new    JsonPointer(_asString,    input.substring(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
155	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  c.substring(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  c.substring(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  c.substring(i),  EMPTY);	  return    new    JsonPointer(c,    _asString.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
156	[BUG]  [BUGGY]  return  new  JsonPointer(c,  _asString.substring(i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  _asString.substring(i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  _asString.substring(i  +  1),  EMPTY);	  return    new    JsonPointer(c,    _asString.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
157	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input.substring(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input.substring(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input.substring(i),  EMPTY);	  return    new    JsonPointer(c,    _asString.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
158	[BUG]  [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  &&  c  ==  '')  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
159	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i)+  1,  input.substring(0,  i)+  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i)+  1,  input.substring(0,  i)+  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i)+  1,  input.substring(0,  i)+  1,  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
160	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end)+  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  end)+  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  end)+  1,  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
161	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i)+  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString.substring(0,  i)+  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString.substring(0,  i)+  1,  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
162	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i)+  1,  input);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i)+  1,  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  i)+  1,  input);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
163	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
164	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.charAt(i));  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
165	[BUG]  [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
166	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _asString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i),  _asString);	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
167	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i),  _nextSegment);	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
168	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  EMPTY,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  EMPTY,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i),  EMPTY,  _nextSegment);	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
169	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i),  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i),  _matchingPropertyName);	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
170	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(i),  input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(i),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(i),  input);	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
171	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input,  EMPTY.substring(1),  i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input,  EMPTY.substring(1),  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input,  EMPTY.substring(1),  i);	  return    new    JsonPointer(input,    EMPTY.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
172	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _asString);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _asString);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
173	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i)+  1,  c);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
174	[BUG]  [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  input.substring(0,  i)+  1,  _nextSegment);	  return    new    JsonPointer(input,    input.substring(0,    i)+    1,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
175	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(2);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(2);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  ||  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(2);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
176	[BUG]  [BUGGY]  if(c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
177	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _nextSegment,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _nextSegment,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _nextSegment,  EMPTY);	  return    new    JsonPointer(input,    c,    EMPTY,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
178	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
179	[BUG]  [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
180	[BUG]  [BUGGY]  if(i  >  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >  end)  {  if(c  ==  ''  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
181	[BUG]  [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  '')  {  if(_matchingPropertyName.equals(input.substring(i)))  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.equals(input.substring(i)))    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
182	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
183	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
184	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalStateException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
185	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  input.length()  -  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  input.length()  -  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  input.length()  -  1),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
186	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i  +  1,  input.length()),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i  +  1,  input.length()),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i  +  1,  input.length()),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length()),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
187	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i)),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i)),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i)),  EMPTY);	  return    new    JsonPointer(input,    _asString.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
188	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  c,  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  c,  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  c,  input,  EMPTY);	  return    new    JsonPointer(_asString,    input,    c,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
189	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i,  _asString,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i,  _asString,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i,  _asString,  _matchingPropertyName);	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
190	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString,  i);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString,  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString,  i);	  return    new    JsonPointer(input,    i,    _asString);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
191	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  input;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  input;  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  input;  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
192	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(1));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(1));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(1));	  return    new    JsonPointer(_asString,    input.substring(i));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
193	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  input.substring(0,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  input.substring(0,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  input.substring(0,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(0,    i);    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
194	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _valueType.substring(i));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _valueType.substring(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _valueType.substring(i));	  return    new    JsonPointer(_asString,    input.substring(i),    _valueType);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
195	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _matchingPropertyName);	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
196	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _nextSegment);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i),  _asString,  _nextSegment);	  return    new    JsonPointer(input,    String.valueOf(i),    _asString);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
197	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i  +  1),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i  +  1),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i  +  1),  EMPTY);	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
198	[BUG]  [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  String.valueOf(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  String.valueOf(i));	  return    new    JsonPointer(c,    String.valueOf(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
199	[BUG]  [BUGGY]  _asString  =  input.substring(0,  input.length());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _asString  =  input.substring(0,  input.length());  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_asString  =  input.substring(0,  input.length());	  _asString    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
200	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
201	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i  +  1,  input.length());  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i  +  1,  input.length());  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i  +  1,  input.length());  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
202	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _nextSegment,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _nextSegment,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i),  _nextSegment,  _matchingPropertyName);	  return    new    JsonPointer(_asString,    input.substring(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
203	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(0,  i));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(0,  i));	  return    new    JsonPointer(input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
204	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i,  c,  _nextSegment);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i,  c,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i,  c,  _nextSegment);	  return    new    JsonPointer(input,    i,    c);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
205	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
206	[BUG]  [BUGGY]  if(i  <  end)  {  if(char  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(char  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(char  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
207	[BUG]  [BUGGY]  if(i  >=  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >=  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >=  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
208	[BUG]  [BUGGY]  return  new  JsonPointer(input,  c,  _asString,  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  c,  _asString,  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  c,  _asString,  _matchingPropertyName);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  _matchingPropertyName  =  input.substring(0,  input.length());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  _matchingPropertyName  =  input.substring(0,  input.length());  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	_matchingPropertyName  =  input.substring(0,  input.length());	  _matchingPropertyName    =    input.substring(i    +    1,    input.length());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
210	[BUG]  [BUGGY]  return  new  JsonPointer(_nextSegment,  i);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_nextSegment,  i);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_nextSegment,  i);	  return    new    JsonPointer(input,    i,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
211	[BUG]  [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _nextSegment,  _asString);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  String.valueOf(i),  _nextSegment,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  String.valueOf(i),  _nextSegment,  _asString);	  return    new    JsonPointer(input,    String.valueOf(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
212	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _asString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i),  _asString);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
213	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _matchingPropertyName);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  _matchingPropertyName);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i),  _matchingPropertyName);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
214	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _asString);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  _asString);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
215	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i,  input.length()  -  1,  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i,  input.length()  -  1,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i,  input.length()  -  1,  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
216	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(i  +  1),  i,  EMPTY);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(i  +  1),  i,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(i  +  1),  i,  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
217	[BUG]  [BUGGY]  return  new  JsonPointer(input.substring(start,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input.substring(start,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input.substring(start,  i),  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
218	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'e'  ||  c  ==  'E')  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
219	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'n'  ||  c  ==  't')  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
220	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  'n'  ||  c  ==  'r')  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    ''    ||    c    ==    '')    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
221	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _string.substring(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _string.substring(i),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
222	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY,  _asString);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY,  _asString);	  return    new    JsonPointer(input,    EMPTY,    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
223	[BUG]  [BUGGY]  return  new  JsonPointer(input,  i,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  i,  len);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  i,  len);	  return    new    JsonPointer(input,    EMPTY,    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
224	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(i  +  1),  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(i  +  1),  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(i  +  1),  input,  EMPTY);	  return    new    JsonPointer(_asString.substring(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
225	[BUG]  [BUGGY]  return  new  JsonPointer(c,  _asString.substring(0,  i));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  _asString.substring(0,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  _asString.substring(0,  i));	  return    new    JsonPointer(input,    _asString.substring(0,    i));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
226	[BUG]  [BUGGY]  if(i  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  ''  &&  c  ==  '')return  null;  if(i  <  end)  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
227	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')return  input;  if(i  <  end)  {  return  input.substring(1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  ||  c  ==  '')return  input;  if(i  <  end)  {  return  input.substring(1);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  ||  c  ==  '')return  input;  if(i  <  end)  {  return  input.substring(1);  }	  if(c    ==    ''    ||    c    ==    '')return    null;    if(i    <    end)    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
228	[BUG]  [BUGGY]  if(i  ==  end)  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
229	[BUG]  [BUGGY]  if(i  >  0  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >  0  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >  0  ||  c  ==  '')  {  if(_matchingPropertyName.length()  ==  end)  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
230	[BUG]  [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >  0)  {  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    if(_matchingPropertyName.length()    ==    end)    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
231	[BUG]  [BUGGY]  return  new  JsonPointer(input,  c,  input.substring(0,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  c,  input.substring(0,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  c,  input.substring(0,  end),  EMPTY);	  return    new    JsonPointer(input,    input.substring(0,    end),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
232	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i,  end));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i,  end));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i,  end));	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
233	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(start,  i));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(start,  i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(start,  i));	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
234	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  c);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  c);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  c);	  return    new    JsonPointer(_asString,    input.substring(1),    i);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
235	[BUG]  [BUGGY]  return  new  JsonPointer(c,  _asString.substring(start,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  _asString.substring(start,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  _asString.substring(start,  i),  EMPTY);	  return    new    JsonPointer(c,    _asString.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
236	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i));  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i));	  return    new    JsonPointer(_asString,    input.substring(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
237	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1,  end),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1,  end),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1,  end),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
238	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i  +  1),  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i  +  1),  c,  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i    +    1),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
239	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(0,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(0,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(0,  i),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
240	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  c,  EMPTY);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(0,  i),  c,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(0,  i),  c,  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
241	[BUG]  [BUGGY]  if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
242	[BUG]  [BUGGY]  if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
243	[BUG]  [BUGGY]  if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseQuotedTail(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
244	[BUG]  [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  if(c  ==  '')  {  return  _parseQuotedTail(input.substring(i));  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseQuotedTail(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
245	[BUG]  [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i  +  1),  input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  EMPTY.substring(0,  i  +  1),  input);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  EMPTY.substring(0,  i  +  1),  input);	  return    new    JsonPointer(input,    EMPTY.substring(0,    i),    input);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
246	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  input,  EMPTY);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  input,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  String.valueOf(i),  input,  EMPTY);	  return    new    JsonPointer(_asString,    String.valueOf(i),    input,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
247	[BUG]  [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i,  i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(c  ==  ''  ||  c  ==  '')  {  return  input.substring(i,  i);  }	  if(c    ==    ''    ||    c    ==    '')    {    return    input.substring(1);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
248	[BUG]  [BUGGY]  return  new  JsonPointer(_asString.substring(0,  _asString.length(),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString.substring(0,  _asString.length(),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString.substring(0,  _asString.length(),  EMPTY);	  return    new    JsonPointer(_asString.substring(i,    input.length(),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
249	[BUG]  [BUGGY]  return(_asString  ==  null)?  null  :  new  JsonPointer(input,  c,  _asString);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return(_asString  ==  null)?  null  :  new  JsonPointer(input,  c,  _asString);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return(_asString  ==  null)?  null  :  new  JsonPointer(input,  c,  _asString);	  return    new    JsonPointer(input,    c,    _asString);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
250	[BUG]  [BUGGY]  return  new  JsonPointer(input,  _asString,  _nextSegment);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(input,  _asString,  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(input,  _asString,  _nextSegment);	  return    new    JsonPointer(input,    i,    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
251	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i),  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  _matchingPropertyName,  input.substring(i),  EMPTY);	  return    new    JsonPointer(_asString,    input.substring(i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
252	[BUG]  [BUGGY]  return  new  JsonPointer(c,  _asString.substring(0,  i),  EMPTY);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  _asString.substring(0,  i),  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  _asString.substring(0,  i),  EMPTY);	  return    new    JsonPointer(input,    _asString.substring(0,    i),    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
253	[BUG]  [BUGGY]  return  new  JsonPointer(_parseQuotedTail(input,  String.valueOf(i),  _nextSegment);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_parseQuotedTail(input,  String.valueOf(i),  _nextSegment);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_parseQuotedTail(input,  String.valueOf(i),  _nextSegment);	  return    new    JsonPointer(input,    String.valueOf(i),    _nextSegment);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
254	[BUG]  [BUGGY]  if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  ==  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
255	[BUG]  [BUGGY]  if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  >=  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
256	[BUG]  [BUGGY]  if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	if(i  <  end)  {  char  c  =  input.charAt(i);  if(c  ==  ''  ||  c  ==  '')  {  return  _parseString(input,  i);  }	  if(c    ==    '')    {    char    c    =    input.charAt(i);    if(c    ==    ''    ||    c    ==    '')    {    return    _parseString(input,    i);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
257	[BUG]  [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  i,  EMPTY);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(_asString,  input.substring(i),  i,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(_asString,  input.substring(i),  i,  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
258	[BUG]  [BUGGY]  return  new  JsonPointer(c,  input.substring(i),  i,  EMPTY);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  }        [BUGGY]  return  new  JsonPointer(c,  input.substring(i),  i,  EMPTY);  [BUGGY]      }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.5	226	226	1	replace	return  new  JsonPointer(c,  input.substring(i),  i,  EMPTY);	  return    new    JsonPointer(input.substring(i),    i,    EMPTY);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
