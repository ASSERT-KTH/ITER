bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  c  =  input.charAt(i));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i));  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i));	  String    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
2	[BUG]  [BUGGY]  String  c  =  input.charAt(i)+  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i)+  3;  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i)+  3;	  char    c    =    input.charAt(i)+    3;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
3	[BUG]  [BUGGY]  char  c  =  input.charAt(i  *  2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.charAt(i  *  2);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.charAt(i  *  2);	  char    c    =    input.charAt(i    *    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  String  c  =  input.charAt(i  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i  *  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i  *  1);	  char    c    =    input.charAt(i    *    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  char  c  =  input.charAt(i  *  4);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.charAt(i  *  4);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.charAt(i  *  4);	  char    c    =    input.charAt(i    *    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
6	[BUG]  [BUGGY]  String  c  =  input.charAt(i  +  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i  +  2);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i  +  2);	  char    c    =    input.charAt(i    +    2);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  Character.isWhitespace(input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  Character.isWhitespace(input);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	Character.isWhitespace(input);	  Character.isWhitespace(c);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  Character.isJavaIdentifierPart(c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  Character.isJavaIdentifierPart(c);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	Character.isJavaIdentifierPart(c);	  Character.isWhitespace(c);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  String  c  =  input.charAt(i)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i)+  2;  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i)+  2;	  char    c    =    input.charAt(i)+    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  c  =  input.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  int  c  =  input.charAt(i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	int  c  =  input.charAt(i  +  1);	  int    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  String  c  =  input.substring(0,  end);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.substring(0,  end);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.substring(0,  end);	  String    c    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  char  c  =  input.substring(0,  i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.substring(0,  i);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.substring(0,  i);	  String    c    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  String  c  =  input.substring(0,  i  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.substring(0,  i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.substring(0,  i  +  1);	  String    c    =    input.substring(0,    i);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  final  char  c  =  input.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  final  char  c  =  input.charAt(i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	final  char  c  =  input.charAt(i  +  1);	  String    c    =    input.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  char  c  =  input.substring(i  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.substring(i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.substring(i  +  1);	  String    c    =    input.substring(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  String  c  =  input.substring(i  +  1,  end);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.substring(i  +  1,  end);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.substring(i  +  1,  end);	  String    c    =    input.substring(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
17	[BUG]  [BUGGY]  String  c  =  input.substring(end  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.substring(end  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.substring(end  +  1);	  String    c    =    input.substring(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  Character  c  =  input.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  Character  c  =  input.charAt(i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	Character  c  =  input.charAt(i  +  1);	  Character    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  String  c  =  input.charAt(i)+  4;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  String  c  =  input.charAt(i)+  4;  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	String  c  =  input.charAt(i)+  4;	  char    c    =    input.charAt(i)+    4;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
20	[BUG]  [BUGGY]  Char  c  =  input.charAt(i);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  Char  c  =  input.charAt(i);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	Char  c  =  input.charAt(i);	  Character    c    =    input.charAt(i);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  int  c  =  input.charAt(i)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  int  c  =  input.charAt(i)+  1;  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	int  c  =  input.charAt(i)+  1;	  String    c    =    input.charAt(i)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  Character.isWhitespace(c)||  _matchingPropertyName(input);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  Character.isWhitespace(c)||  _matchingPropertyName(input);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	Character.isWhitespace(c)||  _matchingPropertyName(input);	  Character.isWhitespace(c);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
23	[BUG]  [BUGGY]  char  c  =  input.charAt(i)/  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.charAt(i)/  2;  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.charAt(i)/  2;	  char    c    =    input.charAt(i)+    2;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  char  c  =  input.charAt(i  +  11);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  input.charAt(i  +  11);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  input.charAt(i  +  11);	  String    c    =    input.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  char  c  =  output.charAt(i  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  static  JsonPointer  _parseTail(String  input)  {  final  int  end  =  input.length();  for  (int  i  =  1;  i  <  end;  )  {      [BUGGY]  char  c  =  output.charAt(i  +  1);  [BUGGY]      if  (c  ==  '/')  {  //  common  case,  got  a  segment  return  new  JsonPointer(input,  input.substring(1,  i),  _parseTail(input.substring(i)));  }  ++i;  if  (c  ==  '~'  &&  i  <  end)  {  //  possibly,  quote  return  _parseQuotedTail(input,  i);  }  [CLASS]  JsonPointer  [METHOD]  _parseTail  [RETURN_TYPE]  JsonPointer  String  input  [VARIABLES]  char  c  JsonPointer  EMPTY  _nextSegment  next  String  _asString  _matchingPropertyName  fullString  input  name  segment  str  boolean  int  _matchingElementIndex  end  i  index  len  	projects/JacksonCore6/src/main/java/com/fasterxml/jackson/core/JsonPointer.java	0.4472135954999579	213	213	1	replace	char  c  =  output.charAt(i  +  1);	  String    c    =    input.charAt(i    +    1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
