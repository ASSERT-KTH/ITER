bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  +  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.typesToSkip.size()    ];    	non-compiled	[CE]  	126	None	replace
2	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  -  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.typesToSkip.size()    ];    	non-compiled	[CE]  	126	None	replace
3	[BUG]  [BUGGY]  if(!changed  ||!propsSkipped)  {  [CE]  cannot  find  symbol  changed  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!changed  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!changed  ||!propsSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  changed	146	None	replace
4	[BUG]  [BUGGY]  if(!singleTypeProps  ||!propsSkipped)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps  ||!propsSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	146	None	replace
5	[BUG]  [BUGGY]  if(!skipRenaming  ||!singleTypePropsSkipped)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!singleTypePropsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!singleTypePropsSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	146	None	replace
6	[BUG]  [BUGGY]  if(!singleTypeProps  ||!skipRenaming)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps  ||!skipRenaming)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	146	None	replace
7	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	19	None	replace
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
9	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
11	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
12	[BUG]  [BUGGY]  Node  prop  =  node.getFirstChild(),  checkLevelForProp;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getFirstChild(),  checkLevelForProp;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getFirstChild(),  checkLevelForProp;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
13	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
14	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  null;  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  null;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp,  null;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
15	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
16	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  propsSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  propsSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  propsSkipped.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
17	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  propsRenamed.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  propsRenamed.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  propsRenamed.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
18	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  false,  checkLevelForProp);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  false,  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  false,  checkLevelForProp);	  Property    prop    =    propertiesToErrorFor(node,    false);    	non-compiled	[CE]  	96	None	replace
19	[BUG]  [BUGGY]  Property  prop  =  propertyToErrorFor(node,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertyToErrorFor(node,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertyToErrorFor(node,  true);	  Property    prop    =    propertiesToErrorFor(node,    false);    	non-compiled	[CE]  	96	None	replace
20	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
21	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
22	[BUG]  [BUGGY]  if(propsSkipped.size()  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
23	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
24	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  If(propsSkipped  >  0)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  If(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    If(propsSkipped  >  0)  {	  	non-compiled	[CE]  ';'  expected	63	None	add
25	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propertiesToErrorFor.contains(prop.name))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propertiesToErrorFor.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    if(propsSkipped  >  0  ||  propertiesToErrorFor.contains(prop.name))  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
26	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    if(propsSkipped  >  0  ||  propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
27	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propsSkipped  >=  ++singleTypeProps);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  if(propsSkipped  >  0  ||  propsSkipped  >=  ++singleTypeProps);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    if(propsSkipped  >  0  ||  propsSkipped  >=  ++singleTypeProps);	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
28	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  qName);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  qName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  qName);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
29	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.skipRenaming);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.skipRenaming);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  prop.skipRenaming);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
30	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  newName,  qName);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  newName,  qName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  newName,  qName);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
31	[BUG]  [BUGGY]  Property  prop  =  getProperty(name,  newName);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name,  newName);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
32	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propName);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propName);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
33	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
34	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ';'  expected	55	None	add
35	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
36	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	20	None	replace
37	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	20	None	replace
38	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	20	None	replace
39	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  true);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typesToSkip,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typesToSkip,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typesToSkip,  false);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  false,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  false,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  false,  true);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
43	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  propsRenamed  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
45	[BUG]  [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
46	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
47	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
49	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
50	[BUG]  [BUGGY]  Node  prop  =  node.getParent(),  checkLevelForProp);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getParent(),  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getParent(),  checkLevelForProp);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
51	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  newName);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp,  newName);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
52	[BUG]  [BUGGY]  Node  prop  =  node.getFirstChild(),  checkLevelForProp);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getFirstChild(),  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getFirstChild(),  checkLevelForProp);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
53	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  null);  [CE]  <identifier>  expected  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp,  null);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
54	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  typeSystem);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  typeSystem);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp,  typeSystem);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
55	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.type);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.type);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  prop.type);	  Property    prop    =    getProperty(prop.name,    prop);    	non-compiled	[CE]  	134	None	replace
56	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(singleTypeProps);	  Property    prop    =    propertiesToErrorFor(invalidatingTypes);    	non-compiled	[CE]  	111	None	replace
57	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootTypes);	  Property    prop    =    propertiesToErrorFor(invalidatingTypes);    	non-compiled	[CE]  	111	None	replace
58	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propsSkipped);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propsSkipped);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propsSkipped);	  Property    prop    =    propertiesToErrorFor(invalidatingTypes);    	non-compiled	[CE]  	111	None	replace
59	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(invalidatingTypes,  tt);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(invalidatingTypes,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(invalidatingTypes,  tt);	  Property    prop    =    propertiesToErrorFor(invalidatingTypes);    	non-compiled	[CE]  	111	None	replace
60	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  rootType.toString());	  Property    prop    =    getProperty(prop.name,    null);    	non-compiled	[CE]  	51	None	replace
61	[BUG]  [BUGGY]  if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
62	[BUG]  [BUGGY]  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
63	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
64	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	33	2	replace
65	[BUG]  [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	33	2	replace
66	[BUG]  [BUGGY]  if(skipRenaming,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
67	[BUG]  [BUGGY]  if(singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
68	[BUG]  [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
69	[BUG]  [BUGGY]  if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
70	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
71	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
72	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
73	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
74	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
75	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  tt);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  tt);	  Property    prop    =    propertiesToErrorFor(typeSystem);    	non-compiled	[CE]  	165	None	replace
76	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  false);	  Property    prop    =    propertiesToErrorFor(typeSystem);    	non-compiled	[CE]  	165	None	replace
77	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  true);	  Property    prop    =    propertiesToErrorFor(typeSystem);    	non-compiled	[CE]  	165	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindRenameableProperties());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindRenameableProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindRenameableProperties());	  NodeTraversal.traverse(compiler,    rootType,    new    FindRenameableProperties());    	non-compiled	[CE]  	129	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  new  FindRenameableProperties());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  new  FindRenameableProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  new  FindRenameableProperties());	  NodeTraversal.traverse(compiler,    rootType,    new    FindRenameableProperties());    	non-compiled	[CE]  	129	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  skipRenaming);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    new    FindRenameableProperties());    	non-compiled	[CE]  	129	None	replace
81	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	147	None	replace
82	[BUG]  [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	147	None	replace
83	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	101	None	replace
84	[BUG]  [BUGGY]  if(props.singleTypeProps.contains(singleTypeProps))  {  [CE]  package  props  does  not  exist  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.singleTypeProps.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.singleTypeProps.contains(singleTypeProps))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  package  props  does  not  exist	101	None	replace
85	[BUG]  [BUGGY]  if(prop.skipped.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  skipped  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipped.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipped.contains(singleTypeProps))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  skipped	101	None	replace
86	[BUG]  [BUGGY]  if(skipped.contains(prop.singleTypeProps))  {  [CE]  cannot  find  symbol  singleTypeProps  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipped.contains(prop.singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipped.contains(prop.singleTypeProps))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	101	None	replace
87	[BUG]  [BUGGY]  if(singleTypeProps.contains(prop.skipped))  {  [CE]  cannot  find  symbol  skipped  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.contains(prop.skipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.contains(prop.skipped))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  skipped	101	None	replace
88	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  +  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[props.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[props.size()    ];    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  -  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[props.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[props.size()    ];    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  Node  propsSkip  =  node.getNext();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  propsSkip  =  node.getNext();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  propsSkip  =  node.getNext();	  Node    propsSkip    =    node.getParent();    	non-compiled	[CE]  	162	None	replace
91	[BUG]  [BUGGY]  Node  propsSkip  =  node.getLastChild();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  propsSkip  =  node.getLastChild();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  propsSkip  =  node.getLastChild();	  Node    propsSkip    =    node.getParent();    	non-compiled	[CE]  	162	None	replace
92	[BUG]  [BUGGY]  Node  propsSkip  =  node.getFirstChild();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  propsSkip  =  node.getFirstChild();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  propsSkip  =  node.getFirstChild();	  Node    propsSkip    =    node.getParent();    	non-compiled	[CE]  	162	None	replace
93	[BUG]  [BUGGY]  Node  propsSkip  =  node.getProp(Node.SOURCENAME_PROP);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  propsSkip  =  node.getProp(Node.SOURCENAME_PROP);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  propsSkip  =  node.getProp(Node.SOURCENAME_PROP);	  Node    propsSkip    =    node.getParent();    	non-compiled	[CE]  	162	None	replace
94	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
95	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
96	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
97	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
98	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
99	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  name);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  name);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
100	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  tt);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  tt);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
101	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
102	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  	non-compiled	[CE]  ';'  expected	148	None	add
103	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
104	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0.0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0.0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0.0)  {	  	non-compiled	[CE]  illegal  start  of  expression	148	None	add
105	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(registry.getTypeRegistry());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(registry.getTypeRegistry());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(registry.getTypeRegistry());	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
106	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  registry);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  registry);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  registry);	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
107	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getRenameableProperties());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getRenameableProperties());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getRenameableProperties());	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
108	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  name);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  name);	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
109	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getProperties());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getProperties());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getProperties());	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
110	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(name.toString(),  rootType);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(name.toString(),  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(name.toString(),  rootType);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
111	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  newName);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  newName);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
112	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  name);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  name);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
113	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  name);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getName(),  name);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
114	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  name,  false);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
115	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  false);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    true);    	non-compiled	[CE]  	47	None	replace
116	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  false);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    true);    	non-compiled	[CE]  	47	None	replace
117	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  true);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    true);    	non-compiled	[CE]  	47	None	replace
118	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  null);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    true);    	non-compiled	[CE]  	47	None	replace
119	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||!propsSkipped)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||!propsSkipped)  {	  if(!propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	145	None	replace
120	[BUG]  [BUGGY]  if(!singleTypeProps.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.contains(prop.name))  {	  if(!propsSkipped)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	145	None	replace
121	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  props);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  props);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  props);	  Property    prop    =    getProperty(prop.name,    propNames);    	non-compiled	[CE]  	136	None	replace
122	[BUG]  [BUGGY]  Property  prop  =  findProperty(prop.name,  propNames);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  findProperty(prop.name,  propNames);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  findProperty(prop.name,  propNames);	  Property    prop    =    getProperty(prop.name,    propNames);    	non-compiled	[CE]  	136	None	replace
123	[BUG]  [BUGGY]  if(!instancesSkipped)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!instancesSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!instancesSkipped)  {	  if(!singleTypePropsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	73	None	replace
124	[BUG]  [BUGGY]  if(!invalidatingTypesSkipped)  {  [CE]  cannot  find  symbol  invalidatingTypesSkipped  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!invalidatingTypesSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!invalidatingTypesSkipped)  {	  if(!singleTypePropsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  invalidatingTypesSkipped	73	None	replace
125	[BUG]  [BUGGY]  if(!switchRenaming)  {  [CE]  cannot  find  symbol  switchRenaming  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!switchRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!switchRenaming)  {	  if(!singleTypePropsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  switchRenaming	73	None	replace
126	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  0)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
127	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps.length  >  0)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
128	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.size()  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.size()  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  uniqueTypeProps.size()  >  0)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
129	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.size()  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.size()  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps.size()  >  0)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
130	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  ==  null  &&  prop.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.skipRenaming  ==  null  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.skipRenaming  ==  null  &&  prop.skipRenaming)  {	  if(prop.skipRenaming    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
131	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming!=  null  &&  prop.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.skipRenaming!=  null  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.skipRenaming!=  null  &&  prop.skipRenaming)  {	  if(prop.skipRenaming    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
132	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
133	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
134	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
135	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propertiesToErrorFor.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  propertiesToErrorFor.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propertiesToErrorFor.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
136	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  checkLevelForProp);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  true,  checkLevelForProp);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
137	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  false,  checkLevelForProp);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  false,  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  false,  checkLevelForProp);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
138	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  null);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
139	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  true);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
140	[BUG]  [BUGGY]  if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipped  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkip.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	119	None	replace
141	[BUG]  [BUGGY]  if(prop.name.contains(propsRenamed))  {  [CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.name.contains(propsRenamed))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.contains(propsRenamed))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;	100	None	replace
142	[BUG]  [BUGGY]  if(props.contains(prop.name))  {  [CE]  cannot  find  symbol  props  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(prop.name))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  cannot  find  symbol  props	100	None	replace
143	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
144	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
145	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
146	[BUG]  [BUGGY]  if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	16	None	replace
147	[BUG]  [BUGGY]  if(skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  skipped  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypePropsSize.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	39	None	replace
148	[BUG]  [BUGGY]  if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  skipped  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypePropsSize.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	39	None	replace
149	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
150	[BUG]  [BUGGY]  if(MAX_INVALDIATION_WARNINGS_PER_PROPERTY  >  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(MAX_INVALDIATION_WARNINGS_PER_PROPERTY  >  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(MAX_INVALDIATION_WARNINGS_PER_PROPERTY  >  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
151	[BUG]  [BUGGY]  if(Math.abs(propsSkipped)>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(Math.abs(propsSkipped)>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(Math.abs(propsSkipped)>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
152	[BUG]  [BUGGY]  if(singleTypePropsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypePropsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	15	None	replace
153	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  +  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.types.size()    ];    	non-compiled	[CE]  	90	None	replace
154	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.names.size()  ];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.names.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.names.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.types.size()    ];    	non-compiled	[CE]  	90	None	replace
155	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  -  1];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.types.size()    ];    	non-compiled	[CE]  	90	None	replace
156	[BUG]  [BUGGY]  if(!singleTypePropsSkipped.skipRenaming)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypePropsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypePropsSkipped.skipRenaming)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	122	None	replace
157	[BUG]  [BUGGY]  if(!propsSkipped.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.skipRenaming)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
158	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming  ||!propsSkipped)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.skipRenaming  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.skipRenaming  ||!propsSkipped)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
159	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.skipRenaming  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.skipRenaming  ||  skipRenaming)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
160	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  +  1];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  +  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[propsSkipped.size()    ];    	non-compiled	[CE]  	25	None	replace
161	[BUG]  [BUGGY]  if(!singleTypePropsRenamed)  {  [CE]  cannot  find  symbol  singleTypePropsRenamed  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypePropsRenamed)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypePropsRenamed)  {	  if(!renamePropsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsRenamed	76	None	replace
162	[BUG]  [BUGGY]  if(singleTypeProps.contains(propsSkipped.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.contains(propsSkipped.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.contains(propsSkipped.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
163	[BUG]  [BUGGY]  if(instancesSkipped.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(instancesSkipped.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(instancesSkipped.contains(singleTypeProps.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
164	[BUG]  [BUGGY]  if(singleTypePropsSkipped.contains(prop.name))  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypePropsSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSkipped.contains(prop.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	85	None	replace
165	[BUG]  [BUGGY]  if(!propsSkipped.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.contains(singleTypeProps.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
166	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    +    1];    	non-compiled	[CE]  	3	None	replace
167	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  1];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    +    1];    	non-compiled	[CE]  	3	None	replace
168	[BUG]  [BUGGY]  if(uniqueTypeProps!=  null  &&  propsSkipped.skipRenaming)  {  [CE]  cannot  find  symbol  uniqueTypeProps  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(uniqueTypeProps!=  null  &&  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(uniqueTypeProps!=  null  &&  propsSkipped.skipRenaming)  {	  if(propsSkipped    ==    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  uniqueTypeProps	133	None	replace
169	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  uniqueTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  uniqueTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  uniqueTypeProps.skipRenaming)  {	  if(propsSkipped    ==    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	133	None	replace
170	[BUG]  [BUGGY]  if(uniqueTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {  [CE]  cannot  find  symbol  uniqueTypeProps  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(uniqueTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(uniqueTypeProps  ==  null  &&  propsSkipped.skipRenaming)  {	  if(propsSkipped    ==    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  uniqueTypeProps	133	None	replace
171	[BUG]  [BUGGY]  if(prop.skipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipped  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSize.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	109	None	replace
172	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  PROPERTY,  tt);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  PROPERTY,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  PROPERTY,  tt);	  Property    prop    =    propertiesToErrorFor(node,    PROPERTY);    	non-compiled	[CE]  	141	None	replace
173	[BUG]  [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	24	None	replace
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
175	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
176	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
177	[BUG]  [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	24	2	replace
178	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  tt);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  tt);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
179	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  logger);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  logger);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  logger);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
180	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  false);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
181	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  null);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
182	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  newName);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  newName);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
183	[BUG]  [BUGGY]  if(!propsSkipped.contains(singleTypeProps))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.contains(singleTypeProps))  {	  if(props.contains(singleTypeProps))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	99	None	replace
184	[BUG]  [BUGGY]  if(invalidatingTypes.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  invalidatingTypes  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(invalidatingTypes.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(invalidatingTypes.contains(singleTypeProps))  {	  if(props.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  invalidatingTypes	99	None	replace
185	[BUG]  [BUGGY]  if(rootTypes.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  rootTypes  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(rootTypes.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(rootTypes.contains(singleTypeProps))  {	  if(props.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  rootTypes	99	None	replace
186	[BUG]  [BUGGY]  Collections.sort(properties,  skipRenaming);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  skipRenaming);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
187	[BUG]  [BUGGY]  Collections.sort(properties,  tt);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  tt);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
188	[BUG]  [BUGGY]  Collections.sort(properties,  typeSystem);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  typeSystem);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
189	[BUG]  [BUGGY]  Collections.sort(this.properties);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(this.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(this.properties);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
190	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propsRenamed);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propsRenamed);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propsRenamed);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
191	[BUG]  [BUGGY]  Property  prop  =  getProperty(name,  propsSkipped);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name,  propsSkipped);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name,  propsSkipped);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
192	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
193	[BUG]  [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
194	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
195	[BUG]  [BUGGY]  if(singleTypeProps  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
196	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
197	[BUG]  [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
198	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >=  0)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
199	[BUG]  [BUGGY]  if(propsSkipped  >=  0)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  0)  {	  if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	60	2	replace
200	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  node);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  node);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  node);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
201	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  tt);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem,  tt);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
202	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem,  false);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
203	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  logger);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  logger);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem,  logger);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
204	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  ==  0)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	58	2	replace
205	[BUG]  [BUGGY]  if(propsSkipped  ==  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  0)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	58	2	replace
206	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped!=  0)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	58	2	replace
207	[BUG]  [BUGGY]  if(propsSkipped!=  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  0)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	58	2	replace
208	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getLastChild());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getLastChild());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getLastChild());	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
209	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getString());	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
210	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  null);	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
211	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getValue());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getValue());	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
212	[BUG]  [BUGGY]  if(!propsRenamed.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsRenamed.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsRenamed.skipRenaming)  {	  if(!renameProperties.skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	123	None	replace
213	[BUG]  [BUGGY]  if(skippedRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  skippedRenaming  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skippedRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skippedRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsRenamed.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skippedRenaming	103	None	replace
214	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[propsRenamed.size()    ];    	non-compiled	[CE]  	106	None	replace
215	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSize.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSize.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSize.size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[propsRenamed.size()    ];    	non-compiled	[CE]  	106	None	replace
216	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
217	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
218	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
219	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
220	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
221	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  tt);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  tt);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_WARNINGS_PER_PROPERTY);    	non-compiled	[CE]  	115	None	replace
222	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  name);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  name);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_WARNINGS_PER_PROPERTY);    	non-compiled	[CE]  	115	None	replace
223	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  newName);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY,  newName);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_WARNINGS_PER_PROPERTY);    	non-compiled	[CE]  	115	None	replace
224	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	56	2	replace
225	[BUG]  [BUGGY]  if(singleTypeProps  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	56	2	replace
226	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  true);	  Property    prop    =    propertiesToErrorFor(typeSystem.toString(),    false);    	non-compiled	[CE]  	157	None	replace
227	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getName(),  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getName(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getName(),  false);	  Property    prop    =    propertiesToErrorFor(typeSystem.toString(),    false);    	non-compiled	[CE]  	157	None	replace
228	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getPropertyName(),  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getPropertyName(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getPropertyName(),  false);	  Property    prop    =    propertiesToErrorFor(typeSystem.toString(),    false);    	non-compiled	[CE]  	157	None	replace
229	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  property.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  property.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  property.skipRenaming)  {	  if(prop.skipRenaming!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
230	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(tt,  rootType);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(tt,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(tt,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
231	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  tt);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  tt);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
232	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  tt,  null);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
233	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  typeSystem);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  typeSystem);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  tt,  typeSystem);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
234	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  logger);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt,  logger);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  tt,  logger);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
235	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  -  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  -  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.length    ];    	non-compiled	[CE]  	27	None	replace
236	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  +  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  +  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.length    ];    	non-compiled	[CE]  	27	None	replace
237	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.length  ];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.length  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.length  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.length    ];    	non-compiled	[CE]  	27	None	replace
238	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.length  ];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.length  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.length  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.length    ];    	non-compiled	[CE]  	27	None	replace
239	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  qName);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  qName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  qName);	  Property    prop    =    propertiesToErrorFor(node,    name);    	non-compiled	[CE]  	94	None	replace
240	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  node);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  node);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(name,  node);	  Property    prop    =    propertiesToErrorFor(node,    name);    	non-compiled	[CE]  	94	None	replace
241	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  rootType.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  rootType.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  rootType.toString());	  Property    prop    =    propertiesToErrorFor(node,    name);    	non-compiled	[CE]  	94	None	replace
242	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	161	None	replace
243	[BUG]  [BUGGY]  if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	161	None	replace
244	[BUG]  [BUGGY]  if(singleTypeProps.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	161	None	replace
245	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  rootType);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(registry,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
246	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  node);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  node);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(registry,  node);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
247	[BUG]  [BUGGY]  Property  prop  =  renamePropertiesFor(registry,  rootType);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  renamePropertiesFor(registry,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  renamePropertiesFor(registry,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
248	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  rootsType);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(registry,  rootsType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(registry,  rootsType);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
249	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(register,  rootType);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(register,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(register,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
250	[BUG]  [BUGGY]  if(propNames.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  propNames  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propNames.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propNames.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(props.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  propNames	37	None	replace
251	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_ON_TYPE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_ON_TYPE);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_ON_TYPE);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	114	None	replace
252	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  INVALIDATION_PROPERTY);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  INVALIDATION_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getName(),  INVALIDATION_PROPERTY);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	114	None	replace
253	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  name);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  name);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	114	None	replace
254	[BUG]  [BUGGY]  if(instancesSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(instancesSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(instancesSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypePropsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
255	[BUG]  [BUGGY]  Property  prop  =  getProperty(name,  rootType);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name,  rootType);	  Property    prop    =    getProperty(prop.name,    rootType);    	non-compiled	[CE]  	48	None	replace
256	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType,  newName);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  rootType,  newName);	  Property    prop    =    getProperty(prop.name,    rootType);    	non-compiled	[CE]  	48	None	replace
257	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  +  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[propsToSkip.size()    ];    	non-compiled	[CE]  	127	None	replace
258	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  -  1];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[propsToSkip.size()    ];    	non-compiled	[CE]  	127	None	replace
259	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
260	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
261	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||  singleTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||  singleTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    ||    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
262	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||  singleTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||  singleTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    ||    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
263	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null  ||  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming!=  null  ||  singleTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming!=  null  ||  singleTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    ||    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	8	None	replace
264	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  -  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  -  1];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	163	None	replace
265	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  +  1];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  +  1];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	163	None	replace
266	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  *  2];  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  *  2];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[size()  *  2];	  JSTypeNative[]    props    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	163	None	replace
267	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  codingConvention,  convention);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  codingConvention,  convention);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  codingConvention,  convention);	  Property    prop    =    propertiesToErrorFor(node,    codingConvention);    	non-compiled	[CE]  	118	None	replace
268	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  this.codingConvention);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  this.codingConvention);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  this.codingConvention);	  Property    prop    =    propertiesToErrorFor(node,    codingConvention);    	non-compiled	[CE]  	118	None	replace
269	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION);	  Property    prop    =    propertiesToErrorFor(node,    codingConvention);    	non-compiled	[CE]  	118	None	replace
270	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(codingConvention,  node);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(codingConvention,  node);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(codingConvention,  node);	  Property    prop    =    propertiesToErrorFor(node,    codingConvention);    	non-compiled	[CE]  	118	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tt);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  tt);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  tt,  rootType);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  tt,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  tt,  rootType);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  tt);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  tt);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  logger);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  logger);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  logger);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  skipRenaming);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  tt,  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
276	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	69	2	replace
277	[BUG]  [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	69	2	replace
278	[BUG]  [BUGGY]  if(!props.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!props.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!props.contains(singleTypeProps.name))  {	  if(props.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
279	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_ProPERTY)    {    	compilable	  [FE]  ComparisonFailure  	35	2	replace
280	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_ProPERTY)    {    	compilable	  [FE]  ComparisonFailure  	35	2	replace
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_ProPERTY)    {    	compilable	  [FE]  ComparisonFailure  	35	2	replace
282	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_ProPERTY)    {    	compilable	  [FE]  ComparisonFailure  	35	2	replace
283	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  rootType);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    typeSystem);    	non-compiled	[CE]  	12	None	replace
284	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  tt);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  tt);	  Property    prop    =    propertiesToErrorFor(rootType,    typeSystem);    	non-compiled	[CE]  	12	None	replace
285	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  renameNodes);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  renameNodes);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  renameNodes);	  Property    prop    =    propertiesToErrorFor(rootType,    typeSystem);    	non-compiled	[CE]  	12	None	replace
286	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||!singleTypeProps.contains(prop.name))  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||!singleTypeProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||!singleTypeProps.contains(prop.name))  {	  if(propsSkipped!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	65	None	replace
287	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp,  newName);	  Node    prop    =    node.getLastChild(),    checkLevelForProp);    	non-compiled	[CE]  	91	None	replace
288	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  typeSystem);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  typeSystem);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp,  typeSystem);	  Node    prop    =    node.getLastChild(),    checkLevelForProp);    	non-compiled	[CE]  	91	None	replace
289	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  null);  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp,  null);	  Node    prop    =    node.getLastChild(),    checkLevelForProp);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
290	[BUG]  [BUGGY]  if(prop.name.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.name.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkip.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  PropsSkipped);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  PropsSkipped);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  PropsSkipped);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  skipRenaming);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  null);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  null);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  PropertyTraversal());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  PropertyTraversal());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  PropertyTraversal());	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
296	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    PROPERTY);    	non-compiled	[CE]  	138	None	replace
297	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  >  0)  {	  if(propsSkipped    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
298	[BUG]  [BUGGY]  if(singleTypeProps  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  >  0)  {	  if(propsSkipped    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  <  0)  {	  if(propsSkipped    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
300	[BUG]  [BUGGY]  if(propsSkipped  <  0)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  <  0)  {	  if(propsSkipped    >    0)    {    	compilable	  [FE]  ComparisonFailure  	64	2	replace
301	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  +  1];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  +  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	107	None	replace
302	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propers.size()  ];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propers.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propers.size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	107	None	replace
303	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  -  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  -  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	107	None	replace
304	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
305	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
306	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  Prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  Prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  Prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
307	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  |&  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  |&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  |&  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
308	[BUG]  [BUGGY]  Node  prop  =  node.removeLastChild();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.removeLastChild();  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.removeLastChild();	  Node    prop    =    node.removeFirstChild();    	non-compiled	[CE]  	98	None	replace
309	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
310	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[props.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[props.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[props.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
311	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  +  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  +  1];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
312	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  /  2];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  /  2];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  /  2];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    *    2];    	non-compiled	[CE]  	5	None	replace
313	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  2];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  2];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  2];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    *    2];    	non-compiled	[CE]  	5	None	replace
314	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
315	[BUG]  [BUGGY]  Node  prop  =  node.nextToken();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.nextToken();  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.nextToken();	  Node    prop    =    node.next();    	non-compiled	[CE]  	113	None	replace
316	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  +  1];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  +  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[props.size()    ];    	non-compiled	[CE]  	26	None	replace
317	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  -  1];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  -  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[props.size()    ];    	non-compiled	[CE]  	26	None	replace
318	[BUG]  [BUGGY]  Property  prop  =  getProperty(propName);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(propName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(propName);	  Property    prop    =    getProperty(node.name);    	non-compiled	[CE]  	105	None	replace
319	[BUG]  [BUGGY]  Property  prop  =  getProperty(name);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name);	  Property    prop    =    getProperty(node.name);    	non-compiled	[CE]  	105	None	replace
320	[BUG]  [BUGGY]  Property  prop  =  getProperty(node.qName);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(node.qName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(node.qName);	  Property    prop    =    getProperty(node.name);    	non-compiled	[CE]  	105	None	replace
321	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&!skipRenaming)  {	  if(singleTypeProps!=    null    ||!skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
322	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||!skipRenaming)  {	  if(singleTypeProps!=    null    ||!skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
323	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||!skipRenaming)  {	  if(singleTypeProps!=    null    ||!skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
324	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  ||!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  ||!skipRenaming)  {	  if(singleTypeProps!=    null    ||!skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
325	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
326	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
327	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  tt.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  tt.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  tt.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
328	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  tt);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  tt);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
329	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  false);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
330	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  null);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
331	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  typeSystem);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  typeSystem);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  typeSystem);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
332	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  newName);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  newName);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
333	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  node);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  node);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  node);	  Property    prop    =    propertiesToErrorFor(node,    rootType);    	non-compiled	[CE]  	116	None	replace
334	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  rootType);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  rootType);	  Property    prop    =    propertiesToErrorFor(node,    rootType);    	non-compiled	[CE]  	116	None	replace
335	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  propsSkipped.skipRenaming)  {	  if(propsSkipped    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
336	[BUG]  [BUGGY]  if(props.singleTypeProps.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.singleTypeProps.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.singleTypeProps.contains(singleTypeProps.name))  {	  if(prop.singleTypeProps.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None	replace
337	[BUG]  [BUGGY]  if(prop.singleTypeProps.contains(singleTypePropsSkipped))  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.singleTypeProps.contains(singleTypePropsSkipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.contains(singleTypePropsSkipped))  {	  if(prop.singleTypeProps.contains(singleTypeProps.name))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	143	None	replace
338	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	62	None	replace
339	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	62	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  property);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  property);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  property);	  NodeTraversal.traverse(compiler,    node,    new    FindExternProperties());    	non-compiled	[CE]  	78	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  false);	  NodeTraversal.traverse(compiler,    node,    new    FindExternProperties());    	non-compiled	[CE]  	78	None	replace
342	[BUG]  [BUGGY]  if(skipRenaming!=  null  &&  propsSkipped.skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming!=  null  &&  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming!=  null  &&  propsSkipped.skipRenaming)  {	  if(propsSkipped!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	52	None	replace
343	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||!singleTypeProps.contains(prop.name))  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||!singleTypeProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||!singleTypeProps.contains(prop.name))  {	  if(propsSkipped    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
344	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  true);	  Property    prop    =    propertiesToErrorFor(node.toString(),    false);    	non-compiled	[CE]  	45	None	replace
345	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getLastChild(),  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getLastChild(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getLastChild(),  false);	  Property    prop    =    propertiesToErrorFor(node.toString(),    false);    	non-compiled	[CE]  	45	None	replace
346	[BUG]  [BUGGY]  Property  prop  =  propertyToErrorFor(node.toString(),  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertyToErrorFor(node.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertyToErrorFor(node.toString(),  true);	  Property    prop    =    propertiesToErrorFor(node.toString(),    false);    	non-compiled	[CE]  	45	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  codingConvention);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  codingConvention);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  codingConvention);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  codingConvention,  rootType);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  codingConvention,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  codingConvention,  rootType);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  typeSystem);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention,  typeSystem);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  codingConvention);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  codingConvention);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  codingConvention);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  skipRenaming);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention,  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
352	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  name);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  name);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
353	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  tt);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  tt);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
354	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  parent);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  parent);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  parent);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
355	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  newName);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  newName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  newName);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
356	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toString(),  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties.toString(),  true);	  Property    prop    =    propertiesToErrorFor(properties.toString(),    false);    	non-compiled	[CE]  	159	None	replace
357	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes.toString(),  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes.toString(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootTypes.toString(),  false);	  Property    prop    =    propertiesToErrorFor(properties.toString(),    false);    	non-compiled	[CE]  	159	None	replace
358	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(props.toString(),  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(props.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(props.toString(),  true);	  Property    prop    =    propertiesToErrorFor(properties.toString(),    false);    	non-compiled	[CE]  	159	None	replace
359	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
360	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
361	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
362	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
363	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  [Delete]  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  [Delete]  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  [Delete]  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ')'  expected	61	None	add
364	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
365	[BUG]  [BUGGY]  if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	36	None	replace
366	[BUG]  [BUGGY]  if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	36	None	replace
367	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  typeSystem.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  typeSystem.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  typeSystem.skipRenaming)  {	  if(propsSkipped!=    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	125	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  renameProperties);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  renameProperties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  renameProperties);	  NodeTraversal.traverse(compiler,    rootType,    renameProperties);    	non-compiled	[CE]  	131	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renameProperties,  rootType);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  renameProperties,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  renameProperties,  rootType);	  NodeTraversal.traverse(compiler,    rootType,    renameProperties);    	non-compiled	[CE]  	131	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  renameProperties);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  renameProperties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  renameProperties);	  NodeTraversal.traverse(compiler,    rootType,    renameProperties);    	non-compiled	[CE]  	131	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties,  skipRenaming);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameProperties,  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    renameProperties);    	non-compiled	[CE]  	131	None	replace
372	[BUG]  [BUGGY]  if(!propsSkipped.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
373	[BUG]  [BUGGY]  if(!singleTypeProps.isSkipped()  &&!propsSkipped.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.isSkipped()  &&!propsSkipped.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.isSkipped()  &&!propsSkipped.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
374	[BUG]  [BUGGY]  if(!singleTypeProps.isSkipped()  ||!propsSkipped.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.isSkipped()  ||!propsSkipped.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.isSkipped()  ||!propsSkipped.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
375	[BUG]  [BUGGY]  if(!singleTypePropsSkipped.isSkipped())  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypePropsSkipped.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypePropsSkipped.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	75	None	replace
376	[BUG]  [BUGGY]  if(!singleTypeProps.isSkipped()  ||  propsSkipped.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.isSkipped()  ||  propsSkipped.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.isSkipped()  ||  propsSkipped.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
377	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getName(),  true);	  Property    prop    =    propertiesToErrorFor(rootType.getName(),    false);    	non-compiled	[CE]  	104	None	replace
378	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getName(),  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getName(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getName(),  false);	  Property    prop    =    propertiesToErrorFor(rootType.getName(),    false);    	non-compiled	[CE]  	104	None	replace
379	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getReferenceName(),  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getReferenceName(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getReferenceName(),  false);	  Property    prop    =    propertiesToErrorFor(rootType.getName(),    false);    	non-compiled	[CE]  	104	None	replace
380	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
381	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
382	[BUG]  [BUGGY]  if(propsSkipped  ==  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
383	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
384	[BUG]  [BUGGY]  if(propsSkipped.length  ==  0)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.length  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.length  ==  0)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
385	[BUG]  [BUGGY]  if(singleTypePropsSkipped  ==  0)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypePropsSkipped  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSkipped  ==  0)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	68	None	replace
386	[BUG]  [BUGGY]  if(singleTypeProps.length  ==  1)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.length  ==  1)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.length  ==  1)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
387	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getQualifiedName());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getQualifiedName());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getQualifiedName());	  Property    prop    =    propertiesToErrorFor(rootType.getName());    	non-compiled	[CE]  	43	None	replace
388	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getName());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getName());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getName());	  Property    prop    =    propertiesToErrorFor(rootType.getName());    	non-compiled	[CE]  	43	None	replace
389	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getPropertyName());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getPropertyName());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getPropertyName());	  Property    prop    =    propertiesToErrorFor(rootType.getName());    	non-compiled	[CE]  	43	None	replace
390	[BUG]  [BUGGY]  Property  prop  =  propertyToErrorFor(rootType.toString(),  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertyToErrorFor(rootType.toString(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertyToErrorFor(rootType.toString(),  false);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    true);    	non-compiled	[CE]  	44	None	replace
391	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  0);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  0);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
392	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  null);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
393	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  name);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  name);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
394	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  checkLevelForProp);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  checkLevelForProp);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
395	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  tt);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP,  tt);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
396	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	153	None	replace
397	[BUG]  [BUGGY]  if(propsSkipped  >=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	153	None	replace
398	[BUG]  [BUGGY]  if(propsSkipped  ==  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	153	None	replace
399	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	153	None	replace
400	[BUG]  [BUGGY]  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
401	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
402	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  +  1];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	124	None	replace
403	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  -  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	124	None	replace
404	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propers.size()  ];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propers.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propers.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	124	None	replace
405	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  +  1];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[propNames.size()    ];    	non-compiled	[CE]  	89	None	replace
406	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  -  1];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  -  1];	  JSTypeNative[]    props    =    new    JSTypeNative[propNames.size()    ];    	non-compiled	[CE]  	89	None	replace
407	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  *  2];  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  *  2];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  *  2];	  JSTypeNative[]    props    =    new    JSTypeNative[propNames.size()    ];    	non-compiled	[CE]  	89	None	replace
408	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString(),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propNames.toString(),  true);	  Property    prop    =    propertiesToErrorFor(propNames.toString(),    false);    	non-compiled	[CE]  	158	None	replace
409	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	152	None	replace
410	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
411	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	152	None	replace
412	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  renameNodes);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  renameNodes);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  renameNodes);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renameNodes,  rootType);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  renameNodes,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  renameNodes,  rootType);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  newTypesToSkip);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  newTypesToSkip);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  newTypesToSkip);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  skipRenaming);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes,  skipRenaming);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
417	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  renameNodes);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  renameNodes);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  renameNodes);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
418	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [CE]  cannot  find  symbol  Prop  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  Prop	71	None	replace
419	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  incomparable  types:  boolean  and  int  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  int	22	None	replace
420	[BUG]  [BUGGY]  if(skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(skipRenaming  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	22	None	replace
421	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
422	[BUG]  [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootType,  new  FindExternProperties());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  rootType,  new  FindExternProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  rootType,  new  FindExternProperties());	  NodeTraversal.traverse(compiler,    rootType,    tt,    new    FindExternProperties());    	non-compiled	[CE]  	81	None	replace
424	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tt,  new  FindExternProperties());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tt,  new  FindExternProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  tt,  new  FindExternProperties());	  NodeTraversal.traverse(compiler,    rootType,    tt,    new    FindExternProperties());    	non-compiled	[CE]  	81	None	replace
425	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  rootType);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(name,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
426	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  qName);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  qName);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  qName);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
427	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  rootType.toString());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  rootType.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  rootType.toString());	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
428	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  name,  tt);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  name,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  name,  tt);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
429	[BUG]  [BUGGY]  if(!propsSkipped.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.length)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.length)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
430	[BUG]  [BUGGY]  if(!singleTypePropsSkipped.length)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypePropsSkipped.length)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypePropsSkipped.length)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	74	None	replace
431	[BUG]  [BUGGY]  if(!propsSkipped,!singleTypeProps.length)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped,!singleTypeProps.length)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped,!singleTypeProps.length)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
432	[BUG]  [BUGGY]  if(!singleTypeProps.length  ||!propsSkipped.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.length  ||!propsSkipped.length)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.length  ||!propsSkipped.length)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
433	[BUG]  [BUGGY]  if(singleTypeProps.length  >  0)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.length  >  0)  {	  if(!singleTypeProps)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	121	None	replace
434	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
435	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
436	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
437	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
438	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >>  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
439	[BUG]  [BUGGY]  if(!skipped)  {  [CE]  cannot  find  symbol  skipped  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipped)  {	  if(!changed)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	72	None	replace
440	[BUG]  [BUGGY]  Property  prop  =  propertyToErrorFor(node,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertyToErrorFor(node,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertyToErrorFor(node,  false);	  Property    prop    =    propertiesToErrorFor(node,    true);    	non-compiled	[CE]  	97	None	replace
441	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  null);	  Property    prop    =    propertiesToErrorFor(node,    true);    	non-compiled	[CE]  	97	None	replace
442	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  true,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  true,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  true,  false);	  Property    prop    =    propertiesToErrorFor(node,    true);    	non-compiled	[CE]  	97	None	replace
443	[BUG]  [BUGGY]  Property  prop  =  getProperty(name,  prop.name);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name,  prop.name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name,  prop.name);	  Property    prop    =    getProperty(prop.name,    name);    	non-compiled	[CE]  	50	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  registry,  new  FindExternProperties());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  registry,  new  FindExternProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  registry,  new  FindExternProperties());	  NodeTraversal.traverse(compiler,    rootType,    new    FindExternProperties());    	non-compiled	[CE]  	130	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  property);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  property);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  property);	  NodeTraversal.traverse(compiler,    rootType,    new    FindExternProperties());    	non-compiled	[CE]  	130	None	replace
446	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {	  if(singleTypeProps!=    null    &&    singleTypeProps.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	155	None	replace
447	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped.length  >  0)  {	  if(singleTypeProps!=    null    &&    singleTypeProps.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	155	None	replace
448	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  &&  singleTypeProps.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  &&  singleTypeProps.length  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  &&  singleTypeProps.length  >  0)  {	  if(singleTypeProps!=    null    &&    singleTypeProps.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	155	None	replace
449	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  -  1];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  -  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  -  1];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	144	None	replace
450	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  +  1];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  +  1];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	144	None	replace
451	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsRenamed.size()  ];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsRenamed.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsRenamed.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[propsSkipped.size()    ];    	non-compiled	[CE]  	2	None	replace
452	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  +  1];  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  +  1];	  JSTypeNative[]    props    =    new    JSTypeNative[propsSkipped.size()    ];    	non-compiled	[CE]  	2	None	replace
453	[BUG]  [BUGGY]  if(prop.name.contains(singleTypeProps,  skipRenaming))  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.name.contains(singleTypeProps,  skipRenaming))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.contains(singleTypeProps,  skipRenaming))  {	  if(prop.name.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	88	None	replace
454	[BUG]  [BUGGY]  if(props.name.contains(singleTypeProps))  {  [CE]  package  props  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.name.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.name.contains(singleTypeProps))  {	  if(prop.name.contains(singleTypeProps))    {    	non-compiled	[CE]  package  props  does  not  exist	88	None	replace
455	[BUG]  [BUGGY]  if(prop.name.contains(singleTypePropsSkipped))  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.name.contains(singleTypePropsSkipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.contains(singleTypePropsSkipped))  {	  if(prop.name.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	88	None	replace
456	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  registry);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  registry);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  registry);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    null);    	non-compiled	[CE]  	42	None	replace
457	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  this);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  this);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  this);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    null);    	non-compiled	[CE]  	42	None	replace
458	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  null,  checkLevelForProp);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  null,  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  null,  checkLevelForProp);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    null);    	non-compiled	[CE]  	42	None	replace
459	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  codingConvention);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  codingConvention);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp,  codingConvention);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProp);    	non-compiled	[CE]  	93	None	replace
460	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
461	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null  &&  propsSkipped)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming!=  null  &&  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming!=  null  &&  propsSkipped)  {	  if(propsSkipped!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	52	None	replace
462	[BUG]  [BUGGY]  if(!skipRenaming  ||!singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(!changed)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	72	None	replace
463	[BUG]  [BUGGY]  if(!skipRenaming  ||!singleTypeProps.contains(prop.name))  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!singleTypeProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!singleTypeProps.contains(prop.name))  {	  if(!changed)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	72	None	replace
464	[BUG]  [BUGGY]  if(!skipRenaming  ||!singleTypeProps.isEmpty())  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!singleTypeProps.isEmpty())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!singleTypeProps.isEmpty())  {	  if(!changed)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	72	None	replace
465	[BUG]  [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
466	[BUG]  [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
467	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propertiesToError);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propertiesToError);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propertiesToError);	  Property    prop    =    getProperty(prop.name,    null);    	non-compiled	[CE]  	51	None	replace
468	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  NON_GLOBAL_TYPE);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  NON_GLOBAL_TYPE);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  NON_GLOBAL_TYPE);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    PROPERTY);    	non-compiled	[CE]  	138	None	replace
469	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    PROPERTY);    	non-compiled	[CE]  	138	None	replace
470	[BUG]  [BUGGY]  if(propsRenamed.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(singleTypeProps.name))  {	  if(prop.singleTypeProps.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	143	None	replace
471	[BUG]  [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	20	None	replace
472	[BUG]  [BUGGY]  Property  prop  =  getProperty(node.getString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(node.getString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(node.getString());	  Property    prop    =    getProperty(node.name);    	non-compiled	[CE]  	105	None	replace
473	[BUG]  [BUGGY]  if(propsSkipped,  allTypes.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  allTypes.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  allTypes.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ')'  expected	161	None	replace
474	[BUG]  [BUGGY]  if(propsSkipped,  properties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  properties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  properties.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ')'  expected	161	None	replace
475	[BUG]  [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ||  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	161	None	replace
476	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	32	2	replace
477	[BUG]  [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	32	2	replace
478	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.contains(prop.name))  {  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.contains(prop.name))  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	32	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propertiesToError);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  propertiesToError);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
480	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  tt,  null);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
481	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  skipRenaming)  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
482	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
483	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps.name)||  skipRenaming)  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
484	[BUG]  [BUGGY]  if(singleTypeProps.contains(propsSkipped))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.contains(propsSkipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.contains(propsSkipped))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
485	[BUG]  [BUGGY]  if(instancesSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(instancesSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(instancesSkipped.contains(prop.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
486	[BUG]  [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
487	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toArray(new  Property[typesToSkip.size()  ]),  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toArray(new  Property[typesToSkip.size()  ]),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.toArray(new  Property[typesToSkip.size()  ]),  false);	  Property    prop    =    propertiesToErrorFor(typeSystem.toString(),    false);    	non-compiled	[CE]  	157	None	replace
488	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_WARNINGS_PER_PROPERTY);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_WARNINGS_PER_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_WARNINGS_PER_PROPERTY);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
489	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(checkLevelForProp.toString(),  false,  rootType);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(checkLevelForProp.toString(),  false,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(checkLevelForProp.toString(),  false,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
490	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  rootType);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
491	[BUG]  [BUGGY]  Node  prop  =  node.getfirstChild(),  checkLevelForProp;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getfirstChild(),  checkLevelForProp;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getfirstChild(),  checkLevelForProp;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
492	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp  +  1;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp  +  1;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
493	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  PropsSkipped.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  PropsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  PropsSkipped.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
494	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {  [CE]  cannot  find  symbol  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_ProPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  MAX_INVALDIATION_WARNINGS_PER_ProPERTY	35	None	replace
495	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  logger);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  logger);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps,  logger);	  Property    prop    =    propertiesToErrorFor(node,    checkLevelForProps);    	non-compiled	[CE]  	117	None	replace
496	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  rootType.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  rootType.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  rootType.toString());	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
497	[BUG]  [BUGGY]  if(propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSize.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
498	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
499	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention,  null);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
501	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this.codingConvention);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this.codingConvention);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  this.codingConvention);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
502	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  this);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention,  this);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
503	[BUG]  [BUGGY]  if(propsSkipped  >  0  ||  prop.skipRenaming)  {  If(propsSkipped  >  0  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  ||  prop.skipRenaming)  {  If(propsSkipped  >  0  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  0  ||  prop.skipRenaming)  {  If(propsSkipped  >  0  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
504	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  codingConvention);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  codingConvention);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  codingConvention);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
505	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  null);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  null);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
506	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  rootType);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY,  rootType);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
507	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  true);	  Property    prop    =    propertiesToErrorFor(node,    true);    	non-compiled	[CE]  	97	None	replace
508	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propNames.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propNames.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propNames.size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[props.size()    ];    	non-compiled	[CE]  	26	None	replace
509	[BUG]  [BUGGY]  if(propsSkipped  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  null)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  null)  {	  if(propsSkipped!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	65	None	replace
510	[BUG]  [BUGGY]  if(propsRenamed.contains(singleTypeProps))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(singleTypeProps))  {	  if(prop.name.contains(singleTypeProps))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
511	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  null);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
512	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootTypes,  true);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
513	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  false);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
514	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem,  null);	  Property    prop    =    propertiesToErrorFor(typeSystem);    	non-compiled	[CE]  	165	None	replace
515	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
516	[BUG]  [BUGGY]  if(!instancesRenamed)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!instancesRenamed)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!instancesRenamed)  {	  if(!singleTypePropsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	73	None	replace
517	[BUG]  [BUGGY]  if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkip.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	119	None	replace
518	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
519	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsInstances.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsInstances.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsInstances.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	154	None	replace
520	[BUG]  [BUGGY]  Property  prop  =  getProperty(name,  prop);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(name,  prop);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(name,  prop);	  Property    prop    =    getProperty(prop.name,    name);    	non-compiled	[CE]  	50	None	replace
521	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  rootType);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  rootType);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
522	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  codingConvention);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  codingConvention);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  codingConvention);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
523	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(rootType.toString());  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(rootType.toString());  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorFor(rootType.toString());  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
524	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(propsSkipped);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(propsSkipped);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorFor(propsSkipped);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
525	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(props.name);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(props.name);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorFor(props.name);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
526	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(rootType);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorFor(rootType);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorFor(rootType);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
527	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||  singleTypeProps  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||  singleTypeProps  ==  null)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||  singleTypeProps  ==  null)  {	  if(singleTypeProps    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
528	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!singleTypeProps)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!singleTypeProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!singleTypeProps)  {	  if(!singleTypeProps)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	121	None	replace
529	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getString(),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node.getString(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.getString(),  true);	  Property    prop    =    propertiesToErrorFor(node.toString(),    false);    	non-compiled	[CE]  	45	None	replace
530	[BUG]  [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this,  codingConvention);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this,  codingConvention);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  this,  codingConvention);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
532	[BUG]  [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	152	None	replace
533	[BUG]  [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  skipped  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  skipped	152	None	replace
534	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  rootType);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem,  rootType);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
535	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getReferenceName());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getReferenceName());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getReferenceName());	  Property    prop    =    propertiesToErrorFor(rootType.getName());    	non-compiled	[CE]  	43	None	replace
536	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  rootType);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  rootType);	  Property    prop    =    propertiesToErrorFor(properties);    	non-compiled	[CE]  	167	None	replace
537	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	153	None	replace
538	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsInstances  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsInstances  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsInstances  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	153	None	replace
539	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name  +  1);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  name  +  1);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    name);    	non-compiled	[CE]  	40	None	replace
540	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||  uniqueTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||  uniqueTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||  uniqueTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    ||    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
541	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  rootType);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry(),  rootType);	  Property    prop    =    propertiesToErrorFor(typeSystem.getTypeRegistry());    	non-compiled	[CE]  	166	None	replace
542	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProps)  {  [CE]  cannot  find  symbol  propertiesToErrorForProps  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProps)  {	  if(propsSkipped    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProps	64	None	replace
543	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	64	None	replace
544	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  singleTypeProps);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  singleTypeProps);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  singleTypeProps);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
545	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProps);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProps);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProps);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
546	[BUG]  [BUGGY]  if(propsSkipped!=  null  ||  skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  ||  skipRenaming)  {	  if(singleTypeProps!=    null    ||!skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	128	None	replace
547	[BUG]  [BUGGY]  if(propsSkipped  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
548	[BUG]  [BUGGY]  if(!propsSkipped,!singleTypeProps.skipRenaming)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped,!singleTypeProps.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped,!singleTypeProps.skipRenaming)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  ')'  expected	122	None	replace
549	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  registry);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  registry);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  registry);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
550	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  registry);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(name,  registry);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(name,  registry);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
551	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.length  ];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.length  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.length  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.length    ];    	non-compiled	[CE]  	27	None	replace
552	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  NON_GLOBAL_TYPE);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  NON_GLOBAL_TYPE);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  NON_GLOBAL_TYPE);	  Property    prop    =    propertiesToErrorFor(node,    codingConvention);    	non-compiled	[CE]  	118	None	replace
553	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  ==  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  singleTypeProps.length  ==  0)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
554	[BUG]  [BUGGY]  if(props.length  ==  0)  {  [CE]  cannot  find  symbol  props  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.length  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.length  ==  0)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  props	68	None	replace
555	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null  &&  propsSkipped)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  ==  null  &&  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  ==  null  &&  propsSkipped)  {	  if(propsSkipped    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	6	None	replace
556	[BUG]  [BUGGY]  Collections.sort(propertiesToErrors);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(propertiesToErrors);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(propertiesToErrors);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
557	[BUG]  [BUGGY]  Collections.sort(propers);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(propers);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(propers);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
558	[BUG]  [BUGGY]  Collections.sort(propNames);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(propNames);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(propNames);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
559	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
560	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSize.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSize.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSize.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
561	[BUG]  [BUGGY]  if(prop.singleTypeProps.contains(propsSkipped))  {  [CE]  cannot  find  symbol  singleTypeProps  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.singleTypeProps.contains(propsSkipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.contains(propsSkipped))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	101	None	replace
562	[BUG]  [BUGGY]  if(propsSkip.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  propsSkip  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkip.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkip.contains(singleTypeProps))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  propsSkip	101	None	replace
563	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),   " ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),   " ");  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),   " ");	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    null);    	non-compiled	[CE]  	42	None	replace
564	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    null);    	non-compiled	[CE]  	42	None	replace
565	[BUG]  [BUGGY]  if(propsSkipped)  {  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped)  {	  if(!propsSkipped)    {    	non-compiled	[CE]  incompatible  types	145	None	replace
566	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  &&  propsSkipped)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  &&  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  &&  propsSkipped)  {	  if(propsSkipped    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
567	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[properties.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[properties.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[properties.size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	107	None	replace
568	[BUG]  [BUGGY]  if(!singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
569	[BUG]  [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  props  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  props	16	None	replace
570	[BUG]  [BUGGY]  if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSize  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSize	16	None	replace
571	[BUG]  [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSkip  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSkip	16	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  this);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties(),  this);	  NodeTraversal.traverse(compiler,    rootType,    new    FindRenameableProperties());    	non-compiled	[CE]  	129	None	replace
573	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.namesToSkip.size()  ];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.namesToSkip.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.namesToSkip.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.typesToSkip.size()    ];    	non-compiled	[CE]  	126	None	replace
574	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP  +  1);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP  +  1);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
575	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
576	[BUG]  [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
577	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
578	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  1)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
579	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name)||  propsSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(prop.name)||  propsSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name)||  propsSkipped.contains(prop.name))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
580	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name)||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(prop.name)||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name)||  skipRenaming)  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
581	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name)||  propertiesToErrorFor.contains(prop.name))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
582	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippeRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippeRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippeRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
583	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippingRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippingRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippingRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
584	[BUG]  [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
585	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  ||  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  ||  prop.skipRenaming)  {	  if(prop.skipRenaming    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
586	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProp.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProp.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProp.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
587	[BUG]  [BUGGY]  if(uniqueTypeProps!=  null  &&  propsSkipped)  {  [CE]  cannot  find  symbol  uniqueTypeProps  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(uniqueTypeProps!=  null  &&  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(uniqueTypeProps!=  null  &&  propsSkipped)  {	  if(propsSkipped!=    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  uniqueTypeProps	125	None	replace
588	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  false);	  Property    prop    =    propertiesToErrorFor(properties.toString(),    false);    	non-compiled	[CE]  	159	None	replace
589	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindRenameableProperties());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindRenameableProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindRenameableProperties());	  NodeTraversal.traverse(compiler,    rootType,    tt,    new    FindExternProperties());    	non-compiled	[CE]  	81	None	replace
590	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getParent(),  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getParent(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getParent(),  false);	  Property    prop    =    propertiesToErrorFor(rootType.getName(),    false);    	non-compiled	[CE]  	104	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindProperties());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindProperties());	  NodeTraversal.traverse(compiler,    rootType,    new    FindExternProperties());    	non-compiled	[CE]  	130	None	replace
592	[BUG]  [BUGGY]  if(!propsSkipped  ||!skipRenaming)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped  ||!skipRenaming)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	146	None	replace
593	[BUG]  [BUGGY]  if(!skipRenaming  &&!propsSkipped)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  &&!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  &&!propsSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	146	None	replace
594	[BUG]  [BUGGY]  if(!skipSkipped  ||!propsSkipped)  {  [CE]  cannot  find  symbol  skipSkipped  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipSkipped  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipSkipped  ||!propsSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  skipSkipped	146	None	replace
595	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
596	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
597	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  uniqueTypeProps.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
598	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindProperties());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindProperties());	  NodeTraversal.traverse(compiler,    node,    new    FindExternProperties());    	non-compiled	[CE]  	78	None	replace
599	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propertiesToError,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propertiesToError,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propertiesToError,  false);	  Property    prop    =    propertiesToErrorFor(node,    false);    	non-compiled	[CE]  	96	None	replace
600	[BUG]  [BUGGY]  if(!propsSkipped,!singleTypeProps.isSkipped())  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped,!singleTypeProps.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped,!singleTypeProps.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  ')'  expected	75	None	replace
601	[BUG]  [BUGGY]  if(propsSkipped  >  maxTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  maxTypeProps  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  maxTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  maxTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  maxTypeProps	15	None	replace
602	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  maxInVALIDATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  maxInVALIDATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  maxInVALIDATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
603	[BUG]  [BUGGY]  if(propsSkipped  >  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	15	None	replace
604	[BUG]  [BUGGY]  if(propsSkipped  >  maxTypes.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  maxTypes  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  maxTypes.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  maxTypes.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  maxTypes	15	None	replace
605	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  propertiesToError);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes,  propertiesToError);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
606	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes,  null);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
607	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propertyNames,  tt);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propertyNames,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propertyNames,  tt);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
608	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  tt);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  tt);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  tt);	  Property    prop    =    propertiesToErrorFor(rootType,    tt);    	non-compiled	[CE]  	10	None	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  this);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes,  this);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propertiesToErrorForProp);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propertiesToErrorForProp);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  propertiesToErrorForProp);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  property);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes,  property);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes,  property);	  NodeTraversal.traverse(compiler,    rootType,    renameNodes);    	non-compiled	[CE]  	77	None	replace
612	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  this);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindExternProperties(),  this);	  NodeTraversal.traverse(compiler,    node,    new    FindExternProperties());    	non-compiled	[CE]  	78	None	replace
613	[BUG]  [BUGGY]  if(!skipRenaming  ||!singleTypeProps)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!singleTypeProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!singleTypeProps)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	146	None	replace
614	[BUG]  [BUGGY]  if(!skipRenaming  ||!instancesSkipped)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!skipRenaming  ||!instancesSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!instancesSkipped)  {	  if(!skipRenaming    ||!propsSkipped)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	146	None	replace
615	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped  >  skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped  >  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped  >  skipRenaming)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	152	None	replace
616	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipped)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	20	None	replace
617	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.name.length()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.name.length()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.name.length()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	20	None	replace
618	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	139	None	replace
619	[BUG]  [BUGGY]  if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ')'  expected	147	None	replace
620	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped  >  0)  {	  if(singleTypeProps!=    null    &&    singleTypeProps.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	155	None	replace
621	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_PROPERTY);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp,  INVALIDATION_PROPERTY);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    false,    checkLevelForProp);    	non-compiled	[CE]  	46	None	replace
622	[BUG]  [BUGGY]  if(propsSkipped  ==  null  ||  uniqueTypeProps  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  ==  null  ||  uniqueTypeProps  ==  null)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  ||  uniqueTypeProps  ==  null)  {	  if(singleTypeProps    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
623	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  name);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  name);	  Property    prop    =    propertiesToErrorFor(node,    name);    	non-compiled	[CE]  	94	None	replace
624	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.get(0)];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.get(0)];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[properties.get(0)];	  JSTypeNative[]    props    =    new    JSTypeNative[properties.size()    ];    	non-compiled	[CE]  	124	None	replace
625	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  0  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
626	[BUG]  [BUGGY]  if(propsSkipped  >  0  &&  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  0  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    &&    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	19	2	replace
627	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(singleTypeProps,  false);	  Property    prop    =    propertiesToErrorFor(node,    false);    	non-compiled	[CE]  	96	None	replace
628	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  this);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties(),  this);	  NodeTraversal.traverse(compiler,    rootType,    new    FindExternProperties());    	non-compiled	[CE]  	130	None	replace
629	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.owner);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.owner);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  prop.owner);	  Property    prop    =    getProperty(prop.name,    newName);    	non-compiled	[CE]  	49	None	replace
630	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
631	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
632	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps.name)||  uniqueTypeProps.contains(prop.name))  {	  if(propsSkipped.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
633	[BUG]  [BUGGY]  if(props.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(singleTypeProps.name)||  propsSkipped.contains(singleTypeProps.name))  {	  if(props.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
634	[BUG]  [BUGGY]  if(props.contains(singleTypeProps.name)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.contains(singleTypeProps.name)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(singleTypeProps.name)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(props.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
635	[BUG]  [BUGGY]  if(props.contains(singleTypeProps.name)&&  propsSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(props.contains(singleTypeProps.name)&&  propsSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(singleTypeProps.name)&&  propsSkipped.contains(prop.name))  {	  if(props.contains(singleTypeProps.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	86	None	replace
636	[BUG]  [BUGGY]  if(!singleTypeProps.isRenamed())  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.isRenamed())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.isRenamed())  {	  if(!renamePropsSkipped)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	76	None	replace
637	[BUG]  [BUGGY]  if(propsSkipped,  prop.singleTypeProps.contains(singleTypeProps.name))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  prop.singleTypeProps.contains(singleTypeProps.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  prop.singleTypeProps.contains(singleTypeProps.name))  {	  if(prop.singleTypeProps.contains(singleTypeProps.name))    {    	non-compiled	[CE]  ')'  expected	143	None	replace
638	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped,  singleTypeProps);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped,  singleTypeProps);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propsSkipped,  singleTypeProps);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
639	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped  +  1);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propsSkipped  +  1);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
640	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped  -  1);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propsSkipped  -  1);	  Property    prop    =    getProperty(prop.name,    propsSkipped);    	non-compiled	[CE]  	135	None	replace
641	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getType(),  false);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getType(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getType(),  false);	  Property    prop    =    propertiesToErrorFor(typeSystem.toString(),    false);    	non-compiled	[CE]  	157	None	replace
642	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getPropertyName(),  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getPropertyName(),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getPropertyName(),  true);	  Property    prop    =    propertiesToErrorFor(rootType.getName(),    false);    	non-compiled	[CE]  	104	None	replace
643	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)&&  propertiesToErrorForProperties.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)&&  propertiesToErrorForProperties.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)&&  propertiesToErrorForProperties.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
644	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorForProps.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.contains(prop.name)||  propertiesToErrorForProps.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name)||  propertiesToErrorForProps.contains(prop.name))  {	  if(propsSkipped.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	87	None	replace
645	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	56	2	replace
646	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	56	2	replace
647	[BUG]  [BUGGY]  if(prop.singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  singleTypeProps  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkip.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	119	None	replace
648	[BUG]  [BUGGY]  if(propsSkipped  >=  null  &&  prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  null  &&  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  null  &&  prop.skipRenaming)  {	  if(propsSkipped    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	6	None	replace
649	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
650	[BUG]  [BUGGY]  if(propsSkipped,  singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  singleTypeProps.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped,    singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  	142	None	replace
651	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {	  if(propsSkipped    ==    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	7	None	replace
652	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
653	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
654	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
655	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
656	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(rootType.toString());  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(rootType.toString());  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorForProp(rootType.toString());  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
657	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorForProp(node,  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
658	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(propsSkipped);  if(propsSkipped  >  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0)  {  Property  propsSkipped  =  propertiesToErrorForProp(propsSkipped);  if(propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    0)    {    Property  propsSkipped  =  propertiesToErrorForProp(propsSkipped);  if(propsSkipped  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
659	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  +  1];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  +  1];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  +  1];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[propsRenamed.size()    ];    	non-compiled	[CE]  	106	None	replace
660	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	71	None	replace
661	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  0  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
662	[BUG]  [BUGGY]  if(propsSkipped  >  0  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  0  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    Prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	71	2	replace
663	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!propsSkipped)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||!propsSkipped)  {	  if(!propsSkipped)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	145	None	replace
664	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&!propsSkipped)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&!propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&!propsSkipped)  {	  if(!propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	145	None	replace
665	[BUG]  [BUGGY]  Collections.sort(properties,  new  Property[]  {  prop  }  );  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  new  Property[]  {  prop  }  );  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  new  Property[]  {  prop  }  );	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
666	[BUG]  [BUGGY]  Collections.sort(properties,  new  Property());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  new  Property());	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
667	[BUG]  [BUGGY]  Collections.sort(properties,  renameProperties);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  renameProperties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  renameProperties);	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
668	[BUG]  [BUGGY]  Collections.sort(properties,  new  Property[]  {  }  );  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Collections.sort(properties,  new  Property[]  {  }  );  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties,  new  Property[]  {  }  );	  Collections.sort(properties);    	non-compiled	[CE]  	164	None	replace
669	[BUG]  [BUGGY]  if(propsSkipped  >=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  null  &&  propsEnabled  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null    &&    propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	153	None	replace
670	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propsToSkip,  new  FindExternProperties());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  propsToSkip,  new  FindExternProperties());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  propsToSkip,  new  FindExternProperties());	  NodeTraversal.traverse(compiler,    rootType,    tt,    new    FindExternProperties());    	non-compiled	[CE]  	81	None	replace
671	[BUG]  [BUGGY]  if(!propsSkipped.isSkipped()  ||!singleTypeProps.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!propsSkipped.isSkipped()  ||!singleTypeProps.isSkipped())  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped.isSkipped()  ||!singleTypeProps.isSkipped())  {	  if(!singleTypeProps.isSkipped())    {    	non-compiled	[CE]  int  cannot  be  dereferenced	75	None	replace
672	[BUG]  [BUGGY]  if(prop.name.contains(singleTypeProps)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.name.contains(singleTypeProps)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.contains(singleTypeProps)&&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(prop.name.contains(singleTypeProps))    {    	non-compiled	[CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;	88	None	replace
673	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps.toString(),  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps.toString(),  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(singleTypeProps.toString(),  false);	  Property    prop    =    propertiesToErrorFor(propNames.toString(),    false);    	non-compiled	[CE]  	158	None	replace
674	[BUG]  [BUGGY]  Node  prop  =  node.removeFirstChild(),  checkLevelForProp);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.removeFirstChild(),  checkLevelForProp);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.removeFirstChild(),  checkLevelForProp);	  Node    prop    =    node.getLastChild(),    checkLevelForProp);    	non-compiled	[CE]  	91	None	replace
675	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  1  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped!=  1  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	62	2	replace
676	[BUG]  [BUGGY]  if(propsSkipped!=  1  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  1  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  1  ||  propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	62	2	replace
677	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  null);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY,  null);	  Property    prop    =    propertiesToErrorFor(rootType.toString(),    INVALIDATION_PROPERTY);    	non-compiled	[CE]  	114	None	replace
678	[BUG]  [BUGGY]  if(propsSkipped  <  0  ||  singleTypeProps.length  ==  0)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  <  0  ||  singleTypeProps.length  ==  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  <  0  ||  singleTypeProps.length  ==  0)  {	  if(singleTypeProps.length    ==    0)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
679	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  1  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  1  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  1  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
680	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  2  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  2  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  2  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
681	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  4  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  ==  4  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  4  ||  propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
682	[BUG]  [BUGGY]  if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  properties.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsRenamed.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  ')'  expected	103	None	replace
683	[BUG]  [BUGGY]  if(!singleTypeProps.length  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.length  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.length  ||  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
684	[BUG]  [BUGGY]  if(!singleTypeProps.length  ||  propsSkipped.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!singleTypeProps.length  ||  propsSkipped.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.length  ||  propsSkipped.length  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(!singleTypeProps.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	74	None	replace
685	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties)  {  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToErrorForProperties)  {	  if(propsSkipped    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	64	None	replace
686	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  syntacticTypes.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  syntacticTypes.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  syntacticTypes.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
687	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  props.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&  props.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  props.skipRenaming)  {	  if(propsSkipped!=    null    &&    singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
688	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.name.size()  ];  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.name.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.name.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.typesToSkip.size()    ];    	non-compiled	[CE]  	126	None	replace
689	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip.size()  ];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.typesToSkip.size()    ];    	non-compiled	[CE]  	126	None	replace
690	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  *  2];  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  *  2];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  *  2];	  JSTypeNative[]    props    =    new    JSTypeNative[propsSkipped.size()    ];    	non-compiled	[CE]  	2	None	replace
691	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  convention);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention,  convention);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention,  convention);	  NodeTraversal.traverse(compiler,    rootType,    codingConvention);    	non-compiled	[CE]  	132	None	replace
692	[BUG]  [BUGGY]  if(propNames.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  propNames  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propNames.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propNames.contains(singleTypeProps))  {	  if(props.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  propNames	99	None	replace
693	[BUG]  [BUGGY]  if(properties.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(properties.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(properties.contains(singleTypeProps))  {	  if(props.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
694	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.singleTypeProps);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  prop.singleTypeProps);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  prop.singleTypeProps);	  Property    prop    =    getProperty(prop.name,    prop);    	non-compiled	[CE]  	134	None	replace
695	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.propsSkipped);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.propsSkipped);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  prop.propsSkipped);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
696	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.name);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  prop.name);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
697	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.types);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.types);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  prop.types);	  NodeTraversal.traverse(compiler,    rootType,    this);    	non-compiled	[CE]  	80	None	replace
698	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(!prop.skipRenaming)  {	  if(!renameProperties.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	123	2	replace
699	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!prop.skipRenaming)  {	  if(!renameProperties.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	123	2	replace
700	[BUG]  [BUGGY]  if(prop.singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  singleTypeProps  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkip.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	108	None	replace
701	[BUG]  [BUGGY]  if(!props.skipRenaming)  {  [CE]  cannot  find  symbol  props  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(!props.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!props.skipRenaming)  {	  if(!singleTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  props	122	None	replace
702	[BUG]  [BUGGY]  JSTypeNative[]  propertyToErrorFor  =  new  JSTypeNative[size()  ];  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propertyToErrorFor  =  new  JSTypeNative[size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertyToErrorFor  =  new  JSTypeNative[size()  ];	  JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    *    2];    	non-compiled	[CE]  	5	None	replace
703	[BUG]  [BUGGY]  Node  prop  =  node.removeFirstChild(),  checkLevelForProp;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.removeFirstChild(),  checkLevelForProp;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.removeFirstChild(),  checkLevelForProp;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
704	[BUG]  [BUGGY]  Node  prop  =  node.getFirstChild()  ||  checkLevelForProp;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getFirstChild()  ||  checkLevelForProp;  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getFirstChild()  ||  checkLevelForProp;	  Node    prop    =    node.getLastChild(),    checkLevelForProp;    	non-compiled	[CE]  	92	None	replace
705	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  propertyNames);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  propertyNames);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp,  propertyNames);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
706	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  Props.NAME_PROPERTY);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp,  Props.NAME_PROPERTY);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp,  Props.NAME_PROPERTY);	  Node    prop    =    node.getNext(),    checkLevelForProp);    	non-compiled	[CE]  	84	None	replace
707	[BUG]  [BUGGY]  if(prop.singleTypeProps.contains(prop.skipped))  {  [CE]  cannot  find  symbol  skipped  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.singleTypeProps.contains(prop.skipped))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.contains(prop.skipped))  {	  if(prop.singleTypeProps.contains(singleTypeProps))    {    	non-compiled	[CE]  cannot  find  symbol  skipped	101	None	replace
708	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propNames,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  getProperty(prop.name,  propNames,  null);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propNames,  null);	  Property    prop    =    getProperty(prop.name,    propNames);    	non-compiled	[CE]  	136	None	replace
709	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.getInstanceType());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.getInstanceType());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem.getInstanceType());	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
710	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.types);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.types);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem.types);	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
711	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.getTypeRegistry());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem.getTypeRegistry());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem.getTypeRegistry());	  Property    prop    =    propertiesToErrorFor(node,    typeSystem);    	non-compiled	[CE]  	95	None	replace
712	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];  [CE]  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propsSkip.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
713	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propNames.size()  ];  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propNames.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[propNames.size()  ];	  JSTypeNative[]    propsToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	150	None	replace
714	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps,  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(singleTypeProps,  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(singleTypeProps,  true);	  Property    prop    =    propertiesToErrorFor(node,    true);    	non-compiled	[CE]  	97	None	replace
715	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  propNames);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  propNames);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE,  propNames);	  Property    prop    =    propertiesToErrorFor(node,    INVALIDATION_ON_TYPE);    	non-compiled	[CE]  	140	None	replace
716	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.PROP);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.PROP);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.PROP);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
717	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.PROP_PROP);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Node  prop  =  node.getProp(Node.PROP_PROP);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.PROP_PROP);	  Node    prop    =    node.getProp(Node.SOURCENAME_PROP);    	non-compiled	[CE]  	82	None	replace
718	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  true);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]),  true);	  Property    prop    =    propertiesToErrorFor(properties.toString(),    false);    	non-compiled	[CE]  	159	None	replace
719	[BUG]  [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	30	None	replace
720	[BUG]  [BUGGY]  if(uniqueTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {  [CE]  cannot  find  symbol  uniqueTypeProps  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(uniqueTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(uniqueTypeProps  ==  null  ||  propsSkipped.skipRenaming)  {	  if(propsSkipped    ==    null    &&    uniqueTypeProps.skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  uniqueTypeProps	133	None	replace
721	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes,  false);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootTypes,  false);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootTypes,  false);	  Property    prop    =    propertiesToErrorFor(rootType,    false);    	non-compiled	[CE]  	11	None	replace
722	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.skipped);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.skipped);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  prop.skipped);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
723	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.type);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  prop.type);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  prop.type);	  NodeTraversal.traverse(compiler,    rootType,    tt);    	non-compiled	[CE]  	79	None	replace
724	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippedRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippedRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skippedRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
725	[BUG]  [BUGGY]  if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	36	None	replace
726	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&!singleTypeProps)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(singleTypeProps!=  null  &&!singleTypeProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&!singleTypeProps)  {	  if(!singleTypeProps)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	121	None	replace
727	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
728	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  ';'  expected	70	None	replace
729	[BUG]  [BUGGY]  if(propsSkipped.size()!=  2  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()!=  2  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  2  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
730	[BUG]  [BUGGY]  if(propsSkipped.size()!=  1  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()!=  1  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  1  &&  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
731	[BUG]  [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()!=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	31	None	replace
732	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];	  JSTypeNative[]    props    =    new    JSTypeNative[prop.types.size()    ];    	non-compiled	[CE]  	90	None	replace
733	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propertiesToSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	replace
734	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]));  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties.toArray(new  Property[properties.size()  ]));	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
735	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString());  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propNames.toString());	  Property    prop    =    propertiesToErrorFor(node.toString());    	non-compiled	[CE]  	41	None	replace
736	[BUG]  [BUGGY]  if(propNames.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propNames  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propNames.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propNames.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(props.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propNames	29	None	replace
737	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	34	2	replace
738	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  0)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  0)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsSkipped  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	34	2	replace
739	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
740	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  uniqueTypeProps)  {	  if(singleTypeProps!=    null    &&    propsSkipped)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	156	None	replace
741	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propertyNames,  name);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(propertyNames,  name);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propertyNames,  name);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
742	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(prop.name,  rootType);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(prop.name,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(prop.name,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    name);    	non-compiled	[CE]  	13	None	replace
743	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name)||  propertiesToErrorForProperties.contains(prop.name))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
744	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name)&&  propsSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsRenamed.contains(prop.name)&&  propsSkipped.contains(prop.name))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name)&&  propsSkipped.contains(prop.name))  {	  if(propsRenamed.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	100	None	replace
745	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(registered,  rootType);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(registered,  rootType);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(registered,  rootType);	  Property    prop    =    propertiesToErrorFor(rootType,    registry);    	non-compiled	[CE]  	110	None	replace
746	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  typeSystem);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(properties,  typeSystem);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties,  typeSystem);	  Property    prop    =    propertiesToErrorFor(rootType,    typeSystem);    	non-compiled	[CE]  	12	None	replace
747	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  logger);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  logger);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  typeSystem,  logger);	  Property    prop    =    propertiesToErrorFor(rootType,    typeSystem);    	non-compiled	[CE]  	12	None	replace
748	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsSkipped)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsSkipped)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsSkipped)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
749	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsRenamed)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsRenamed)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propsRenamed)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
750	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propertiesRenamed)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propertiesRenamed)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  propertiesRenamed)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	15	None	replace
751	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties,  propertiesToError);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties,  propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameProperties,  propertiesToError);	  NodeTraversal.traverse(compiler,    rootType,    renameProperties);    	non-compiled	[CE]  	131	None	replace
752	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  prop.skipRenaming  ||!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  prop.skipRenaming  ||!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  prop.skipRenaming  ||!skipRenaming)  {	  if(propsSkipped!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
753	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  0  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
754	[BUG]  [BUGGY]  if(propsSkipped  >  0  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped  >  0  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  0  ||  propsRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    propsRenamed    >    0)    {    	compilable	  [FE]  ComparisonFailure  	149	2	replace
755	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.toArray(new  JSTypeNative[propsToSkip.size()  ]);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.toArray(new  JSTypeNative[propsToSkip.size()  ]);  [BUGGY]      if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.toArray(new  JSTypeNative[propsToSkip.size()  ]);	  JSTypeNative[]    props    =    new    JSTypeNative[propsToSkip.size()    ];    	non-compiled	[CE]  	127	None	replace
756	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&!skipRenaming)  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&!skipRenaming)  {	  if(propsSkipped!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	65	None	replace
757	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped.contains(singleTypeProps))  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {      [BUGGY]  if(propsSkipped!=  null  &&  propsSkipped.contains(singleTypeProps))  {  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  propsSkipped.contains(singleTypeProps))  {	  if(propsSkipped!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	65	None	replace
