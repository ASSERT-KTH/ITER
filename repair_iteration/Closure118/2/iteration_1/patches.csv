bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  ];  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[props.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[props.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[typesToSkip.size()    ];    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  ];  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsSkipped.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[typesToSkip.size()    ];    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  +  1];  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  +  1];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  +  1];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  1];  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  1];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  -  1];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  2];  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  2];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  *  2];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  if(propsSkipped  ==  null  &&  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  null  &&  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  &&  prop.skipRenaming)  {	  if(singleTypeProps    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
7	[BUG]  [BUGGY]  if(propsSkipped  ==  null  &&  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  null  &&  singleTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  &&  singleTypeProps.skipRenaming)  {	  if(singleTypeProps    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
8	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||  prop.skipRenaming)  {	  if(singleTypeProps    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
9	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null  &&  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.skipRenaming  ==  null  &&  singleTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  ==  null  &&  singleTypeProps.skipRenaming)  {	  if(singleTypeProps    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	17	None	replace
10	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  tt);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  tt);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  false);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  false);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
12	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  typeSystem);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  typeSystem);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
13	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  name);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  name);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  name);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
14	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
15	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
16	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
17	[BUG]  [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  props  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  props	1	None	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
19	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  &&  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
20	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	22	None	replace
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
22	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
23	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
24	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	compilable	  [FE]  ComparisonFailure  	22	2	replace
25	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsSkipped.size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  ];  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[props.size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  ];  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.length  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
29	[BUG]  [BUGGY]  if(props.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  props  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(props.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  props	4	None	replace
30	[BUG]  [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
31	[BUG]  [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
32	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
33	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  ';'  expected	19	None	add
34	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
35	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
36	[BUG]  [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
37	[BUG]  [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  props  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  props	5	None	replace
38	[BUG]  [BUGGY]  if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	5	None	replace
39	[BUG]  [BUGGY]  if(singleTypePropsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  singleTypePropsSize  [FE]                      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypePropsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypePropsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSize	5	None	replace
40	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  name);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  name);	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString());  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString());	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  null);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  null);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  null);	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName());  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getName());	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  true);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  true);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  false);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node.toString(),  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node.toString(),  false);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
46	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  checkLevelForProp);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
47	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  true);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  true);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  false,  true);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
48	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  rootType);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  rootType);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
49	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  newName);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  newName);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  newName);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  name);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  name);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  name);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  null);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  null);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  null);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  null  &&  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  prop.skipRenaming)  {	  if(singleTypeProps!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
53	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  null  &&  singleTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  singleTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
54	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null  &&  singleTypeProps.skipRenaming)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.skipRenaming!=  null  &&  singleTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming!=  null  &&  singleTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	2	None	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
56	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
58	[BUG]  [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
60	[BUG]  [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
62	[BUG]  [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
63	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
64	[BUG]  [BUGGY]  if(propsSkipped  >  0)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
65	[BUG]  [BUGGY]  if(propsSkipped!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  null)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
66	[BUG]  [BUGGY]  if(propsSkipped  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  null)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
67	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps  ==  null)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
68	[BUG]  [BUGGY]  if(singleTypeProps.length  ==  0)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps.length  ==  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.length  ==  0)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	18	None	replace
69	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
70	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    If(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  ';'  expected	21	None	add
71	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  Prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
72	[BUG]  [BUGGY]  if(!changed)  {  [CE]  cannot  find  symbol  changed  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!changed)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!changed)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  changed	3	None	replace
73	[BUG]  [BUGGY]  if(!singleTypePropsSkipped)  {  [CE]  cannot  find  symbol  singleTypePropsSkipped  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!singleTypePropsSkipped)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypePropsSkipped)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  singleTypePropsSkipped	3	None	replace
74	[BUG]  [BUGGY]  if(!singleTypeProps.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!singleTypeProps.length)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.length)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
75	[BUG]  [BUGGY]  if(!singleTypeProps.isSkipped())  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!singleTypeProps.isSkipped())  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.isSkipped())  {	  if(!skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
76	[BUG]  [BUGGY]  if(!renamePropsSkipped)  {  [CE]  cannot  find  symbol  renamePropsSkipped  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!renamePropsSkipped)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!renamePropsSkipped)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  renamePropsSkipped	3	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameNodes);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameNodes);	      	non-compiled	[CE]  	6	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties());  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FindExternProperties());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  node,  new  FindExternProperties());	      	non-compiled	[CE]  	6	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  tt);	      	non-compiled	[CE]  	6	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  this);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  this);	      	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindExternProperties());  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindExternProperties());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  tt,  new  FindExternProperties());	      	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.getProp(Node.SOURCENAME_PROP);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getProp(Node.SOURCENAME_PROP);	      Node    prop    =    node.getNext();    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  Node  prop  =  node.getParent();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.getParent();  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getParent();	      Node    prop    =    node.getNext();    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.getNext(),  checkLevelForProp);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getNext(),  checkLevelForProp);	      Node    prop    =    node.getNext();    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  if(propsSkipped.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.contains(singleTypeProps.name))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(singleTypeProps.name))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
86	[BUG]  [BUGGY]  if(props.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(props.contains(singleTypeProps.name))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(singleTypeProps.name))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
87	[BUG]  [BUGGY]  if(propsSkipped.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped.contains(prop.name))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped.contains(prop.name))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
88	[BUG]  [BUGGY]  if(prop.name.contains(singleTypeProps))  {  [CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.name.contains(singleTypeProps))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.name.contains(singleTypeProps))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;	23	None	replace
89	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  ];  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propNames.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[types.size()    ];    	non-compiled	[CE]  	12	None	replace
90	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  ];  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.types.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[types.size()    ];    	non-compiled	[CE]  	12	None	replace
91	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp);	      Node    prop    =    node.getLastChild();    	non-compiled	[CE]  	14	None	replace
92	[BUG]  [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.getLastChild(),  checkLevelForProp;  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.getLastChild(),  checkLevelForProp;	      Node    prop    =    node.getLastChild();    	non-compiled	[CE]  	14	None	replace
93	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProp);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
94	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  name);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  name);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  name);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
95	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  typeSystem);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  typeSystem);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
96	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  false);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  false);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
97	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  true);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  true);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  true);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
98	[BUG]  [BUGGY]  Node  prop  =  node.removeFirstChild();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.removeFirstChild();  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.removeFirstChild();	      Node    prop    =    node.getFirstChild();    	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  if(props.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  props  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(props.contains(singleTypeProps))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(props.contains(singleTypeProps))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  cannot  find  symbol  props	23	None	replace
100	[BUG]  [BUGGY]  if(propsRenamed.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsRenamed.contains(prop.name))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.contains(prop.name))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
101	[BUG]  [BUGGY]  if(prop.singleTypeProps.contains(singleTypeProps))  {  [CE]  cannot  find  symbol  singleTypeProps  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.singleTypeProps.contains(singleTypeProps))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.contains(singleTypeProps))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	23	None	replace
102	[BUG]  [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  cannot  find  symbol  propsSkip  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  propsSkip	5	None	replace
103	[BUG]  [BUGGY]  if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
104	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  false);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.getName(),  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.getName(),  false);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
105	[BUG]  [BUGGY]  Property  prop  =  getProperty(node.name);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(node.name);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(node.name);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
106	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[propsRenamed.size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
107	[BUG]  [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  ];  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[properties.size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
108	[BUG]  [BUGGY]  if(propsSkip.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSkip  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkip.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkip.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSkip	4	None	replace
109	[BUG]  [BUGGY]  if(propsSize.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSize  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSize.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSize.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSize	4	None	replace
110	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  registry);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType,  registry);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType,  registry);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
111	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(invalidatingTypes);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(invalidatingTypes);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(invalidatingTypes);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
112	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_ProPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
113	[BUG]  [BUGGY]  Node  prop  =  node.next();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.next();  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.next();	      Node    prop    =    node.getLastChild();    	non-compiled	[CE]  	14	None	replace
114	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  INVALIDATION_PROPERTY);	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
115	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_WARNINGS_PER_PROPERTY);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
116	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  rootType);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  rootType);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  rootType);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
117	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  checkLevelForProps);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
118	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  codingConvention);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  codingConvention);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  codingConvention);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
119	[BUG]  [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSkip  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkip.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSkip	1	None	replace
120	[BUG]  [BUGGY]  if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  cannot  find  symbol  propsSize  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSize.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  cannot  find  symbol  propsSize	1	None	replace
121	[BUG]  [BUGGY]  if(!singleTypeProps)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!singleTypeProps)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	3	None	replace
122	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!singleTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!singleTypeProps.skipRenaming)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
123	[BUG]  [BUGGY]  if(!renameProperties.skipRenaming)  {  [CE]  cannot  find  symbol  renameProperties  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!renameProperties.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!renameProperties.skipRenaming)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  renameProperties	3	None	replace
124	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  ];  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[properties.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[types.size()    ];    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped!=  null  &&  uniqueTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped!=  null  &&  uniqueTypeProps.skipRenaming)  {	  if(singleTypeProps!=    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
126	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  ];  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.typesToSkip.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[typesToSkip.size()    ];    	non-compiled	[CE]  	9	None	replace
127	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  ];  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[propsToSkip.size()  ];	      JSTypeNative[]    props    =    new    JSTypeNative[typesToSkip.size()    ];    	non-compiled	[CE]  	9	None	replace
128	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||!skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  ||!skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  ||!skipRenaming)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties());  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindRenameableProperties());	      	non-compiled	[CE]  	6	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties());  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  new  FindExternProperties());	      	non-compiled	[CE]  	6	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  renameProperties);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  renameProperties);	      	non-compiled	[CE]  	6	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  codingConvention);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	NodeTraversal.traverse(compiler,  rootType,  codingConvention);	      	non-compiled	[CE]  	6	None	replace
133	[BUG]  [BUGGY]  if(propsSkipped  ==  null  &&  uniqueTypeProps.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  ==  null  &&  uniqueTypeProps.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  ==  null  &&  uniqueTypeProps.skipRenaming)  {	  if(singleTypeProps    ==    null    &&    prop.skipRenaming)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
134	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  prop);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  prop);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  prop);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
135	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  propsSkipped);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propsSkipped);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
136	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  propNames);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  propNames);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  propNames);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
137	[BUG]  [BUGGY]  Property  prop  =  getProperty(prop.name,  PROPERTY);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  getProperty(prop.name,  PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  getProperty(prop.name,  PROPERTY);	      Property    prop    =    getProperty(prop.name);    	non-compiled	[CE]  	15	None	replace
138	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  PROPERTY);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(rootType.toString(),  PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(rootType.toString(),  PROPERTY);	      Property    prop    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  	13	None	replace
139	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_PROPERTY);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
140	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  INVALIDATION_ON_TYPE);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
141	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  PROPERTY);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(node,  PROPERTY);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(node,  PROPERTY);	      Property    prop    =    propertiesToErrorFor(node);    	non-compiled	[CE]  	24	None	replace
142	[BUG]  [BUGGY]  if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    skipRenaming)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
143	[BUG]  [BUGGY]  if(prop.singleTypeProps.contains(singleTypeProps.name))  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.singleTypeProps.contains(singleTypeProps.name))  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.singleTypeProps.contains(singleTypeProps.name))  {	  if(singleTypeProps.contains(prop.name))    {    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
144	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  ];  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[size()    ];    	non-compiled	[CE]  	10	None	replace
145	[BUG]  [BUGGY]  if(!propsSkipped)  {  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!propsSkipped)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!propsSkipped)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	3	None	replace
146	[BUG]  [BUGGY]  if(!skipRenaming  ||!propsSkipped)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(!skipRenaming  ||!propsSkipped)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming  ||!propsSkipped)  {	  if(!skipRenaming)    {    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	3	None	replace
147	[BUG]  [BUGGY]  if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
148	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
149	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  propsRenamed  >  0)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	compilable	  [FE]  ComparisonFailure  	20	2	replace
150	[BUG]  [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];  [CE]  [FE]        ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  propsToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];	      JSTypeNative[]    propertiesToErrorFor    =    new    JSTypeNative[singleTypeProps.size()    ];    	non-compiled	[CE]  	7	None	replace
151	[BUG]  [BUGGY]  Node  prop  =  node.cloneTree();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  prop  =  node.cloneTree();  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  prop  =  node.cloneTree();	      Node    prop    =    node.getLastChild();    	non-compiled	[CE]  	14	None	replace
152	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	22	None	replace
153	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
154	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
155	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
156	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(singleTypeProps!=  null  &&  propsSkipped)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  propsSkipped)  {	  if(singleTypeProps!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
157	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  false);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.toString(),  false);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
158	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString(),  false);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(propNames.toString(),  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(propNames.toString(),  false);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
159	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toString(),  false);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(properties.toString(),  false);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties.toString(),  false);	      Property    prop    =    propertiesToErrorFor(rootType.toString(),    false);    	non-compiled	[CE]  	25	None	replace
160	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY    ||    prop.skipRenaming)    {    if(propsSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
161	[BUG]  [BUGGY]  if(propsSkipped,  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  if(propsSkipped,  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped,  singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	  if(singleTypeProps.size()    ==    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
162	[BUG]  [BUGGY]  Node  propsSkip  =  node.getParent();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Node  propsSkip  =  node.getParent();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Node  propsSkip  =  node.getParent();	      	non-compiled	[CE]  	6	None	replace
163	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  ];  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[size()  ];  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[size()  ];	      	non-compiled	[CE]  	6	None	replace
164	[BUG]  [BUGGY]  Collections.sort(properties);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Collections.sort(properties);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Collections.sort(properties);	      	non-compiled	[CE]  	6	None	replace
165	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
166	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry());  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(typeSystem.getTypeRegistry());	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
167	[BUG]  [BUGGY]  Property  prop  =  propertiesToErrorFor(properties);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {    [BUGGY]  Property  prop  =  propertiesToErrorFor(properties);  [BUGGY]    if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	Property  prop  =  propertiesToErrorFor(properties);	      Property    prop    =    propertiesToErrorFor(rootType);    	non-compiled	[CE]  	16	None	replace
