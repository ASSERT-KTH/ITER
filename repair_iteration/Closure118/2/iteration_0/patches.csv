bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
2	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps!=  null  &&  prop.skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null  &&  prop.skipRenaming)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
3	[BUG]  [BUGGY]  if(!skipRenaming)  {  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(!skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(!skipRenaming)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  cannot  find  symbol  skipRenaming	3	None	replace
4	[BUG]  [BUGGY]  if(singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
5	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  skipRenaming)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
6	[BUG]  [BUGGY]    [CE]  [FE]              ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	  	if  (prop.skipRenaming)  {  	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[singleTypeProps.size()  ];		non-compiled	[CE]  int  cannot  be  dereferenced	4	None	add
8	[BUG]  [BUGGY]    Node  prop  =  node.getFirstChild();  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Node  prop  =  node.getFirstChild();  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Node  prop  =  node.getFirstChild();		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
9	[BUG]  [BUGGY]    JSTypeNative[]  props  =  new  JSTypeNative[typesToSkip.size()  ];  [CE]  cannot  find  symbol  typesToSkip  [FE]        ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    JSTypeNative[]  props  =  new  JSTypeNative[typesToSkip.size()  ];  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    JSTypeNative[]  props  =  new  JSTypeNative[typesToSkip.size()  ];		non-compiled	[CE]  cannot  find  symbol  typesToSkip	4	None	add
10	[BUG]  [BUGGY]    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  ];  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  ];  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    JSTypeNative[]  propertiesToErrorFor  =  new  JSTypeNative[size()  ];		non-compiled	[CE]  cannot  find  symbol	4	None	add
11	[BUG]  [BUGGY]    Node  prop  =  node.getNext();  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Node  prop  =  node.getNext();  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Node  prop  =  node.getNext();		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
12	[BUG]  [BUGGY]    JSTypeNative[]  props  =  new  JSTypeNative[types.size()  ];  [CE]  cannot  find  symbol  types  [FE]              ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    JSTypeNative[]  props  =  new  JSTypeNative[types.size()  ];  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    JSTypeNative[]  props  =  new  JSTypeNative[types.size()  ];		non-compiled	[CE]  cannot  find  symbol  types	4	None	add
13	[BUG]  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType.toString());  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType.toString());  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Property  prop  =  propertiesToErrorFor(rootType.toString());		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
14	[BUG]  [BUGGY]    Node  prop  =  node.getLastChild();  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Node  prop  =  node.getLastChild();  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Node  prop  =  node.getLastChild();		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
15	[BUG]  [BUGGY]    Property  prop  =  getProperty(prop.name);  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Property  prop  =  getProperty(prop.name);  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Property  prop  =  getProperty(prop.name);		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
16	[BUG]  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType);  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType);  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Property  prop  =  propertiesToErrorFor(rootType);		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
17	[BUG]  [BUGGY]  if(singleTypeProps  ==  null  &&  prop.skipRenaming)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps  ==  null  &&  prop.skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps  ==  null  &&  prop.skipRenaming)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
18	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps!=  null)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps!=  null)  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	if  (prop.skipRenaming)  {  	compilable	  [FE]  ComparisonFailure  	3	2	replace
20	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {	if  (prop.skipRenaming)  {  	compilable	  [FE]  ComparisonFailure  	3	2	replace
21	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	if  (prop.skipRenaming)  {  	compilable	  [FE]  ComparisonFailure  	3	2	replace
22	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  prop.skipRenaming)  {	if  (prop.skipRenaming)  {  	compilable	  [FE]  ComparisonFailure  	3	2	replace
23	[BUG]  [BUGGY]  if(singleTypeProps.contains(prop.name))  {  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]  if(singleTypeProps.contains(prop.name))  {  [BUGGY]  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	if(singleTypeProps.contains(prop.name))  {	if  (prop.skipRenaming)  {  	non-compiled	[CE]  int  cannot  be  dereferenced	3	None	replace
24	[BUG]  [BUGGY]    Property  prop  =  propertiesToErrorFor(node);  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]    ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Property  prop  =  propertiesToErrorFor(node);  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Property  prop  =  propertiesToErrorFor(node);		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
25	[BUG]  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType.toString(),  false);  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure  [CONTEXT]  reported.add(prop.name);  compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   " "));  }  }  }  }  else  {  [BUGGY]    Property  prop  =  propertiesToErrorFor(rootType.toString(),  false);  [BUGGY]  if  (prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	    Property  prop  =  propertiesToErrorFor(rootType.toString(),  false);		non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	4	None	add
