bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] ++propsSkipped; [FE] ComparisonFailure [CONTEXT] compiler.report(JSError.make( NodeUtil.getSourceName(node), node, checkLevelForProp, Warnings.INVALIDATION_ON_TYPE, prop.name, rootType.toString(), "")); } } } } else { if (prop.skipRenaming) { [BUGGY] ++propsSkipped; [BUGGY] } else { ++singleTypeProps; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] compiler.report(JSError.make( NodeUtil.getSourceName(node), node, checkLevelForProp, Warnings.INVALIDATION_ON_TYPE, prop.name, rootType.toString(), "")); } } } } else { if (prop.skipRenaming) { [BUGGY] [BUGGY] ++propsSkipped; } else { ++singleTypeProps; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	
3	[BUG] [BUGGY] if (prop.skipRenaming) { [FE] ComparisonFailure [CONTEXT] reported.add(prop.name); compiler.report(JSError.make( NodeUtil.getSourceName(node), node, checkLevelForProp, Warnings.INVALIDATION_ON_TYPE, prop.name, rootType.toString(), "")); } } } } else { [BUGGY] if (prop.skipRenaming) { [BUGGY] ++propsSkipped; } else { ++singleTypeProps; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] reported.add(prop.name); compiler.report(JSError.make( NodeUtil.getSourceName(node), node, checkLevelForProp, Warnings.INVALIDATION_ON_TYPE, prop.name, rootType.toString(), "")); } } } } else { [BUGGY] [BUGGY] if (prop.skipRenaming) { ++propsSkipped; } else { ++singleTypeProps; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18107149208503706	608	608	2	add	
5	[BUG] [BUGGY] TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, [BUGGY] TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { [BUGGY] this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	303	303	2	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, [BUGGY] [BUGGY] TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	303	303	2	add	
7	[BUG] [BUGGY] private Map<String, Property> properties = Maps.newHashMap(); [FE] ComparisonFailure [CONTEXT] [BUGGY] private Map<String, Property> properties = Maps.newHashMap(); [BUGGY]  [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [VARIABLES] 	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	281	281	2	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] [BUGGY] [BUGGY] private Map<String, Property> properties = Maps.newHashMap(); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [VARIABLES] 	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	281	281	2	add	
9	[BUG] [BUGGY] this.compiler = compiler; [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { [BUGGY] this.compiler = compiler; [BUGGY] this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	304	304	2	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { [BUGGY] [BUGGY] this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	304	304	2	add	
11	[BUG] [BUGGY] this.typeSystem = typeSystem; [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; [BUGGY] this.typeSystem = typeSystem; [BUGGY] this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	305	305	2	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; [BUGGY] [BUGGY] this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	305	305	2	add	
13	[BUG] [BUGGY] this.propertiesToErrorFor = propertiesToErrorFor; [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; [BUGGY] this.propertiesToErrorFor = propertiesToErrorFor; [BUGGY] if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	306	306	2	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; [BUGGY] [BUGGY] this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	306	306	2	add	
15	[BUG] [BUGGY] if (!this.propertiesToErrorFor.isEmpty()) { [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; [BUGGY] if (!this.propertiesToErrorFor.isEmpty()) { [BUGGY] this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	307	307	2	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; [BUGGY] [BUGGY] if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	307	307	2	add	
17	[BUG] [BUGGY] this.invalidationMap = LinkedHashMultimap.create(); [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { [BUGGY] this.invalidationMap = LinkedHashMultimap.create(); [BUGGY] } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	308	308	2	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { [BUGGY] [BUGGY] this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	308	308	2	add	
19	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } [BUGGY] } [BUGGY]  [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	312	312	2	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private DisambiguateProperties(AbstractCompiler compiler, TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) { this.compiler = compiler; this.typeSystem = typeSystem; this.propertiesToErrorFor = propertiesToErrorFor; if (!this.propertiesToErrorFor.isEmpty()) { this.invalidationMap = LinkedHashMultimap.create(); } else { this.invalidationMap = null; } [BUGGY] [BUGGY] } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] <init> [RETURN_TYPE] Map)  AbstractCompiler compiler TypeSystem<T> typeSystem CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set invalidatingTypes renameNodes typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY nextUniqueId TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	312	312	2	add	
21	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10; [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [VARIABLES] 	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	83	83	2	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10; [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem  [VARIABLES] 	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	83	83	2	add	
23	[BUG] [BUGGY] return new DisambiguateProperties<JSType>( compiler, new JSTypeSystem(compiler), propertiesToErrorFor); [FE] ComparisonFailure [CONTEXT] static DisambiguateProperties<JSType> forJSTypeSystem( AbstractCompiler compiler, Map<String, CheckLevel> propertiesToErrorFor) { [BUGGY] return new DisambiguateProperties<JSType>(  compiler, new JSTypeSystem(compiler), propertiesToErrorFor); [BUGGY] compiler, new JSTypeSystem(compiler), propertiesToErrorFor); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] forJSTypeSystem [RETURN_TYPE] DisambiguateProperties  AbstractCompiler compiler CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	286	287	2	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] static DisambiguateProperties<JSType> forJSTypeSystem( AbstractCompiler compiler, Map<String, CheckLevel> propertiesToErrorFor) { [BUGGY] [BUGGY] return new DisambiguateProperties<JSType>(  compiler, new JSTypeSystem(compiler), propertiesToErrorFor); compiler, new JSTypeSystem(compiler), propertiesToErrorFor); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] forJSTypeSystem [RETURN_TYPE] DisambiguateProperties  AbstractCompiler compiler CheckLevel> propertiesToErrorFor [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	286	287	2	add	
25	[BUG] [BUGGY] Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { [BUGGY] Preconditions.checkState(  compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); [BUGGY] compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	316	317	2	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] Preconditions.checkState(  compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	316	317	2	add	
27	[BUG] [BUGGY] for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); [BUGGY] for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { [BUGGY] addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	318	318	2	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); [BUGGY] [BUGGY] for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	318	318	2	add	
29	[BUG] [BUGGY] NodeTraversal.traverse(compiler, externs, new FindExternProperties()); [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } [BUGGY] NodeTraversal.traverse(compiler, externs, new FindExternProperties()); [BUGGY] NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	323	323	2	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	323	323	2	add	
31	[BUG] [BUGGY] NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); [BUGGY] NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); [BUGGY] renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	324	324	2	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	324	324	2	add	
33	[BUG] [BUGGY] renameProperties(); [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); [BUGGY] renameProperties(); [BUGGY] } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	325	325	2	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] public void process(Node externs, Node root) { Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); [BUGGY] [BUGGY] renameProperties(); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	325	325	2	add	
35	[BUG] [BUGGY] } [FE] ComparisonFailure [CONTEXT] Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); [BUGGY] } [BUGGY]  [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	326	326	2	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] Preconditions.checkState( compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED); for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) { addInvalidatingType(mis.typeA, mis.src); addInvalidatingType(mis.typeB, mis.src); } NodeTraversal.traverse(compiler, externs, new FindExternProperties()); NodeTraversal.traverse(compiler, root, new FindRenameableProperties()); renameProperties(); [BUGGY] [BUGGY] } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip Node externs root UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes TypeMismatch mis  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	326	326	2	add	
37	[BUG] [BUGGY] if (!properties.containsKey(name)) { [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { [BUGGY] if (!properties.containsKey(name)) { [BUGGY] properties.put(name, new Property(name)); } return properties.get(name); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	363	363	2	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { [BUGGY] [BUGGY] if (!properties.containsKey(name)) { properties.put(name, new Property(name)); } return properties.get(name); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	363	363	2	add	
39	[BUG] [BUGGY] properties.put(name, new Property(name)); [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { if (!properties.containsKey(name)) { [BUGGY] properties.put(name, new Property(name)); [BUGGY] } return properties.get(name); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	364	364	2	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { if (!properties.containsKey(name)) { [BUGGY] [BUGGY] properties.put(name, new Property(name)); } return properties.get(name); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	364	364	2	add	
41	[BUG] [BUGGY] return properties.get(name); [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { if (!properties.containsKey(name)) { properties.put(name, new Property(name)); } [BUGGY] return properties.get(name); [BUGGY] } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	366	366	2	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] protected Property getProperty(String name) { if (!properties.containsKey(name)) { properties.put(name, new Property(name)); } [BUGGY] [BUGGY] return properties.get(name); } [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] getProperty [RETURN_TYPE] DisambiguateProperties$Property  String name [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes rootTypesToSkip typesToSkip UnionFind types String name Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count nextUniqueId originalTypesSize TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map properties propertiesToErrorFor rootTypes  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	366	366	2	add	
43	[BUG] [BUGGY] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0; [FE] ComparisonFailure [CONTEXT] void renameProperties() { [BUGGY] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,  instancesSkipped = 0, singleTypeProps = 0; [BUGGY] instancesSkipped = 0, singleTypeProps = 0; Set<String> reported = Sets.newHashSet(); for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	574	575	2	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void renameProperties() { [BUGGY] [BUGGY] int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,  instancesSkipped = 0, singleTypeProps = 0; instancesSkipped = 0, singleTypeProps = 0; Set<String> reported = Sets.newHashSet(); for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	574	575	2	add	
45	[BUG] [BUGGY] instancesSkipped = 0, singleTypeProps = 0; [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, [BUGGY] instancesSkipped = 0, singleTypeProps = 0; [BUGGY]  Set<String> reported = Sets.newHashSet(); for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	575	575	2	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, [BUGGY] [BUGGY] instancesSkipped = 0, singleTypeProps = 0; Set<String> reported = Sets.newHashSet(); for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	575	575	2	add	
47	[BUG] [BUGGY] Set<String> reported = Sets.newHashSet(); [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0; [BUGGY] Set<String> reported = Sets.newHashSet(); [BUGGY] for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); if (prop.shouldRename(rootType)) { String newName = propNames.get(rootType); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	577	577	2	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0; [BUGGY] [BUGGY] Set<String> reported = Sets.newHashSet(); for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); if (prop.shouldRename(rootType)) { String newName = propNames.get(rootType); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	577	577	2	add	
49	[BUG] [BUGGY] for (Property prop : properties.values()) { [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0; Set<String> reported = Sets.newHashSet(); [BUGGY] for (Property prop : properties.values()) { [BUGGY] if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); if (prop.shouldRename(rootType)) { String newName = propNames.get(rootType); node.setString(newName); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	578	578	2	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] void renameProperties() { int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0, instancesSkipped = 0, singleTypeProps = 0; Set<String> reported = Sets.newHashSet(); [BUGGY] [BUGGY] for (Property prop : properties.values()) { if (prop.shouldRename()) { Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name); ++propsRenamed; prop.expandTypesToSkip(); for (Node node : prop.renameNodes) { T rootType = prop.rootTypes.get(node); if (prop.shouldRename(rootType)) { String newName = propNames.get(rootType); node.setString(newName); [CLASS] DisambiguateProperties Warnings Property AbstractScopingCallback FindExternProperties FindRenameableProperties JSTypeSystem ConcreteTypeSystem [METHOD] renameProperties [RETURN_TYPE] void  [VARIABLES] TypeSystem typeSystem Set allTypes invalidatingTypes newTypesToSkip renameNodes reported rootTypesToSkip typesToSkip CheckLevel checkLevelForProp Node node UnionFind types String field name newName qName suggestion Logger logger int MAX_INVALDIATION_WARNINGS_PER_PROPERTY count instancesRenamed instancesSkipped nextUniqueId originalTypesSize propsRenamed propsSkipped singleTypeProps TightenTypes tt Stack scopes Multimap invalidationMap AbstractCompiler compiler JSTypeRegistry registry boolean changed skipRenaming T rootType DiagnosticType INVALIDATION INVALIDATION_ON_TYPE CodingConvention codingConvention convention JSTypeNative[] nativeTypes Map propNames properties propertiesToErrorFor rootTypes Property prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.1796053020267749	578	578	2	add	
