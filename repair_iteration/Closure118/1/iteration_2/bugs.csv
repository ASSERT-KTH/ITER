bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++propsRenamed;    ++propsRenamed;	  	compilable	  [FE]  ComparisonFailure  	6	2	add
2	[BUG]  [BUGGY]  ++propsRenamed;  ++propsRenamed;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    ++propsRenamed;	  	compilable	  [FE]  ComparisonFailure  	6	2	add
3	[BUG]  [BUGGY]  ++propsRenamed;  ||!prop.skipRenaming)  {  ++propsRenamed;  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  ||!prop.skipRenaming)  {  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    ||!prop.skipRenaming)  {  ++propsRenamed;	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
4	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
5	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
6	[BUG]  [BUGGY]  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
7	[BUG]  [BUGGY]  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    int  propsRenamed  =  getSingleTypeProps().size();	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
8	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	17	2	add
9	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	17	2	add
10	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	17	2	add
11	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	17	2	add
12	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	17	None	add
13	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	17	None	add
14	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incompatible  types	17	None	add
15	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getTypes();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.getTypes();	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	22	None	replace
16	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming;  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming;	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  incompatible  types	22	None	replace
17	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames;  [CE]  cannot  find  symbol  propertyNames  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyNames;	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertyNames	22	None	replace
18	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getProperties();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.getProperties();	      JSTypeNative[]    props    =    prop.typesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	24	None	replace
19	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties();	      JSTypeNative[]    props    =    prop.typesToSkip.getProperties();    	non-compiled	[CE]  ';'  expected	24	None	replace
20	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.getProperties();  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypesToSkip.getProperties();	      JSTypeNative[]    props    =    prop.typesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	24	None	replace
21	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties.getProperties();  [CE]  cannot  find  symbol  properties  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.properties.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	23	None	replace
22	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties;  [CE]  cannot  find  symbol  properties  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.properties;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties;	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	23	None	replace
23	[BUG]  [BUGGY]  JSTypeNative[]  props  =  this.properties.getProperties();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  this.properties.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  this.properties.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
24	[BUG]  [BUGGY]  JSTypeNative[]  props  =  parent.getProperties();  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  parent.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  parent.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  parent	23	None	replace
25	[BUG]  [BUGGY]  if(!changed)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  changed  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!changed)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!changed)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  changed	5	None	replace
26	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
27	[BUG]  [BUGGY]  if(!singleTypeProps)  {  ++propsSkipped;  }  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!singleTypeProps)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	5	None	replace
28	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	5	None	replace
29	[BUG]  [BUGGY]  ++prop.skipRenaming;  [CE]  bad  operand  type  boolean  for  unary  operator  '++'  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++prop.skipRenaming;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++prop.skipRenaming;	  ++propsRenamed;    	non-compiled	[CE]  bad  operand  type  boolean  for  unary  operator  '++'	7	None	replace
30	[BUG]  [BUGGY]  ++skipRenaming;  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++skipRenaming;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++skipRenaming;	  ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	7	None	replace
31	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming);  [CE]  cannot  find  symbol  Collections  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.skipRenaming);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	25	None	replace
32	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming);  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.properties,  skipRenaming);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  properties	25	None	replace
33	[BUG]  [BUGGY]  Collections.sort(prop.properties,  tt);  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.properties,  tt);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  tt);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  properties	25	None	replace
34	[BUG]  [BUGGY]  Collections.sort(this.properties);  [CE]  cannot  find  symbol  Collections  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(this.properties);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this.properties);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	25	None	replace
35	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypes.findTypes();  [CE]  cannot  find  symbol  rootTypes  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  rootTypes.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypes.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  rootTypes	26	None	replace
36	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
37	[BUG]  [BUGGY]  JSTypeNative[]  props  =  parent.findTypes();  [CE]  cannot  find  symbol  parent  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  parent.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  parent.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  parent	26	None	replace
38	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.findTypes();  [CE]  cannot  find  symbol  propertyNames  [FE]                      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyNames.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertyNames	26	None	replace
39	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.values();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.values();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.values();	      JSTypeNative[]    props    =    prop.typesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	27	None	replace
40	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.values();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.values();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.values();	      JSTypeNative[]    props    =    prop.typesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
41	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.values();  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.values();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypesToSkip.values();	      JSTypeNative[]    props    =    prop.typesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	27	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  rootType  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  rootType	11	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));  [CE]  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  ';'  expected	10	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	16	None	replace
49	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
51	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
52	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	16	None	replace
53	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
54	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
55	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
57	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
58	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesSkipped;    	compilable	  [FE]  IllegalArgumentException  	2	60	replace
59	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesSkipped;    	compilable	  [FE]  IllegalArgumentException  	2	60	replace
60	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
61	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
62	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	5	replace
63	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	5	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	13	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  rootType  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  rootType	13	None	replace
66	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	      	non-compiled	[CE]  cannot  find  symbol  node	9	None	replace
67	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	      	non-compiled	[CE]  cannot  find  symbol  node	9	None	replace
68	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  ++singleTypeProps;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++singleTypeProps;    ++singleTypeProps;	  	compilable	  [FE]  ComparisonFailure  	3	2	add
69	[BUG]  [BUGGY]  ++singleTypeProps;  ++singleTypeProps;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  ++singleTypeProps;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    ++singleTypeProps;	  	compilable	  [FE]  ComparisonFailure  	3	2	add
70	[BUG]  [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);	  	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	3	None	add
71	[BUG]  [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());	  	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	3	None	add
72	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	3	None	add
73	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  node);  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  node);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming,  node);	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
74	[BUG]  [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    int  singleTypeProps  =  propertiesToErrorFor(prop.name);	  	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	3	None	add
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  ++instancesSkipped;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++instancesSkipped;    ++instancesSkipped;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
76	[BUG]  [BUGGY]  ++instancesSkipped;  ++instancesSkipped;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  ++instancesSkipped;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    ++instancesSkipped;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
77	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
78	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
79	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
80	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
81	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
82	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  }	  ++singleTypeProps;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
83	[BUG]  [BUGGY]  if(singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.length  >  0)  {  ++singleTypeProps;  }	  ++singleTypeProps;    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
84	[BUG]  [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	21	None	replace
85	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
86	[BUG]  [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	21	None	replace
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
88	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	15	2	add
89	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	15	None	add
90	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippingRenaming  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skippingRenaming	15	None	add
91	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	15	None	add
92	[BUG]  [BUGGY]  timeout  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	timeout	15	1	add
93	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  timeout  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	timeout	15	1	add
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");  [CE]  cannot  find  symbol  rootType  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  rootType	14	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  tt);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  tt);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  tt);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  rootType  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  rootType	20	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
101	[BUG]  [BUGGY]      Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]      Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	        Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	8	None	add
102	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
103	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
104	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	5	2	replace
105	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	5	2	replace
106	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
107	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
108	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
109	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  ';'  expected	10	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  	10	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/ "));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/ "));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/ "));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  	10	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	13	None	replace
114	[BUG]  [BUGGY]  Collections.sort(prop.propertiesToError);  [CE]  cannot  find  symbol  propertiesToError  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.propertiesToError);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.propertiesToError);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	25	None	replace
115	[BUG]  [BUGGY]  Collections.sort(properties);  [CE]  cannot  find  symbol  Collections  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(properties);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(properties);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	25	None	replace
116	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	      	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	9	None	replace
117	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	      	non-compiled	[CE]  ')'  expected	9	None	replace
118	[BUG]  [BUGGY]  ++singleTypeProps  +  1;  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps  +  1;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps  +  1;	  ++singleTypeProps;    	non-compiled	[CE]  not  a  statement	4	None	replace
119	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
120	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
121	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.getProperties();  [CE]  cannot  find  symbol  propertyNames  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyNames.getProperties();	      JSTypeNative[]    props    =    prop.typesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertyNames	24	None	replace
122	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.getTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.getTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProp.getTypes();	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	22	None	replace
123	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError;  [CE]  cannot  find  symbol  propertiesToError  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToError;	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	22	None	replace
124	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToError();	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
125	[BUG]  [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  	3	None	add
126	[BUG]  [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
127	[BUG]  [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
128	[BUG]  [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  	3	None	add
129	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++instancesRenamed;	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
130	[BUG]  [BUGGY]  ++instancesRenamed;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;	  ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
131	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++instancesSkipped;    	compilable	  [FE]  IllegalStateException  	2	60	replace
132	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++instancesSkipped;    	compilable	  [FE]  IllegalStateException  	2	60	replace
133	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    InstancesSkipped  ++instancesSkipped;	  	non-compiled	[CE]  ';'  expected	1	None	add
134	[BUG]  [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Node  instancesSkipped  =  getInstancesSkipped(node);	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	1	None	add
135	[BUG]  [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	1	None	add
136	[BUG]  [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Node  instancesSkipped  =  prop.getInstancesSkipped();	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	1	None	add
137	[BUG]  [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	1	None	add
138	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.values();  [CE]  cannot  find  symbol  propertyNames  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames.values();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyNames.values();	      JSTypeNative[]    props    =    prop.typesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertyNames	27	None	replace
139	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	16	None	replace
140	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
141	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
142	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	16	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [CE]  cannot  find  symbol  rootType  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   ");    	non-compiled	[CE]  cannot  find  symbol  rootType	12	None	replace
144	[BUG]  [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	21	None	replace
145	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorArray  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorArray	23	None	replace
146	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.getProperties();  [CE]  cannot  find  symbol  propertiesToErrors  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	23	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	20	None	replace
148	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getProperty(prop.skipRenaming);	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
149	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getPropertiesRenamed(node);	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
150	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
151	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getProperty(prop.name);	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
152	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
153	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.findTypes();  [CE]  cannot  find  symbol  propertiesToError  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToError.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	26	None	replace
154	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorFor  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorFor.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorFor	26	None	replace
155	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.types.findTypes();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.types.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.types.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
156	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.values();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.values();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.values();	      JSTypeNative[]    props    =    prop.typesToSkip.values();    	non-compiled	[CE]  ';'  expected	27	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
158	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
159	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	7	2	replace
160	[BUG]  [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);	  	non-compiled	[CE]  ')'  expected	1	None	add
161	[BUG]  [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	1	None	add
162	[BUG]  [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	1	None	add
163	[BUG]  [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(), "   "));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(), "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(), "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	1	None	add
164	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming);  [CE]  cannot  find  symbol  properties  [FE]              ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming);	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  properties	25	None	replace
165	[BUG]  [BUGGY]  Collections.sort(prop.properties,  new  Property());  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  Collections.sort(prop.properties,  new  Property());  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  new  Property());	      Collections.sort(prop.properties);    	non-compiled	[CE]  cannot  find  symbol  properties	25	None	replace
166	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propers.getProperties();  [CE]  cannot  find  symbol  propers  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propers.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propers.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propers	23	None	replace
167	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorMap.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorMap  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorMap.getProperties();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorMap.getProperties();	      JSTypeNative[]    props    =    prop.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorMap	23	None	replace
168	[BUG]  [BUGGY]  if(!prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!prop.skipped)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipped)  {  ++propsSkipped;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	5	None	replace
169	[BUG]  [BUGGY]      Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]      Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	        Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));	  	non-compiled	[CE]  cannot  find  symbol  node	8	None	add
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  cannot  find  symbol  node	10	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));	      NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "   "));    	non-compiled	[CE]  ';'  expected	10	None	replace
173	[BUG]  [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	21	None	replace
174	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties;  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProperties;	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	22	None	replace
175	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp;  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProp;	      JSTypeNative[]    props    =    prop.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	22	None	replace
176	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip.properties;  [CE]  cannot  find  symbol  properties  [FE]            ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip.properties;  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip.properties;	      JSTypeNative[]    props    =    prop.typesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	24	None	replace
177	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  ++instancesSkipped;    	non-compiled	[CE]  int  cannot  be  dereferenced	2	None	replace
178	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(propsSkipped)  {  ++propsSkipped;  }  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(propsSkipped)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)  {  ++propsSkipped;  }	  	non-compiled	[CE]  incompatible  types	15	None	add
179	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
180	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
182	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	4	2	replace
183	[BUG]  [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
184	[BUG]  [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
185	[BUG]  [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	  	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
186	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
187	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
188	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	16	None	replace
189	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
190	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	16	2	replace
191	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	18	None	replace
192	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	18	None	replace
193	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	18	2	replace
194	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	18	2	replace
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	18	2	replace
196	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	18	2	replace
197	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]                ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProp.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	26	None	replace
198	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]                  ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	26	None	replace
199	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties.findTypes();  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.properties.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  properties	26	None	replace
200	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorMap.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorMap  [FE]                      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorMap.findTypes();  [BUGGY]    ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorMap.findTypes();	      JSTypeNative[]    props    =    prop.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorMap	26	None	replace
201	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]    ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
202	[BUG]  [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]    compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),     "   "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {    [BUGGY]  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [BUGGY]    }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;    Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	add
