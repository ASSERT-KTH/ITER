bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ++invalidatingTypeProps;  [CE]  cannot  find  symbol  invalidatingTypeProps  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++invalidatingTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++invalidatingTypeProps;	  ++skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  invalidatingTypeProps	30	None	replace
2	[BUG]  [BUGGY]  ++this.skipRenaming;  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++this.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++this.skipRenaming;	  ++skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	30	None	replace
3	[BUG]  [BUGGY]  ++invalidationMap;  [CE]  bad  operand  type  Multimap<Object,JSError>  for  unary  operator  '++'  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++invalidationMap;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++invalidationMap;	  ++skipRenaming;    	non-compiled	[CE]  bad  operand  type  Multimap<Object,JSError>  for  unary  operator  '++'	30	None	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsRenamed;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
5	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsRenamed;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsRenamed;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
6	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  int  propsRenamed;  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  int  propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    int  propsRenamed;  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	1	None	add
7	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsSkipped;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
8	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsSkipped;  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsSkipped;	  	compilable	  [FE]  ComparisonFailure  	1	2	add
9	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsNamed;  [CE]  cannot  find  symbol  propsNamed  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsNamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsNamed;	  	non-compiled	[CE]  cannot  find  symbol  propsNamed	1	None	add
10	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsInformed;  [CE]  cannot  find  symbol  propsInformed  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsInformed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsInformed;	  	non-compiled	[CE]  cannot  find  symbol  propsInformed	1	None	add
11	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	70	None	replace
12	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	70	None	replace
13	[BUG]  [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	70	None	replace
14	[BUG]  [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Integer  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	70	None	replace
15	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming,  tt);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming,  tt);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming,  tt);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	70	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestion);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestion);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestion);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  node	95	None	replace
18	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++singleTypeProps;  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++singleTypeProps;	  ++propsRenamed;    ||!prop.skipRenaming)    {    ++propsRenamed;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++propsRenamed;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++propsRenamed;	  ++propsRenamed;    ||!prop.skipRenaming)    {    ++propsRenamed;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkipped;  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++propsSkipped;	  ++propsRenamed;    ||!prop.skipRenaming)    {    ++propsRenamed;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(changed)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  changed  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(changed)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(changed)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  changed	48	None	replace
22	[BUG]  [BUGGY]  if(singleTypeProps)  {  ++singleTypeProps;  }  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incompatible  types	48	None	replace
23	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
24	[BUG]  [BUGGY]  nisipeToSkip)  {  ++singleTypeProps;  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  nisipeToSkip)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	nisipeToSkip)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	108	2	add
26	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	108	2	add
27	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenamed  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenamed	108	None	add
28	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	108	2	add
29	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	108	2	add
30	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenamed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenamed  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenamed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenamed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenamed	108	None	add
31	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	108	None	add
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  	113	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
35	[BUG]  [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	178	None	replace
36	[BUG]  [BUGGY]  propsSkipped  =  prop.skipRenaming;  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  =  prop.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped  =  prop.skipRenaming;	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  incompatible  types	178	None	replace
37	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  if(props.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  if(props.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  else  if(props.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	178	None	replace
38	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.findTypes();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorFor.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
39	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typesToSkip.findTypes();  [CE]  cannot  find  symbol  typesToSkip  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typesToSkip.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typesToSkip.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol  typesToSkip	35	None	replace
40	[BUG]  [BUGGY]  JSTypeNative[]  props  =  registry.findTypes();  [CE]  cannot  find  symbol  registry  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  registry.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  registry.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol  registry	35	None	replace
41	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.getProperties();	  JSTypeNative[]    props    =    rootTypesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
42	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.getProperties();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorFor.getProperties();	  JSTypeNative[]    props    =    rootTypesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
43	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypes.getProperties();  [CE]  cannot  find  symbol  rootTypes  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootTypes.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypes.getProperties();	  JSTypeNative[]    props    =    rootTypesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  rootTypes	20	None	replace
44	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.getProperties();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.rootTypes.getProperties();	  JSTypeNative[]    props    =    rootTypesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
45	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
46	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
47	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }	  	non-compiled	[CE]  	58	None	add
48	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	58	None	add
49	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	80	None	replace
50	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
51	[BUG]  [BUGGY]  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  node	80	None	replace
52	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propers.getProperties();  [CE]  package  rootType  does  not  exist  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propers.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propers.getProperties();	  JSTypeNative[]    props    =    prop.propers.getProperties();    	non-compiled	[CE]  package  rootType  does  not  exist	166	None	replace
53	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propers.getProperties();  [CE]  package  property  does  not  exist  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propers.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propers.getProperties();	  JSTypeNative[]    props    =    prop.propers.getProperties();    	non-compiled	[CE]  package  property  does  not  exist	166	None	replace
54	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  ||  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	83	None	replace
55	[BUG]  [BUGGY]  if(singleTypeProps.length  >  1)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.length  >  1)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.length  >  1)  {  ++singleTypeProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
56	[BUG]  [BUGGY]  if(singleTypeProps.length  >  0  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.length  >  0  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.length  >  0  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
57	[BUG]  [BUGGY]  if(prop.singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps.length  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	83	None	replace
58	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	162	None	replace
59	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	162	None	replace
60	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	162	None	replace
61	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	141	2	replace
62	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	141	2	replace
63	[BUG]  [BUGGY]  if(skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	141	None	replace
64	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
65	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	185	None	replace
66	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  illegal  start  of  expression	185	None	replace
67	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  illegal  start  of  expression	185	None	replace
68	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  cannot  find  symbol  node	185	None	replace
69	[BUG]  [BUGGY]  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
70	[BUG]  [BUGGY]  int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
71	[BUG]  [BUGGY]  int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  initialTypesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  ';'  expected	57	None	replace
72	[BUG]  [BUGGY]  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  not  a  statement	57	None	replace
73	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	78	None	replace
74	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
75	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
76	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.name,  checkLevelForProp,  node);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.name,  checkLevelForProp,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.name,  checkLevelForProp,  node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
77	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
78	[BUG]  [BUGGY]  if(!propsSkipped.skipRenaming)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!propsSkipped.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!propsSkipped.skipRenaming)  {  ++singleTypeProps;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
79	[BUG]  [BUGGY]  if(!props.skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  props  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!props.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!props.skipRenaming)  {  ++singleTypeProps;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	26	None	replace
80	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	26	2	replace
81	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	26	2	replace
82	[BUG]  [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    <    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	86	None	replace
83	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  skipRenaming  =  prop.skipRenaming?  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  :  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	int  skipRenaming  =  prop.skipRenaming?  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  :  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;	  if(prop.skipRenaming    <    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	86	2	replace
84	[BUG]  [BUGGY]  int  skipRenaming  =  prop.skipRenaming?  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  :  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  skipRenaming  =  prop.skipRenaming?  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  :  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  skipRenaming  =  prop.skipRenaming?  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  :  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;	  if(prop.skipRenaming    <    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	86	2	replace
85	[BUG]  [BUGGY]  Node  instancesSkipped  =  prop.getInstancesSkipped();  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  prop.getInstancesSkipped();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  prop.getInstancesSkipped();	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	136	None	replace
86	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	136	None	replace
87	[BUG]  [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	136	None	replace
88	[BUG]  [BUGGY]  if(instancesSkipped  >=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  }	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	136	None	replace
89	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;  Node  instancesSkipped  =  prop.getInstancesSkipped();	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	136	None	replace
90	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.getTypes();  [CE]  package  rootType  does  not  exist  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	122	None	replace
91	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.getTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	122	None	replace
92	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.getTypes();  [CE]  package  property  does  not  exist  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToSkip.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  package  property  does  not  exist	122	None	replace
93	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorSystem.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorSystem  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorSystem.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorSystem.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrorArray.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorSystem	145	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  newName));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  newName));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  newName));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  ';'  expected	46	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  newName));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  newName));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  newName));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  ';'  expected	46	None	replace
96	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	53	None	replace
97	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.findTypes();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorFor.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	154	None	replace
98	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorFor.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorFor.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorFor.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorFor.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	154	None	replace
99	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipFor.findTypes();  [CE]  cannot  find  symbol  propertiesToSkipFor  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipFor.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipFor.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorFor.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipFor	154	None	replace
100	[BUG]  [BUGGY]  JSTypeNative[]  props  =  parent.propertiesToErrorFor.findTypes();  [CE]  package  parent  does  not  exist  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  parent.propertiesToErrorFor.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  parent.propertiesToErrorFor.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorFor.findTypes();    	non-compiled	[CE]  package  parent  does  not  exist	154	None	replace
101	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
102	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
103	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	152	None	replace
104	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
105	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	152	None	replace
106	[BUG]  [BUGGY]  ||!singleTypeProps)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!singleTypeProps)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!singleTypeProps)  {  ++propsSkipped;  }	  if(!singleTypeProps)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
107	[BUG]  [BUGGY]  if(!singleTypeProps)  {  ++instancesSkipped;  }  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!singleTypeProps)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps)  {  ++instancesSkipped;  }	  if(!singleTypeProps)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	27	None	replace
108	[BUG]  [BUGGY]  propsSkipped  ++singleTypeProps;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped  ++singleTypeProps;	  if(!singleTypeProps)    {    ++propsSkipped;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
113	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors;  [CE]  cannot  find  symbol  propertiesToErrors  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors;	  JSTypeNative[]    props    =    prop.propertiesToErrors.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	146	None	replace
114	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrors.getProperties();  [CE]  package  rootType  does  not  exist  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrors.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrors.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrors.getProperties();    	non-compiled	[CE]  package  rootType  does  not  exist	146	None	replace
115	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	135	None	replace
116	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	135	None	replace
117	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	135	None	replace
118	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	135	None	replace
119	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  tt);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  tt);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  tt);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	135	None	replace
120	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.name);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	74	None	replace
121	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.name);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	74	None	replace
122	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.name);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.name);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	74	None	replace
123	[BUG]  [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(prop.name);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Integer  singleTypeProps  =  propertiesToErrorFor(prop.name);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.name);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	74	None	replace
124	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	125	None	replace
125	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.values();  [CE]  cannot  find  symbol  propertiesToError  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToError.values();	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	39	None	replace
126	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip;  [CE]  cannot  find  symbol  propertiesToSkip  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip;	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	39	None	replace
127	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	5	replace
128	[BUG]  [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	5	replace
129	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	5	replace
130	[BUG]  [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	5	replace
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
132	[BUG]  [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
134	[BUG]  [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
135	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	4	None	replace
136	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	4	None	replace
137	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
138	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
139	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	4	None	replace
140	[BUG]  [BUGGY]  Collections.sort(prop.properties,  tt,  skipRenaming);  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  tt,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  tt,  skipRenaming);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  properties	33	None	replace
141	[BUG]  [BUGGY]  Collections.sort(tt,  prop.properties);  [CE]  cannot  find  symbol  tt  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(tt,  prop.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(tt,  prop.properties);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  tt	33	None	replace
142	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  tt);  [CE]  cannot  find  symbol  tt  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  tt);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  tt	33	None	replace
143	[BUG]  [BUGGY]  Collections.sort(rootTypeProps,  tt);  [CE]  cannot  find  symbol  rootTypeProps  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(rootTypeProps,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(rootTypeProps,  tt);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  rootTypeProps	33	None	replace
144	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming!=  null)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	139	None	replace
145	[BUG]  [BUGGY]  if(propsSkipped!=  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped!=  null)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	139	None	replace
146	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ==  null)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	139	None	replace
147	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++singleTypeProps;  }	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
148	[BUG]  [BUGGY]  PropsSkipped  <!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  PropsSkipped  <!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	PropsSkipped  <!prop.skipRenaming)  {  ++propsSkipped;  }	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
149	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	105	2	replace
150	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	105	2	replace
151	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToError.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToError.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToError.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToError.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	153	None	replace
152	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToError.findTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToError.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.propertiesToError.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToError.findTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	153	None	replace
153	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.getProperties();  [CE]  package  property  does  not  exist  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToSkip.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getProperties();    	non-compiled	[CE]  package  property  does  not  exist	18	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString());  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString());  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString());  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  a.toString());  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  a.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  a.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    this);    	non-compiled	[CE]  cannot  find  symbol  rootType	64	None	replace
159	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesRenamed;  }	  ++instancesRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	130	None	replace
160	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	130	None	replace
161	[BUG]  [BUGGY]  ++instancesRenamed  +  1;  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed  +  1;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed  +  1;	  ++instancesRenamed;    	non-compiled	[CE]  not  a  statement	130	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString());    	non-compiled	[CE]  cannot  find  symbol  node	157	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [CE]  cannot  find  symbol  rootType  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString());    	non-compiled	[CE]  cannot  find  symbol  rootType	157	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString());  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString());    	non-compiled	[CE]  cannot  find  symbol  node	157	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  rootType	43	None	replace
167	[BUG]  [BUGGY]  ||(singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
168	[BUG]  [BUGGY]  ||(singleTypeProps!=  null  &&  prop.singleTypeProps.length  >  0)||(singleTypeProps.length  >  0))  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(singleTypeProps!=  null  &&  prop.singleTypeProps.length  >  0)||(singleTypeProps.length  >  0))  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(singleTypeProps!=  null  &&  prop.singleTypeProps.length  >  0)||(singleTypeProps.length  >  0))  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
169	[BUG]  [BUGGY]  ||(singleTypeProps!=  null  &&  prop.singleTypeProps.contains(singleTypeProps)))  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(singleTypeProps!=  null  &&  prop.singleTypeProps.contains(singleTypeProps)))  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(singleTypeProps!=  null  &&  prop.singleTypeProps.contains(singleTypeProps)))  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
170	[BUG]  [BUGGY]  if(!changed)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  changed  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!changed)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!changed)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  changed	28	None	replace
171	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps.skipRenaming)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	28	None	replace
172	[BUG]  [BUGGY]  if(!renamePropsSkipped)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  renamePropsSkipped  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!renamePropsSkipped)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!renamePropsSkipped)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  renamePropsSkipped	28	None	replace
173	[BUG]  [BUGGY]  if(!transient)  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!transient)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!transient)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
174	[BUG]  [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	177	None	replace
175	[BUG]  [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	177	None	replace
176	[BUG]  [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	177	None	replace
177	[BUG]  [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	177	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
182	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  newName));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  cannot  find  symbol  node	67	None	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++instancesRenamed;    ++instancesRenamed;	  	compilable	  [FE]  ComparisonFailure  	129	2	add
184	[BUG]  [BUGGY]  ++instancesRenamed;  ++instancesRenamed;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    ++instancesRenamed;	  	compilable	  [FE]  ComparisonFailure  	129	2	add
185	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.getInstancesRenamed();  ++instancesRenamed;  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.getInstancesRenamed();  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Node  instancesRenamed  =  prop.getInstancesRenamed();  ++instancesRenamed;	  	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	129	None	add
186	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(node);  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Node  instancesRenamed  =  prop.findInstancesRenamed(node);	  	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	129	None	add
187	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(rootType.toString());  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Node  instancesRenamed  =  prop.findInstancesRenamed(rootType.toString());	  	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	129	None	add
188	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  getInstancesRenamed(node);  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  getInstancesRenamed(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Node  instancesRenamed  =  getInstancesRenamed(node);	  	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	129	None	add
189	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(instancesToSkip);  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesRenamed  =  prop.findInstancesRenamed(instancesToSkip);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Node  instancesRenamed  =  prop.findInstancesRenamed(instancesToSkip);	  	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	129	None	add
190	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
191	[BUG]  [BUGGY]  if(prop.skippingRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippingRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skippingRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skippingRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skippingRenaming	90	None	replace
192	[BUG]  [BUGGY]  propsSkipped;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped;	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
193	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	85	None	replace
194	[BUG]  [BUGGY]  if(nextUniqueId  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  nextUniqueId  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(nextUniqueId  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(nextUniqueId  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  nextUniqueId	85	None	replace
195	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	55	None	replace
196	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  this));  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  this));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  this));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	55	None	replace
197	[BUG]  [BUGGY]  Collections.sort(this.properties,  prop.skipRenaming);  [CE]  cannot  find  symbol  Collections  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(this.properties,  prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this.properties,  prop.skipRenaming);	  Collections.sort(this.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	34	None	replace
198	[BUG]  [BUGGY]  Collections.sort(prop,  this.properties);  [CE]  cannot  find  symbol  Collections  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop,  this.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop,  this.properties);	  Collections.sort(this.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	34	None	replace
199	[BUG]  [BUGGY]  Collections.sort(namesToSkip,  this.properties);  [CE]  cannot  find  symbol  namesToSkip  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(namesToSkip,  this.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(namesToSkip,  this.properties);	  Collections.sort(this.properties);    	non-compiled	[CE]  cannot  find  symbol  namesToSkip	34	None	replace
200	[BUG]  [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	196	None	replace
201	[BUG]  [BUGGY]  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  true);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  true);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  true);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  properties.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
205	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
206	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
207	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
208	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
209	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.reportCodeChange();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.reportCodeChange();	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  Context	12	None	replace
210	[BUG]  [BUGGY]  if(skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
211	[BUG]  [BUGGY]  parent.skipRenaming  =  prop.skipRenaming;  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  parent.skipRenaming  =  prop.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	parent.skipRenaming  =  prop.skipRenaming;	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
212	[BUG]  [BUGGY]  Context.checkState(!skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(!skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(!skipRenaming);	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	12	None	replace
213	[BUG]  [BUGGY]  &&!skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  &&!skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	&&!skipRenaming)  {  ++propsSkipped;  }	  if(!changed)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
214	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsRenamed;    }    if(prop.skipRenaming)  {  ++propsRenamed;  }	  	compilable	  [FE]  ComparisonFailure  	106	2	add
215	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    if(prop.skipRenaming)  {  ++propsRenamed;  }	  	compilable	  [FE]  ComparisonFailure  	106	2	add
216	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenamed  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    if(prop.skipRenamed)  {  ++propsRenamed;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenamed	106	None	add
217	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    If(prop.skipRenaming)  {  ++propsRenamed;  }	  	non-compiled	[CE]  ';'  expected	106	None	add
218	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(propsRenamed)  {  ++propsRenamed;  }  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(propsRenamed)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    if(propsRenamed)  {  ++propsRenamed;  }	  	non-compiled	[CE]  incompatible  types	106	None	add
219	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	72	None	replace
220	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  tt);  [CE]  cannot  find  symbol  tt  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  tt);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  tt);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  tt	72	None	replace
221	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  node);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  node);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
222	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  typeSystem);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  typeSystem);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  typeSystem);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	72	None	replace
223	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  parent);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  parent);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  parent	72	None	replace
224	[BUG]  [BUGGY]  if(!prop.skipped)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipped)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipped)  {  ++singleTypeProps;  }	  if(!prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	168	None	replace
225	[BUG]  [BUGGY]  if(!propsSkipped)  {  ++propsSkipped;  }  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!propsSkipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!propsSkipped)  {  ++propsSkipped;  }	  if(!prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	168	None	replace
226	[BUG]  [BUGGY]  if(!prop.skippedRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippedRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skippedRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skippedRenaming)  {  ++propsSkipped;  }	  if(!prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skippedRenaming	168	None	replace
227	[BUG]  [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	144	None	replace
228	[BUG]  [BUGGY]  if(prop.skipRenaming  +  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  +  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  +  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    >=    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	144	None	replace
229	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	137	None	replace
230	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node.getFirstChild());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node.getFirstChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node.getFirstChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	137	None	replace
231	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  incomparable  types:  int  and  <null>	137	None	replace
232	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(prop.getLastChild());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(prop.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(prop.getLastChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	137	None	replace
233	[BUG]  [BUGGY]  Node  instancesRenamed  =  getInstancesSkipped(node.getLastChild());  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesRenamed  =  getInstancesSkipped(node.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesRenamed  =  getInstancesSkipped(node.getLastChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	137	None	replace
234	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties.values();  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.properties.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties.values();	  JSTypeNative[]    props    =    prop.propertyNames.values();    	non-compiled	[CE]  cannot  find  symbol  properties	138	None	replace
235	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.values();  [CE]  cannot  find  symbol  propertyProperties  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyProperties.values();	  JSTypeNative[]    props    =    prop.propertyNames.values();    	non-compiled	[CE]  cannot  find  symbol  propertyProperties	138	None	replace
236	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertyNames();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyNames();	  JSTypeNative[]    props    =    prop.propertyNames.values();    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
237	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	148	None	replace
238	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	148	None	replace
239	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	148	None	replace
240	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++skipRenaming;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++skipRenaming;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++skipRenaming;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	148	None	replace
241	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	148	None	replace
242	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
243	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
244	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  }  [CE]  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  }	  	non-compiled	[CE]  	131	None	add
245	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]        IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	131	None	add
246	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties(prop.typesToSkip);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties(prop.typesToSkip);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.getProperties(prop.typesToSkip);	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
247	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.getRenameableProperties();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.getRenameableProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.getRenameableProperties();	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
248	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.getPropertyNames();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.getPropertyNames();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.getPropertyNames();	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
249	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	201	None	replace
250	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	201	None	replace
251	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	201	None	replace
252	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	201	None	replace
253	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	201	None	replace
254	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(propsSkipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
255	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  parent);  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  parent);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  parent);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming,    node);    	non-compiled	[CE]  cannot  find  symbol  parent	73	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "/   "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "/   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "/   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/* "));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/* "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/* "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "   "));	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	111	None	replace
259	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	150	None	replace
260	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	150	None	replace
261	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	150	None	replace
262	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	150	None	replace
263	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	195	2	add
264	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	195	2	add
265	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	195	None	add
266	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++sINGLETypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  sINGLETypeProps  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++sINGLETypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++sINGLETypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  sINGLETypeProps	195	None	add
267	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }  [CE]  cannot  find  symbol  sINGLETypeProps  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  sINGLETypeProps	195	None	add
268	[BUG]  [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	194	None	replace
269	[BUG]  [BUGGY]  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "* "));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "* "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),   "* "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,    rootType.toString(),       "       "));    	non-compiled	[CE]  	44	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  property.toString(), "   "));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  property.toString(), "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  property.toString(), "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,    rootType.toString(),       "       "));    	non-compiled	[CE]  	44	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  prop.type.toString(), "   "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  prop.type.toString(), "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  prop.type.toString(), "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,    rootType.toString(),       "       "));    	non-compiled	[CE]  	44	None	replace
273	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	69	None	replace
274	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
275	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
276	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
277	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
278	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    ++singleTypeProps;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	69	None	replace
279	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
280	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
281	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	6	None	replace
282	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
283	[BUG]  [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	replace
284	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
285	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	6	None	replace
286	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	193	2	add
287	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	193	2	add
288	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	193	2	add
289	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	193	2	add
290	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	193	None	add
291	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	193	None	add
292	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(propsSkipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(propsSkipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(propsSkipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	193	None	add
293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
294	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
295	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
296	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
297	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	8	None	add
298	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	8	None	add
299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
300	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	8	2	add
301	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.values();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
302	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.values();  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorFor.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  incompatible  types	41	None	replace
303	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typesToSkip.values();  [CE]  cannot  find  symbol  typesToSkip  [FE]                              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typesToSkip.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  typesToSkip	41	None	replace
304	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypes.values();  [CE]  cannot  find  symbol  rootTypes  [FE]                                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootTypes.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypes.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  rootTypes	41	None	replace
305	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
306	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	179	2	add
307	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	179	2	add
308	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	179	None	add
309	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skippedRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skippedRenaming  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skippedRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skippedRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skippedRenaming	179	None	add
310	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	179	2	add
311	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	179	2	add
312	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }  [CE]  cannot  find  symbol  sINGLETypeProps  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++sINGLETypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  sINGLETypeProps	179	None	add
313	[BUG]  [BUGGY]  JSTypeNative[]  props  =  properties.getProperties();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  properties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  properties.getProperties();	  JSTypeNative[]    props    =    this.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
314	[BUG]  [BUGGY]  JSTypeNative[]  props  =  this.properties.getProperties(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  this.properties.getProperties(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  this.properties.getProperties(prop.skipRenaming);	  JSTypeNative[]    props    =    this.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
315	[BUG]  [BUGGY]  JSTypeNative[]  props  =  this.properties.getPropertyNames();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  this.properties.getPropertyNames();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  this.properties.getPropertyNames();	  JSTypeNative[]    props    =    this.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
316	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
317	[BUG]  [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
318	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
319	[BUG]  [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
320	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
321	[BUG]  [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
322	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
323	[BUG]  [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	61	2	replace
324	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  rootType.toString());  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  rootType.toString());	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  rootType	31	None	replace
325	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  typeSystem);  [CE]  cannot  find  symbol  Collections  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  typeSystem);	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  Collections	31	None	replace
326	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  skipRenaming);	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	31	None	replace
327	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  rootType);  [CE]  cannot  find  symbol  rootType  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  rootType);	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  rootType	31	None	replace
328	[BUG]  [BUGGY]  if(singleTypeProps.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	173	None	replace
329	[BUG]  [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	173	None	replace
330	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	173	2	replace
331	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	173	2	replace
332	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.getTypes();  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypesToSkip.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getTypes();    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	15	None	replace
333	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.clone();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.clone();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.clone();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	15	None	replace
334	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  prop.propertiesToError);  [CE]  cannot  find  symbol  propertiesToError  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  prop.propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  prop.propertiesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	114	None	replace
335	[BUG]  [BUGGY]  Collections.sort(rootTypesToSkip,  prop.propertiesToError);  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(rootTypesToSkip,  prop.propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(rootTypesToSkip,  prop.propertiesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	114	None	replace
336	[BUG]  [BUGGY]  Collections.sort(prop.node,  prop.propertiesToError);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.node,  prop.propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.node,  prop.propertiesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  node	114	None	replace
337	[BUG]  [BUGGY]  Collections.sort(prop.typesToSkip,  prop.propertiesToError);  [CE]  cannot  find  symbol  propertiesToError  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.typesToSkip,  prop.propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.typesToSkip,  prop.propertiesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	114	None	replace
338	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	50	2	add
339	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	50	2	add
340	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	50	None	add
341	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    while(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	timeout	50	1	add
342	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming)  {  ++singleTypeProps;  }  timeout  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    while(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	timeout	50	1	add
343	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++soneTypeProps;  }  [CE]  cannot  find  symbol  soneTypeProps  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++soneTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++soneTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  soneTypeProps	50	None	add
344	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.types.findTypes();  [CE]  cannot  find  symbol  types  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.types.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.types.findTypes();	  JSTypeNative[]    props    =    prop.types.findTypes();    	non-compiled	[CE]  cannot  find  symbol  types	155	None	replace
345	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	  Context.report(JSError.make(SourceNameUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	102	None	replace
346	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));	  Context.report(JSError.make(SourceNameUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	102	None	replace
347	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	186	2	add
348	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	186	2	add
349	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	186	None	add
350	[BUG]  [BUGGY]  timeout  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    while(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	timeout	186	1	add
351	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  timeout  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  while(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    while(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	timeout	186	1	add
352	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++soneTypeProps;  }  [CE]  cannot  find  symbol  soneTypeProps  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++soneTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++soneTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  soneTypeProps	186	None	add
353	[BUG]  [BUGGY]  ++singleTypeProps  +  2;  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps  +  2;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps  +  2;	  ++singleTypeProps    +    1;    	non-compiled	[CE]  not  a  statement	118	None	replace
354	[BUG]  [BUGGY]  ++singleTypeProps  +  3;  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps  +  3;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps  +  3;	  ++singleTypeProps    +    1;    	non-compiled	[CE]  not  a  statement	118	None	replace
355	[BUG]  [BUGGY]  ++singleTypeProps  +  4;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps  +  4;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps  +  4;	  ++singleTypeProps    +    1;    	non-compiled	[CE]  not  a  statement	118	None	replace
356	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	59	60	replace
357	[BUG]  [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	59	60	replace
358	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	59	60	replace
359	[BUG]  [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	59	60	replace
360	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	59	2	replace
361	[BUG]  [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	59	2	replace
362	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	59	2	replace
363	[BUG]  [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	59	2	replace
364	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  new  Property());  [CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;	165	None	replace
365	[BUG]  [BUGGY]  Collections.sort(rootTypeProps,  new  Property());  [CE]  cannot  find  symbol  rootTypeProps  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(rootTypeProps,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(rootTypeProps,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  cannot  find  symbol  rootTypeProps	165	None	replace
366	[BUG]  [BUGGY]  Collections.sort(prop.name,  new  Property());  [CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.name,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.name,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;	165	None	replace
367	[BUG]  [BUGGY]  Collections.sort(prop.owner,  new  Property());  [CE]  cannot  find  symbol  owner  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.owner,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.owner,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  cannot  find  symbol  owner	165	None	replace
368	[BUG]  [BUGGY]  if(!changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  changed  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  changed	191	None	replace
369	[BUG]  [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	191	None	replace
370	[BUG]  [BUGGY]  if(!renamed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  renamed  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!renamed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!renamed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  renamed	191	None	replace
371	[BUG]  [BUGGY]  if(!changed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  changed  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!changed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!changed)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  changed	191	None	replace
372	[BUG]  [BUGGY]  propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  not  a  statement	191	None	replace
373	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	5	None	replace
374	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	5	None	replace
375	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
376	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	5	None	replace
377	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  skipRenaming  =  true;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  skipRenaming  =  true;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  skipRenaming  =  true;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	5	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.inVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  rootType  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  rootType	99	None	replace
381	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.properties.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.properties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.properties.findTypes();	  JSTypeNative[]    props    =    prop.properties.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	199	None	replace
382	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.properties.findTypes();  [CE]  package  property  does  not  exist  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.properties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.properties.findTypes();	  JSTypeNative[]    props    =    prop.properties.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	199	None	replace
383	[BUG]  [BUGGY]  JSTypeNative[]  props  =  properties.findTypes();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  properties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  properties.findTypes();	  JSTypeNative[]    props    =    prop.properties.findTypes();    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
384	[BUG]  [BUGGY]  if(propsSkipped  ==  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  ==  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped  ==  null)  {  ++propsSkipped;  }	  if(singleTypeProps    ==    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	142	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "* ");  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "* ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "* ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "* ");  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "* ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "* ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  node	94	None	replace
387	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
388	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
389	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
390	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
391	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  <identifier>  expected	160	None	replace
392	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.findTypes();  [CE]  cannot  find  symbol  propertyProperties  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertyNames.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertyProperties	38	None	replace
393	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertyNames.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertyNames.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertyNames.findTypes();	  JSTypeNative[]    props    =    prop.propertyNames.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	38	None	replace
394	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  }	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Name()));    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	184	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),   "   ");  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),   "   ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),   "   ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       ");    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "   ");  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "   ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),   "   ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       ");    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "   ");  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "   ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),   "   ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       ");    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
398	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorForProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	197	None	replace
399	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProp.findTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	197	None	replace
400	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.propertiesToErrorForProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	197	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  skipRenaming));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  ';'  expected	172	None	replace
402	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	119	2	add
403	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	119	2	add
404	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	119	None	add
405	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	119	None	add
406	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	119	5	add
407	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	119	5	add
408	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  ';'  expected	119	None	add
409	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	183	None	replace
410	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	183	None	replace
411	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.findTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.findTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	200	None	replace
412	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorMap.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorMap.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorMap.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	200	None	replace
413	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorMap.findTypes();  [CE]  package  property  does  not  exist  [FE]                              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorMap.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToErrorMap.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	200	None	replace
414	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }	  ++propsRenamed;    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	2	None	replace
415	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }	  ++propsRenamed;    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	2	None	replace
416	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }	  ++propsRenamed;    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	2	None	replace
417	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
418	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsSkipped;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
419	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++propsRenamed;  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++propsRenamed;  ++propsSkipped;  }	  ++propsRenamed;    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
420	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
421	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	81	None	replace
422	[BUG]  [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	81	None	replace
423	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
424	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.length];  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.length];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.length];	  JSTypeNative[]    props    =    prop.properties;    	non-compiled	[CE]  cannot  find  symbol  properties	22	None	replace
425	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.properties.size()  ];	  JSTypeNative[]    props    =    prop.properties;    	non-compiled	[CE]  cannot  find  symbol  properties	22	None	replace
426	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip;	  JSTypeNative[]    props    =    prop.typesToSkip.properties;    	non-compiled	[CE]  incompatible  types	176	None	replace
427	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.properties;  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootTypesToSkip.properties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootTypesToSkip.properties;	  JSTypeNative[]    props    =    prop.typesToSkip.properties;    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	176	None	replace
428	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
429	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
430	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  }  [CE]  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  }	  	non-compiled	[CE]  	60	None	add
431	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++s  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++s  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++s	  	non-compiled	[CE]  ';'  expected	60	None	add
432	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	60	None	add
433	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps	  	non-compiled	[CE]  ';'  expected	60	None	add
434	[BUG]  [BUGGY]  Collections.sort(properties,  skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(properties,  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(properties,  skipRenaming);	  Collections.sort(properties);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	115	None	replace
435	[BUG]  [BUGGY]  Collections.sort(prop.types);  [CE]  cannot  find  symbol  Collections  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.types);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.types);	  Collections.sort(properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	115	None	replace
436	[BUG]  [BUGGY]  Collections.sort(properties,  tt);  [CE]  cannot  find  symbol  tt  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(properties,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(properties,  tt);	  Collections.sort(properties);    	non-compiled	[CE]  cannot  find  symbol  tt	115	None	replace
437	[BUG]  [BUGGY]  Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	127	None	replace
438	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	127	None	replace
439	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  propsSkipped!=  null)  {  ++propsSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  propsSkipped!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  propsSkipped!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	188	None	replace
440	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	188	None	replace
441	[BUG]  [BUGGY]  if(propsSkipped  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	188	None	replace
442	[BUG]  [BUGGY]  if(props.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  props  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(props.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(props.skipRenaming  ||  prop.skipped!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	188	None	replace
443	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	158	2	add
444	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	158	2	add
445	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  skipRenamed  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenamed	158	None	add
446	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(propsRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incompatible  types  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(propsRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(propsRenamed)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incompatible  types	158	None	add
447	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	158	None	add
448	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
449	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	79	None	replace
450	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.findTypes();  [CE]  cannot  find  symbol  property  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.findTypes();	  JSTypeNative[]    props    =    parent.findTypes();    	non-compiled	[CE]  cannot  find  symbol  property	37	None	replace
451	[BUG]  [BUGGY]  JSTypeNative[]  props  =  node.findTypes();  [CE]  cannot  find  symbol  node  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  node.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  node.findTypes();	  JSTypeNative[]    props    =    parent.findTypes();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
452	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.node.findTypes();  [CE]  cannot  find  symbol  node  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.node.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.node.findTypes();	  JSTypeNative[]    props    =    parent.findTypes();    	non-compiled	[CE]  cannot  find  symbol  node	37	None	replace
453	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  tt);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming,  tt);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
454	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  rootType);  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming,  rootType);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
455	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  typeSystem);  [CE]  cannot  find  symbol  properties  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming,  typeSystem);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
456	[BUG]  [BUGGY]  Collections.sort(skipRenaming,  prop.properties);  [CE]  cannot  find  symbol  skipRenaming  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(skipRenaming,  prop.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(skipRenaming,  prop.properties);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	32	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceName.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  factory.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
461	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	132	60	replace
462	[BUG]  [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	132	60	replace
463	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	132	60	replace
464	[BUG]  [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  IllegalStateException  	132	60	replace
465	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	132	2	replace
466	[BUG]  [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	132	2	replace
467	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	132	2	replace
468	[BUG]  [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]          IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	132	2	replace
469	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	66	None	replace
470	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
471	[BUG]  [BUGGY]  if(invalidatingTypes!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(invalidatingTypes!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(invalidatingTypes!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
472	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(rootType),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [CE]  cannot  find  symbol  rootType  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(rootType),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(rootType),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString()));    	non-compiled	[CE]  cannot  find  symbol  rootType	103	None	replace
473	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString()));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString()));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString()));    	non-compiled	[CE]  cannot  find  symbol  node	103	None	replace
474	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	140	2	add
475	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	140	2	add
476	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	140	None	add
477	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	140	None	add
478	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  for(Node  prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  for(Node  prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    for(Node  prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	140	None	add
479	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;	  	compilable	  [FE]  ComparisonFailure  	68	2	add
480	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;	  	compilable	  [FE]  ComparisonFailure  	68	2	add
481	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps);	  	non-compiled	[CE]  ';'  expected	68	None	add
482	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  int  singleTypeProps;  ++singleTypeProps;  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  int  singleTypeProps;  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    int  singleTypeProps;  ++singleTypeProps;	  	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	68	None	add
483	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++sINGLETypeProps;  [CE]  cannot  find  symbol  sINGLETypeProps  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++sINGLETypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++sINGLETypeProps;	  	non-compiled	[CE]  cannot  find  symbol  sINGLETypeProps	68	None	add
484	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps);  ++singleTypeProps;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps);  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps);  ++singleTypeProps;	  	non-compiled	[CE]  ';'  expected	68	None	add
485	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++soneTypeProps;  [CE]  cannot  find  symbol  soneTypeProps  [FE]              ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++soneTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++soneTypeProps;	  	non-compiled	[CE]  cannot  find  symbol  soneTypeProps	68	None	add
486	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToError()  ];  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToError()  ];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToError()  ];	  JSTypeNative[]    props    =    prop.propertiesToError();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
487	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToError();  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToError();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToError();	  JSTypeNative[]    props    =    prop.propertiesToError();    	non-compiled	[CE]  cannot  find  symbol  rootType	124	None	replace
488	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToError();  [CE]  cannot  find  symbol  property  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToError();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToError();	  JSTypeNative[]    props    =    prop.propertiesToError();    	non-compiled	[CE]  cannot  find  symbol  property	124	None	replace
489	[BUG]  [BUGGY]  if(changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  changed  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(changed)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  changed	192	None	replace
490	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));  [CE]  cannot  find  symbol  sourceName  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  sourceName	192	None	replace
491	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));  [CE]  cannot  find  symbol  sourceName  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(sourceName,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  sourceName	192	None	replace
492	[BUG]  [BUGGY]  Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name));	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  name	192	None	replace
493	[BUG]  [BUGGY]  Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(name,  node,  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  newName));	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  name	192	None	replace
494	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipMap.getProperties();  [CE]  cannot  find  symbol  propertiesToSkipMap  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipMap.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipMap.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipMap	167	None	replace
495	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorMap.getProperties();  [CE]  package  property  does  not  exist  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorMap.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToErrorMap.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.getProperties();    	non-compiled	[CE]  package  property  does  not  exist	167	None	replace
496	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  tt);  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  tt);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
497	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  typeSystem);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  typeSystem);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
498	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.name);  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.name);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
499	[BUG]  [BUGGY]  Collections.sort(prop.name,  prop.skipRenaming);  [CE]  cannot  find  symbol  Collections  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.name,  prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.name,  prop.skipRenaming);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  Collections	164	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",* ",  skipRenaming);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",* ",  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",* ",  skipRenaming);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ",    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  node	170	None	replace
501	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.getProperties();  [CE]  cannot  find  symbol  propertyProperties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyProperties.getProperties();	  JSTypeNative[]    props    =    prop.propertyNames.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertyProperties	121	None	replace
502	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertyNames.getProperties();  [CE]  package  rootType  does  not  exist  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertyNames.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertyNames.getProperties();	  JSTypeNative[]    props    =    prop.propertyNames.getProperties();    	non-compiled	[CE]  package  rootType  does  not  exist	121	None	replace
503	[BUG]  [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	190	None	replace
504	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	107	None	replace
505	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	107	None	replace
506	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsRenamed;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
507	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	181	2	add
508	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  ComparisonFailure  	181	2	add
509	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	181	None	add
510	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    If(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  	181	None	add
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString()));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString()));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString()));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  ';'  expected	45	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  newName));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  newName));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  newName));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  ';'  expected	45	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  ';'  expected	45	None	replace
514	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
515	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
516	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
517	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
518	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsS  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsS  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsS	  	non-compiled	[CE]  ';'  expected	87	None	add
519	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++props  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++props  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++props	  	non-compiled	[CE]  ';'  expected	87	None	add
520	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRe  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRe  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRe	  	non-compiled	[CE]  ')'  expected	87	None	add
521	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++prop  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++prop  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++prop	  	non-compiled	[CE]  ';'  expected	87	None	add
522	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	149	None	replace
523	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	149	None	replace
524	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(node);	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	149	None	replace
525	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	149	None	replace
526	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProperties.findTypes();  [CE]  cannot  find  symbol  propertiesToSkipForProperties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipForProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipForProperties	198	None	replace
527	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties.findTypes();  [CE]  package  rootType  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties.findTypes();    	non-compiled	[CE]  package  rootType  does  not  exist	198	None	replace
528	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties.findTypes();  [CE]  cannot  find  symbol  propertiesToProperties  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToProperties	198	None	replace
529	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming)  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming)  {	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
530	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	91	None	replace
531	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.properties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties();	  JSTypeNative[]    props    =    prop.values();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
532	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.values()  ];  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.values()  ];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.values()  ];	  JSTypeNative[]    props    =    prop.values();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
533	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	116	None	replace
534	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	77	None	replace
535	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
536	[BUG]  [BUGGY]  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
537	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
538	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
539	[BUG]  [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size();  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  propsRenamed  =  getSingleTypeProps().size();	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	7	None	replace
540	[BUG]  [BUGGY]  Integer  propsRenamed  =  getSingleTypeProps().size();  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Integer  propsRenamed  =  getSingleTypeProps().size();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Integer  propsRenamed  =  getSingleTypeProps().size();	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	7	None	replace
541	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	7	None	replace
542	[BUG]  [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size()  -  1;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  propsRenamed  =  getSingleTypeProps().size()  -  1;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  propsRenamed  =  getSingleTypeProps().size()  -  1;	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	7	None	replace
543	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  new  Name()));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  new  Name()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.qName,  rootType.toString(),  new  Name()));	          Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Name()));    	non-compiled	[CE]  cannot  find  symbol  node	169	None	replace
544	[BUG]  [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++prop.skipRenaming;  }	  ++prop.skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	29	None	replace
545	[BUG]  [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++prop.skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	29	None	replace
546	[BUG]  [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++prop.skipRenaming;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++prop.skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	29	None	replace
547	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  true);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  true);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  true);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    propName,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
548	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.parent.getProperties();  [CE]  cannot  find  symbol  parent  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.parent.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.parent.getProperties();	  JSTypeNative[]    props    =    parent.getProperties();    	non-compiled	[CE]  cannot  find  symbol  parent	24	None	replace
549	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.node.getProperties();  [CE]  cannot  find  symbol  node  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.node.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.node.getProperties();	  JSTypeNative[]    props    =    parent.getProperties();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
550	[BUG]  [BUGGY]  JSTypeNative[]  props  =  node.getProperties();  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  node.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  node.getProperties();	  JSTypeNative[]    props    =    parent.getProperties();    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
551	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	189	2	add
552	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	189	2	add
553	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	189	None	add
554	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	189	None	add
555	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  for(Node  prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  for(Node  prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    for(Node  prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  	189	None	add
556	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  Prop  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  Prop	189	None	add
557	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties;  [CE]  cannot  find  symbol  propertyProperties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertyProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertyProperties;	  JSTypeNative[]    props    =    prop.propertyNames;    	non-compiled	[CE]  cannot  find  symbol  propertyProperties	17	None	replace
558	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertySkipped;  [CE]  cannot  find  symbol  propertySkipped  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertySkipped;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertySkipped;	  JSTypeNative[]    props    =    prop.propertyNames;    	non-compiled	[CE]  cannot  find  symbol  propertySkipped	17	None	replace
559	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
560	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
561	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
562	[BUG]  [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
563	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  	133	None	replace
564	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp;  [CE]  cannot  find  symbol  rootType  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProp;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorForProp;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp;    	non-compiled	[CE]  cannot  find  symbol  rootType	175	None	replace
565	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip;  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToSkip;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp;    	non-compiled	[CE]  ']'  expected	175	None	replace
566	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;	  	compilable	  [FE]  ComparisonFailure  	75	2	add
567	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkipped;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;	  	compilable	  [FE]  ComparisonFailure  	75	2	add
568	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped;  ++instancesSkipped;  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped;  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    instancesSkipped;  ++instancesSkipped;	  	non-compiled	[CE]  not  a  statement	75	None	add
569	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  ++instancesSkipped;  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    Node  instancesSkipped  =  prop.getInstancesSkipped();  ++instancesSkipped;	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	75	None	add
570	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    Node  instancesSkipped  =  prop.getInstancesSkipped();	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	75	None	add
571	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.findInstancesSkipped(rootType.toString());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.findInstancesSkipped(rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    Node  instancesSkipped  =  prop.findInstancesSkipped(rootType.toString());	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	75	None	add
572	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.findInstancesSkipped(node);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  Node  instancesSkipped  =  prop.findInstancesSkipped(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    Node  instancesSkipped  =  prop.findInstancesSkipped(node);	  	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	75	None	add
573	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	104	2	add
574	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	104	2	add
575	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  If(!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  If(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    If(!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	104	None	add
576	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipped)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	104	None	add
577	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipping)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipping  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipping)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipping)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipping	104	None	add
578	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	104	2	add
579	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	104	2	add
580	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	151	None	replace
581	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	151	None	replace
582	[BUG]  [BUGGY]  Property  propsRenamed  =  getProperty(prop.name);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getProperty(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getProperty(prop.name);	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	151	None	replace
583	[BUG]  [BUGGY]  ++skipRenaming;  Property  propsRenamed  =  getProperty(prop.name);  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++skipRenaming;  Property  propsRenamed  =  getProperty(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++skipRenaming;  Property  propsRenamed  =  getProperty(prop.name);	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	151	None	replace
584	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties;  [CE]  cannot  find  symbol  rootType  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.propertiesToErrorForProperties;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties;    	non-compiled	[CE]  cannot  find  symbol  rootType	174	None	replace
585	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties;  [CE]  cannot  find  symbol  propertiesForProperties  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProperties;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties;    	non-compiled	[CE]  cannot  find  symbol  propertiesForProperties	174	None	replace
586	[BUG]  [BUGGY]  if(instancesSkipped)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    invalidatingTypes.toString(),   "       "));    	non-compiled	[CE]  incompatible  types	163	None	replace
587	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    invalidatingTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	163	None	replace
588	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
589	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
590	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
591	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.renaming.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.renaming.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.renaming.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
592	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	187	None	replace
593	[BUG]  [BUGGY]  if(singleTypeProps!=  null  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	187	None	replace
594	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming,  newTypesToSkip.values();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming,  newTypesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming,  newTypesToSkip.values();	  JSTypeNative[]    props    =    prop.typesToSkip,    newTypesToSkip.values();    	non-compiled	[CE]  ';'  expected	156	None	replace
595	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip,  newTypesToSkip.values();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip,  newTypesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip,  newTypesToSkip.values();	  JSTypeNative[]    props    =    prop.typesToSkip,    newTypesToSkip.values();    	non-compiled	[CE]  ';'  expected	156	None	replace
596	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.name,  newTypesToSkip.values();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.name,  newTypesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.name,  newTypesToSkip.values();	  JSTypeNative[]    props    =    prop.typesToSkip,    newTypesToSkip.values();    	non-compiled	[CE]  ';'  expected	156	None	replace
597	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.node,  newTypesToSkip.values();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.node,  newTypesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.node,  newTypesToSkip.values();	  JSTypeNative[]    props    =    prop.typesToSkip,    newTypesToSkip.values();    	non-compiled	[CE]  ';'  expected	156	None	replace
598	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.findTypes(prop.skipRenaming);	  JSTypeNative[]    props    =    typeSystem.findTypes();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
599	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(node);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(node);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.findTypes(node);	  JSTypeNative[]    props    =    typeSystem.findTypes();    	non-compiled	[CE]  cannot  find  symbol  node	36	None	replace
600	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.name);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.findTypes(prop.name);	  JSTypeNative[]    props    =    typeSystem.findTypes();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
601	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
602	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	202	None	replace
603	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	202	None	replace
604	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node.getLastChild());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(node.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(node.getLastChild());	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
605	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	84	None	replace
606	[BUG]  [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	84	None	replace
607	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	84	2	replace
608	[BUG]  [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	84	2	replace
609	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  node	126	None	replace
610	[BUG]  [BUGGY]  Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  node	126	None	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [CE]  cannot  find  symbol  rootType  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  rootType	126	None	replace
612	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	126	None	replace
613	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  node	126	None	replace
614	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.properties.getProperties();  [CE]  package  rootType  does  not  exist  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.properties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.properties.getProperties();	  JSTypeNative[]    props    =    prop.properties.getProperties();    	non-compiled	[CE]  package  rootType  does  not  exist	21	None	replace
615	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties.getPropertyNames();  [CE]  cannot  find  symbol  properties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.properties.getPropertyNames();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties.getPropertyNames();	  JSTypeNative[]    props    =    prop.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	21	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [CE]  cannot  find  symbol  rootType  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    true);    	non-compiled	[CE]  cannot  find  symbol  rootType	97	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.skipRenaming,  rootType.toString(),  true);  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.skipRenaming,  rootType.toString(),  true);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.skipRenaming,  rootType.toString(),  true);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    true);    	non-compiled	[CE]  cannot  find  symbol  node	97	None	replace
618	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
619	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
620	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	non-compiled	[CE]  ';'  expected	56	None	add
621	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	non-compiled	[CE]  not  a  statement	56	None	add
622	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
623	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
624	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
625	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	56	2	add
626	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	71	None	replace
627	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	71	None	replace
628	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name.toString());  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.name.toString());	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	71	None	replace
629	[BUG]  [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Integer  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Integer  singleTypeProps  =  propertiesToErrorFor(rootType.toString());	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	71	None	replace
630	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this);	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  ')'  expected	117	None	replace
631	[BUG]  [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesSkipped  =  getInstancesSkipped(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesSkipped  =  getInstancesSkipped(node);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	134	None	replace
632	[BUG]  [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	134	None	replace
633	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node);  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	134	None	replace
634	[BUG]  [BUGGY]  if(instancesRenamed!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed!=  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	134	None	replace
635	[BUG]  [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  ==  null)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	134	None	replace
636	[BUG]  [BUGGY]  if(changed)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  changed  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(changed)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(changed)  {  ++propsSkipped;  }	  if(skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  changed	52	None	replace
637	[BUG]  [BUGGY]  if(singleTypeProps)  {  ++propsSkipped;  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps)  {  ++propsSkipped;  }	  if(skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  incompatible  types	52	None	replace
638	[BUG]  [BUGGY]  if(singleTypeProps.length)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.length)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.length)  {  ++propsSkipped;  }	  if(skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
639	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
640	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
641	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	10	None	add
642	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
643	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
644	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  ';'  expected	10	None	add
645	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(propsSkipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incompatible  types	10	None	add
646	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  newName));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
647	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PROPERTY,  prop.name,  rootType.toString(),   "   "));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
648	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.node.skipRenaming;  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.node.skipRenaming;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.node.skipRenaming;	  JSTypeNative[]    props    =    prop.skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  node	16	None	replace
649	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming,  skipRenaming;  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming,  skipRenaming;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming,  skipRenaming;	  JSTypeNative[]    props    =    prop.skipRenaming;    	non-compiled	[CE]  incompatible  types	16	None	replace
650	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  ++propsSkipped;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  ++propsSkipped;  }	  timeout    	non-compiled	[CE]  	92	None	add
651	[BUG]  [BUGGY]  timeout  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }	  timeout    	compilable	timeout	92	1	add
652	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  timeout  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }	  timeout    	compilable	timeout	92	1	add
653	[BUG]  [BUGGY]  timeout  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);	  timeout    	compilable	timeout	92	1	add
654	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  timeout  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);	  timeout    	compilable	timeout	92	1	add
655	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming).  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming).  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming).	  timeout    	non-compiled	[CE]  illegal  start  of  expression	92	None	add
656	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
657	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
658	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
659	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
660	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
661	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
662	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
663	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
664	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
665	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(singleTypeProps  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }	  	compilable	  [FE]  ComparisonFailure  	62	5	add
666	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    nativeTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	161	None	replace
667	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    nativeTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	161	None	replace
668	[BUG]  [BUGGY]  JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    nativeTypes.toString(),   "       "));    	non-compiled	[CE]  	161	None	replace
669	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
670	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
671	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	76	None	replace
672	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped  =  true;  }  [CE]  unexpected  type  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped  =  true;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped  =  true;  }	  ++instancesSkipped;    ++instancesSkipped;    	non-compiled	[CE]  unexpected  type	76	None	replace
673	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  IllegalArgumentException  	76	60	replace
674	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  IllegalArgumentException  	76	60	replace
675	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  NODE,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	          Context.report(JSError.make(NodeUtil.getSourceName(node),    NODE,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
676	[BUG]  [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  ';'  expected	196	None	replace
677	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	149	None	replace
678	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    invalidatingTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	163	None	replace
679	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidating  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidating  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidating	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    invalidatingTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	163	None	replace
680	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
681	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
682	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }	  ++propsRenamed;    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	2	None	replace
683	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
684	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
685	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
686	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    ++propsRenamed;    	compilable	  [FE]  ComparisonFailure  	2	2	replace
687	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	85	2	replace
688	[BUG]  [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	85	2	replace
689	[BUG]  [BUGGY]  if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  props  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	85	None	replace
690	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.getProperties();  [CE]  cannot  find  symbol  property  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.getProperties();	  JSTypeNative[]    props    =    parent.getProperties();    	non-compiled	[CE]  cannot  find  symbol  property	24	None	replace
691	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	72	None	replace
692	[BUG]  [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  singleTypeProps);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeUtil.removeChild(prop.skipRenaming,  singleTypeProps);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeUtil.removeChild(prop.skipRenaming,  singleTypeProps);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	72	None	replace
693	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
694	[BUG]  [BUGGY]  JSTypeNative  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
695	[BUG]  [BUGGY]  Context.report(JSError.make(NameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  node	120	None	replace
696	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkiipped;  [CE]  cannot  find  symbol  instancesSkiipped  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkiipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesSkiipped;	  	non-compiled	[CE]  cannot  find  symbol  instancesSkiipped	75	None	add
697	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkip;  [CE]  cannot  find  symbol  instancesSkip  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSkip;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesSkip;	  	non-compiled	[CE]  cannot  find  symbol  instancesSkip	75	None	add
698	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSKipped;  [CE]  cannot  find  symbol  instancesSKipped  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesSKipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesSKipped;	  	non-compiled	[CE]  cannot  find  symbol  instancesSKipped	75	None	add
699	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesRenamed;	  	compilable	  [FE]  ComparisonFailure  	75	2	add
700	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesRenamed;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesRenamed;	  	compilable	  [FE]  ComparisonFailure  	75	2	add
701	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesKipped;  [CE]  cannot  find  symbol  instancesKipped  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  ++instancesSkipped;  ++instancesKipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    ++instancesSkipped;  ++instancesKipped;	  	non-compiled	[CE]  cannot  find  symbol  instancesKipped	75	None	add
702	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.node.propertiesToError;  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.node.propertiesToError;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.node.propertiesToError;	  JSTypeNative[]    props    =    prop.propertiesToError;    	non-compiled	[CE]  cannot  find  symbol  node	123	None	replace
703	[BUG]  [BUGGY]  ++instancesRenaming;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [CE]  cannot  find  symbol  instancesRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenaming;  Node  instancesSkipped  =  prop.getInstancesSkipped();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenaming;  Node  instancesSkipped  =  prop.getInstancesSkipped();	  ++instancesSkipped;    Node    instancesSkipped    =    prop.getInstancesSkipped();    	non-compiled	[CE]  cannot  find  symbol  instancesRenaming	136	None	replace
704	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	91	None	replace
705	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	91	None	replace
706	[BUG]  [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	91	None	replace
707	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  SourceNameUtil  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  Context.report(JSError.make(SourceNameUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  SourceNameUtil	102	None	replace
708	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRename)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRename  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipRename)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipRename)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRename	108	None	add
709	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(prop.skipped)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	108	None	add
710	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	compilable	  [FE]  ComparisonFailure  	107	2	replace
711	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsRenamed;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	compilable	  [FE]  ComparisonFailure  	107	2	replace
712	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	compilable	  [FE]  ComparisonFailure  	107	2	replace
713	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	compilable	  [FE]  ComparisonFailure  	107	2	replace
714	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++this.skipRenaming;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++this.skipRenaming;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++this.skipRenaming;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	12	None	replace
715	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsInvalidating;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  propsInvalidating  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsInvalidating;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsInvalidating;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  propsInvalidating	12	None	replace
716	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    If(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }	  	non-compiled	[CE]  ';'  expected	62	None	add
717	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	62	None	add
718	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.values();  [CE]  cannot  find  symbol  propertiesToErrors  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors.values();	  JSTypeNative[]    props    =    prop.propertyNames.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	138	None	replace
719	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.values();  [CE]  cannot  find  symbol  propertiesToErrorFor  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorFor.values();	  JSTypeNative[]    props    =    prop.propertyNames.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorFor	138	None	replace
720	[BUG]  [BUGGY]  Collections.sort(prop.typesToError);  [CE]  cannot  find  symbol  typesToError  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.typesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.typesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  typesToError	114	None	replace
721	[BUG]  [BUGGY]  Collections.sort(this.propertiesToError);  [CE]  cannot  find  symbol  propertiesToError  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(this.propertiesToError);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this.propertiesToError);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	114	None	replace
722	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  rootType  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  rootType	171	None	replace
723	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
724	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  sourceType.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
725	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  INVALIDATION_ON_TYPE);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  INVALIDATION_ON_TYPE);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  INVALIDATION_ON_TYPE);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ",    tt);    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
726	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	119	2	add
727	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	119	2	add
728	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	119	None	add
729	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	89	None	replace
730	[BUG]  [BUGGY]  ++prop.skipRenaming  +  1;  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++prop.skipRenaming  +  1;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++prop.skipRenaming  +  1;	  ++prop.skipRenaming;    	non-compiled	[CE]  not  a  statement	29	None	replace
731	[BUG]  [BUGGY]  ++prop.skipRenaming  + ": "  +  prop.name;  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++prop.skipRenaming  + ": "  +  prop.name;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++prop.skipRenaming  + ": "  +  prop.name;	  ++prop.skipRenaming;    	non-compiled	[CE]  not  a  statement	29	None	replace
732	[BUG]  [BUGGY]  ++prop.skipRenaming  =  true;  [CE]  bad  operand  type  boolean  for  unary  operator  '++'  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++prop.skipRenaming  =  true;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++prop.skipRenaming  =  true;	  ++prop.skipRenaming;    	non-compiled	[CE]  bad  operand  type  boolean  for  unary  operator  '++'	29	None	replace
733	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	5	None	replace
734	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	5	None	replace
735	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	5	None	replace
736	[BUG]  [BUGGY]  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	5	None	replace
737	[BUG]  [BUGGY]  if(props.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  props  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(props.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(props.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	188	None	replace
738	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skippedProps!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippedProps  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skippedProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skippedProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skippedProps	188	None	replace
739	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	188	None	replace
740	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  parent  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  parent	42	None	replace
741	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	42	None	replace
742	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString()));    	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	103	None	replace
743	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.getProperties(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.getProperties(prop.skipRenaming);	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
744	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.values();  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.values();	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	39	None	replace
745	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.values();  [CE]  package  property  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToSkip.values();	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  package  property  does  not  exist	39	None	replace
746	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.values();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProp.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProp.values();	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	39	None	replace
747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       ");    	non-compiled	[CE]  cannot  find  symbol  parent	143	None	replace
748	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  PropsRenamed  ++propsRenamed;  ++propsRenamed;  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  PropsRenamed  ++propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    PropsRenamed  ++propsRenamed;  ++propsRenamed;	  	non-compiled	[CE]  ';'  expected	1	None	add
749	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  getProperty(prop.skipRenaming);  ++propsRenamed;  ++propsRenamed;  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  getProperty(prop.skipRenaming);  ++propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  prop  =  getProperty(prop.skipRenaming);  ++propsRenamed;  ++propsRenamed;	  	non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	1	None	add
750	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  propertiesToErrorFor(rootType.toString());  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  propertiesToErrorFor(rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  prop  =  propertiesToErrorFor(rootType.toString());	  	non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	1	None	add
751	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  getProperty(prop.skipRenaming);  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  getProperty(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  prop  =  getProperty(prop.skipRenaming);	  	non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	1	None	add
752	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());  [CE]  variable  prop  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  prop  =  propertiesToErrorFor(rootType.toString(),  rootType.toString());	  	non-compiled	[CE]  variable  prop  is  already  defined  in  method  renameProperties()	1	None	add
753	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  -=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	instancesSkipped  -=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
754	[BUG]  [BUGGY]  instancesSkipped  -=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  -=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  -=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    	compilable	  [FE]  ComparisonFailure  	63	2	replace
755	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.properties;  [CE]  cannot  find  symbol  property  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.properties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.properties;	  JSTypeNative[]    props    =    prop.typesToSkip.properties;    	non-compiled	[CE]  cannot  find  symbol  property	176	None	replace
756	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming  +  1);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming  +  1);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming  +  1);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
757	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);  [CE]  cannot  find  symbol  rootType  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName);    	non-compiled	[CE]  cannot  find  symbol  rootType	95	None	replace
758	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  prop.name);  [CE]  cannot  find  symbol  Collections  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  prop.name);	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  Collections	31	None	replace
759	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
760	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	162	None	replace
761	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
762	[BUG]  [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  ';'  expected	194	None	replace
763	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [CE]  cannot  find  symbol  rootType  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  rootType	100	None	replace
764	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [CE]  cannot  find  symbol  rootTypes  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  rootTypes	100	None	replace
765	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
766	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
767	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
768	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.node);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
769	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	51	None	replace
770	[BUG]  [BUGGY]  parent.renameProperties(prop.name,  prop.skipRenaming);  [CE]  cannot  find  symbol  parent  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  parent.renameProperties(prop.name,  prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	parent.renameProperties(prop.name,  prop.skipRenaming);	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  parent	51	None	replace
771	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsSkip;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsSkip;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsSkip;  }	  if(!changed)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	25	None	replace
772	[BUG]  [BUGGY]  Context.report(JSError.make(SourceUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(SourceUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	180	None	replace
773	[BUG]  [BUGGY]  JSTypeNative[]  props  =  this.properties.findTypes();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  this.properties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  this.properties.findTypes();	  JSTypeNative[]    props    =    prop.properties.findTypes();    	non-compiled	[CE]  cannot  find  symbol	199	None	replace
774	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  instancesSkipped  >  prop.name)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  instancesSkipped  >  prop.name)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  ||  instancesSkipped  >  prop.name)  {  ++instancesSkipped;  }  else  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	177	None	replace
775	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  propsRenamed.add(prop.name);  }  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  propsRenamed.add(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  propsRenamed.add(prop.name);  }	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    propsRenamed.add(prop.name);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	177	None	replace
776	[BUG]  [BUGGY]  node)  {  ++singleTypeProps;  }  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  node)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	node)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  not  a  statement	48	None	replace
777	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( " "));  }	  	non-compiled	[CE]  	131	None	add
778	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
779	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
780	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Name()));    	non-compiled	[CE]  ')'  expected	184	None	replace
781	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	127	None	replace
782	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [CE]  incomparable  types:  int  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  incomparable  types:  int  and  <null>	127	None	replace
783	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  parent	98	None	replace
784	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	98	None	replace
785	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorForProp.findTypes();  [CE]  package  property  does  not  exist  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToErrorForProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	197	None	replace
786	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp.findTypes();  [CE]  cannot  find  symbol  propertiesToProp  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToProp	197	None	replace
787	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  false));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  rootType.toString(),  false));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,    rootType.toString(),       "       "));    	non-compiled	[CE]  ';'  expected	44	None	replace
788	[BUG]  [BUGGY]  JSTypeNative[]  props  =  this.rootTypes.findTypes();  [CE]  cannot  find  symbol  rootTypes  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  this.rootTypes.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  this.rootTypes.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol  rootTypes	35	None	replace
789	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.name);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.name);  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	82	None	replace
790	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps.removeChild(prop.skipRenaming);  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	82	None	replace
791	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString()));  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString()));	  if(!singleTypeProps)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  node	27	None	replace
792	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	148	None	replace
793	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	148	None	replace
794	[BUG]  [BUGGY]  Property  propsRenamed  =  getProperty(prop.skipRenaming);  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getProperty(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getProperty(prop.skipRenaming);	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	148	None	replace
795	[BUG]  [BUGGY]  if(prop.skipRenaming!=  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming!=  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming!=  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	148	None	replace
796	[BUG]  [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	129	None	add
797	[BUG]  [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesRenamed);  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesRenamed);	  	non-compiled	[CE]  ')'  expected	129	None	add
798	[BUG]  [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  invalidatingTypes.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	129	None	add
799	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipMap.findTypes();  [CE]  cannot  find  symbol  propertiesToSkipMap  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipMap.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipMap.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipMap	200	None	replace
800	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));	          Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Name()));    	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	169	None	replace
801	[BUG]  [BUGGY]  int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;  [CE]  :  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  :  expected	57	None	replace
802	[BUG]  [BUGGY]  int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&  0;  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&  0;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  instancesSkipped  =(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&  0;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	57	None	replace
803	[BUG]  [BUGGY]  JSTypeNative[]  props  =  rootType.getProperties();  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  rootType.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  rootType.getProperties();	  JSTypeNative[]    props    =    this.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol  rootType	23	None	replace
804	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	150	None	replace
805	[BUG]  [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(prop.toString());  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsRenamed  =  getPropertiesRenamed(prop.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsRenamed  =  getPropertiesRenamed(prop.toString());	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	150	None	replace
806	[BUG]  [BUGGY]  if(skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	192	None	replace
807	[BUG]  [BUGGY]  parent.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  parent.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	parent.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  not  a  statement	192	None	replace
808	[BUG]  [BUGGY]  if(node!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(node!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(node!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  node	201	None	replace
809	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	201	None	replace
810	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	53	None	replace
811	[BUG]  [BUGGY]  if(props.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  props  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(props.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(props.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	178	None	replace
812	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
813	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
814	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  ++instancesSkipped;  }  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	non-compiled	[CE]  incompatible  types	76	None	replace
815	[BUG]  [BUGGY]  if(instancesRenamed  ==  null)  {  ++instancesSkipped;  ++instancesSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  ==  null)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  ==  null)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	76	None	replace
816	[BUG]  [BUGGY]  if(instancesRenamed!=  null)  {  ++instancesSkipped;  ++instancesSkipped;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed!=  null)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed!=  null)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	76	None	replace
817	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  int  ++singleTypeProps;  ++singleTypeProps;  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  int  ++singleTypeProps;  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    int  ++singleTypeProps;  ++singleTypeProps;	  	non-compiled	[CE]  not  a  statement	68	None	add
818	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.removeChild(prop.skipRenaming);  [CE]  int  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.removeChild(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps.removeChild(prop.skipRenaming);	  	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	add
819	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.remove(prop.skipRenaming);  [CE]  int  cannot  be  dereferenced  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.remove(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps.remove(prop.skipRenaming);	  	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	add
820	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.add(prop.skipRenaming);  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps;  ++singleTypeProps.add(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    ++singleTypeProps;  ++singleTypeProps.add(prop.skipRenaming);	  	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	add
821	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
822	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray.size()  ]);  [CE]  cannot  find  symbol  propertiesToErrorArray  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray.size()  ]);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray.size()  ]);	  JSTypeNative[]    props    =    prop.propertiesToErrorArray.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorArray	145	None	replace
823	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray()  ]);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray()  ]);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray.toArray(new  JSTypeNative[prop.propertiesToErrorArray()  ]);	  JSTypeNative[]    props    =    prop.propertiesToErrorArray.getProperties();    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
824	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.clone();  [CE]  cannot  find  symbol  propertiesToErrorArray  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.clone();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray.clone();	  JSTypeNative[]    props    =    prop.propertiesToErrorArray.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorArray	145	None	replace
825	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  propertiesToError.toString());  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  propertiesToError.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  propertiesToError.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString());    	non-compiled	[CE]  cannot  find  symbol  node	157	None	replace
826	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [CE]  cannot  find  symbol  rootTypes  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootTypes,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    property.toString());    	non-compiled	[CE]  cannot  find  symbol  rootTypes	157	None	replace
827	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	152	None	replace
828	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	152	None	replace
829	[BUG]  [BUGGY]  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
830	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  InstancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  InstancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    InstancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }	  	non-compiled	[CE]  not  a  statement	56	None	add
831	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.getTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	15	None	replace
832	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.getTypes();  [CE]  cannot  find  symbol  propertiesToError  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToError.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToError.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	15	None	replace
833	[BUG]  [BUGGY]  if(prop.name.length  >  0)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  length  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.name.length  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.name.length  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  length	83	None	replace
834	[BUG]  [BUGGY]  if(singleTypeProps.length  >  0)  {  ++sINGLE_TYPEProps;  }  [CE]  int  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.length  >  0)  {  ++sINGLE_TYPEProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.length  >  0)  {  ++sINGLE_TYPEProps;  }	  if(singleTypeProps.length    >    0)    {    ++singleTypeProps;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
835	[BUG]  [BUGGY]  Collections.sort(prop.properties,  new  Property(tt));  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  new  Property(tt));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  new  Property(tt));	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  properties	33	None	replace
836	[BUG]  [BUGGY]  Collections.sort(prop.name,  tt);  [CE]  cannot  find  symbol  tt  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.name,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.name,  tt);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  tt	33	None	replace
837	[BUG]  [BUGGY]  Collections.sort(propNames,  tt);  [CE]  cannot  find  symbol  propNames  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(propNames,  tt);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(propNames,  tt);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  propNames	33	None	replace
838	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRename)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRename  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  if(prop.skipRename)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    if(prop.skipRename)  {  ++propsRenamed;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRename	106	None	add
839	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        while(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming);  }	  timeout    	non-compiled	[CE]  	92	None	add
840	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),	  	non-compiled	[CE]  ')'  expected	104	None	add
841	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  	non-compiled	[CE]  ')'  expected	104	None	add
842	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),	  	non-compiled	[CE]  ')'  expected	104	None	add
843	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  System.arraycopy(node,  0,  propsToSkip,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }	  	non-compiled	[CE]  cannot  find  symbol  node	104	None	add
844	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  null);  [CE]  cannot  find  symbol  rootType  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  rootType	65	None	replace
845	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  parent  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  parent,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  parent	65	None	replace
846	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);  [CE]  cannot  find  symbol  rootType  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skipRenaming);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ",    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  rootType	170	None	replace
847	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors();	  JSTypeNative[]    props    =    prop.values();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
848	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray();	  JSTypeNative[]    props    =    prop.values();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
849	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa  [CE]  '('  or  '['  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
850	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa  [CE]  '('  or  '['  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFa	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
851	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorFor.findTypes();  [CE]  package  property  does  not  exist  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToErrorFor.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToErrorFor.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorFor.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	154	None	replace
852	[BUG]  [BUGGY]  if(propsSkipped!=  null)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped!=  null)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped!=  null)  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	139	None	replace
853	[BUG]  [BUGGY]  JSTypeProperty  singleTypeProps  =  getSingleTypeProperty(prop.name);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeProperty  singleTypeProps  =  getSingleTypeProperty(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeProperty  singleTypeProps  =  getSingleTypeProperty(prop.name);	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
854	[BUG]  [BUGGY]  JSTypeProps  singleTypeProps  =  getSingleTypeProps();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeProps  singleTypeProps  =  getSingleTypeProps();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeProps  singleTypeProps  =  getSingleTypeProps();	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
855	[BUG]  [BUGGY]  Node  instancesRenamed  =  getInstancesRenamed(node.getLastChild());  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesRenamed  =  getInstancesRenamed(node.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesRenamed  =  getInstancesRenamed(node.getLastChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	137	None	replace
856	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.properties.toArray(new  JSTypeNative[prop.properties.size()  ]);  [CE]  cannot  find  symbol  properties  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.properties.toArray(new  JSTypeNative[prop.properties.size()  ]);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.properties.toArray(new  JSTypeNative[prop.properties.size()  ]);	  JSTypeNative[]    props    =    prop.properties.getProperties();    	non-compiled	[CE]  cannot  find  symbol  properties	21	None	replace
857	[BUG]  [BUGGY]  Collections.sort(properties,  new  Property());  [CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(properties,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(properties,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;	165	None	replace
858	[BUG]  [BUGGY]  Collections.sort(prop,  new  Property());  [CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;	165	None	replace
859	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	151	None	replace
860	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getProperty(prop.name);  }  [CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getProperty(prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getProperty(prop.name);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY	151	None	replace
861	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	replace
862	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	6	None	replace
863	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  return;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  else  {  return;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	replace
864	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  }	  	non-compiled	[CE]  	195	None	add
865	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  Prop  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  Prop	195	None	add
866	[BUG]  [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming!=  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	4	None	replace
867	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ==  null)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	4	None	replace
868	[BUG]  [BUGGY]  if(prop.skipRenaming  ==  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ==  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ==  false)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	4	None	replace
869	[BUG]  [BUGGY]  if(instancesRenamed  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  ==  null)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
870	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
871	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  return;  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++instancesSkipped;  InstancesSkipped  ++instancesSkipped;  }  else  {  return;  }	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
872	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	187	2	replace
873	[BUG]  [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	187	2	replace
874	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	187	None	replace
875	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "));  [CE]  unclosed  string  literal  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "));	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  unclosed  string  literal	13	None	replace
876	[BUG]  [BUGGY]  if(prop.skipping)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipping  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipping)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipping)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipping	90	None	replace
877	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	90	2	replace
878	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	90	2	replace
879	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  rootType  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  rootType	113	None	replace
880	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
881	[BUG]  [BUGGY]  Collections.sort(propNames);  [CE]  cannot  find  symbol  propNames  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(propNames);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(propNames);	  Collections.sort(properties);    	non-compiled	[CE]  cannot  find  symbol  propNames	115	None	replace
882	[BUG]  [BUGGY]  Collections.sort(propertiesToErrors);  [CE]  cannot  find  symbol  propertiesToErrors  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(propertiesToErrors);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(propertiesToErrors);	  Collections.sort(properties);    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	115	None	replace
883	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	93	None	replace
884	[BUG]  [BUGGY]  Context.checkState(prop.skipRenaming);  [CE]  cannot  find  symbol  Context  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(prop.skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(prop.skipRenaming);	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  Context	93	None	replace
885	[BUG]  [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsKipped;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsKipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++propsSkipped;  }  while(prop.skipRenaming)  {  ++propsKipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	93	None	replace
886	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
887	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  checkLevelForProp,  node);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  checkLevelForProp,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  checkLevelForProp,  node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
888	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.skipRenaming,  node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
889	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
890	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	190	None	replace
891	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	190	2	replace
892	[BUG]  [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  &&  prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	190	2	replace
893	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CE]  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }	  	non-compiled	[CE]  	193	None	add
894	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.getProperties();  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorMap.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.getProperties();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	167	None	replace
895	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString()	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    nativeTypes.toString(),   "       "));    	non-compiled	[CE]  ')'  expected	161	None	replace
896	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(),   "   "));	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    nativeTypes.toString(),   "       "));    	non-compiled	[CE]  cannot  find  symbol  node	161	None	replace
897	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false));	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ';'  expected	111	None	replace
898	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* "));	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	111	None	replace
899	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	58	None	add
900	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
901	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
902	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.toArray(new  JSTypeNative[prop.propertiesToErrors.size()  ]);  [CE]  cannot  find  symbol  propertiesToErrors  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.toArray(new  JSTypeNative[prop.propertiesToErrors.size()  ]);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors.toArray(new  JSTypeNative[prop.propertiesToErrors.size()  ]);	  JSTypeNative[]    props    =    prop.propertiesToErrors.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	146	None	replace
903	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  Prop  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skipRenaming  ||  Prop.skipRenaming)  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  Prop	186	None	add
904	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skippedRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skippedRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.skippedRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.skippedRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skippedRenaming	186	None	add
905	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertyNames.length];  [CE]  cannot  find  symbol  propertyNames  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertyNames.length];  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.propertyNames.length];	  JSTypeNative[]    props    =    prop.propertyNames;    	non-compiled	[CE]  cannot  find  symbol  propertyNames	17	None	replace
906	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorFor  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorFor.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorFor.getProperties();	  JSTypeNative[]    props    =    prop.propertyNames.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorFor	121	None	replace
907	[BUG]  [BUGGY]  if(!propsRenamed.skipRenaming)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!propsRenamed.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!propsRenamed.skipRenaming)  {  ++propsSkipped;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	26	None	replace
908	[BUG]  [BUGGY]  if(!props.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  props  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!props.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!props.skipRenaming)  {  ++propsSkipped;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	26	None	replace
909	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  int  propsRenamed  =  getSingleTypeProps().size();  }  [CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  int  propsRenamed  =  getSingleTypeProps().size();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  int  propsRenamed  =  getSingleTypeProps().size();  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY	7	None	replace
910	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  int  propsRenamed  =  getSingleTypeProps().size();  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	7	None	replace
911	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProperties.findTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.propertiesToErrorForProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties.findTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	198	None	replace
912	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProp;  [CE]  cannot  find  symbol  propertiesToSkipForProp  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProp;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipForProp;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp;    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipForProp	175	None	replace
913	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp;  [CE]  cannot  find  symbol  propertiesToProp  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProp;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp;    	non-compiled	[CE]  cannot  find  symbol  propertiesToProp	175	None	replace
914	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  rootType);  [CE]  cannot  find  symbol  rootType  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  rootType);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  rootType);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming,    node);    	non-compiled	[CE]  cannot  find  symbol  rootType	73	None	replace
915	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  this));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  ';'  expected	46	None	replace
916	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  suggestions));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  ';'  expected	46	None	replace
917	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  INVALIDATION_WARNINGS_PER_PROPERTY));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  ';'  expected	172	None	replace
918	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "; "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "; "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "; "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  	172	None	replace
919	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
920	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  >=  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
921	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
922	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    ++singleTypeProps;    }    if(instancesSkipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	60	2	add
923	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
924	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToError.values();  [CE]  cannot  find  symbol  propertiesToError  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToError.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToError.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToError	41	None	replace
925	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||  prop.skipRenaming)  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||  prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	189	None	add
926	[BUG]  [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString()	  ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  ')'  expected	183	None	replace
927	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.propers.getProperties();  [CE]  cannot  find  symbol  propers  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorFor.propers.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorFor.propers.getProperties();	  JSTypeNative[]    props    =    prop.propers.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propers	166	None	replace
928	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
929	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
930	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.findTypes();  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToError.findTypes();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	153	None	replace
931	[BUG]  [BUGGY]  Node  instancesRenamed  =  getInstancesRenamed(node);  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesRenamed  =  getInstancesRenamed(node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesRenamed  =  getInstancesRenamed(node);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	134	None	replace
932	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incompatible  types	134	None	replace
933	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node);  }  else  {  throw  new  IllegalStateException( " ");  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  incompatible  types	134	None	replace
934	[BUG]  [BUGGY]  ++instancesRenamed.size();  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed.size();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed.size();	  ++instancesRenamed;    	non-compiled	[CE]  int  cannot  be  dereferenced	130	None	replace
935	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
936	[BUG]  [BUGGY]  if(prop.singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps  ==  null)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
937	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  if(!skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
938	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkip;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkip;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  if(prop.skipRenaming)  {  ++propsSkip;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
939	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	191	2	replace
940	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	191	2	replace
941	[BUG]  [BUGGY]  if(!skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipped  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipped)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	191	None	replace
942	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
943	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(prop.name,  node);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
944	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());	  	non-compiled	[CE]  cannot  find  symbol  node	50	None	add
945	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE);	  	non-compiled	[CE]  cannot  find  symbol  node	50	None	add
946	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    AssertionError  tt  =  NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  	50	None	add
947	[BUG]  [BUGGY]  if(prop.instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  instancesRenamed  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  instancesRenamed	173	None	replace
948	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  rootType);  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  rootType);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  rootType);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
949	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  null);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  null);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
950	[BUG]  [BUGGY]  if(prop.skipped)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped)  {  ++propsSkipped;  }	  if(!prop.skipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	168	None	replace
951	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	70	None	replace
952	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming);  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	70	None	replace
953	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++this.skipRenaming;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++this.skipRenaming;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++this.skipRenaming;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	141	None	replace
954	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||!prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||!prop.skipRenaming)  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||!prop.skipRenaming)  {	  	non-compiled	[CE]  illegal  start  of  expression	140	None	add
955	[BUG]  [BUGGY]  Node  instancesRenamed  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Node  instancesRenamed  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Node  instancesRenamed  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  variable  instancesRenamed  is  already  defined  in  method  renameProperties()	135	None	replace
956	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  incompatible  types	135	None	replace
957	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	135	None	replace
958	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);  [CE]  cannot  find  symbol  rootType  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  propName,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    propName,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  rootType	147	None	replace
959	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.findTypes();  [CE]  cannot  find  symbol  propertiesToErrors  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrors.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrors.findTypes();	  JSTypeNative[]    props    =    prop.propertyNames.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrors	38	None	replace
960	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/   "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
961	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/props "));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/props "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/props "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
962	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/> "));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/> "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/> "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
963	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProperties;  [CE]  cannot  find  symbol  propertiesToSkipForProperties  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipForProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipForProperties;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties;    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipForProperties	174	None	replace
964	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipProperties;  [CE]  cannot  find  symbol  propertiesToSkipProperties  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkipProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkipProperties;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties;    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkipProperties	174	None	replace
965	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,  false));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  ';'  expected	45	None	replace
966	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "));  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming,   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  unclosed  string  literal	45	None	replace
967	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.getProperties();  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.skipRenaming.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.skipRenaming.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getProperties();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	18	None	replace
968	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getPropertyNames();  [CE]  cannot  find  symbol  propertiesToSkip  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToSkip.getPropertyNames();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToSkip.getPropertyNames();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	18	None	replace
969	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
970	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	10	2	add
971	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
972	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
973	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
974	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp.getTypes();  [CE]  cannot  find  symbol  propertiesForProp  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProp.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProp	122	None	replace
975	[BUG]  [BUGGY]  if(propsSkipped  ==  null)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(propsSkipped  ==  null)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(propsSkipped  ==  null)  {  ++singleTypeProps;  }	  if(singleTypeProps    ==    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	142	None	replace
976	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
977	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  ++singleTypeProps;  }  else  {  throw  new  IllegalStateException( " ");  }	  ++singleTypeProps;    ++singleTypeProps;    	compilable	  [FE]  ComparisonFailure  	69	2	replace
978	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  ++singleTypeProps;  }	  ++singleTypeProps;    ++singleTypeProps;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	69	None	replace
979	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	125	None	replace
980	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
981	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node.getFirstChild());  }  else  {  throw  new  IllegalStateException( " ");  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node.getFirstChild());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	202	None	replace
982	[BUG]  [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
983	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  1;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  1;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	compilable	  [FE]  ComparisonFailure  	57	2	replace
984	[BUG]  [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  1;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  1;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  1;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	compilable	  [FE]  ComparisonFailure  	57	2	replace
985	[BUG]  [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesRenamed;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesRenamed;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	57	None	replace
986	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  null;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  null;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	compilable	  [FE]  NullPointerException  	57	60	replace
987	[BUG]  [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  null;  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  null;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped  :  null;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	compilable	  [FE]  NullPointerException  	57	60	replace
988	[BUG]  [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;  [CE]  :  expected  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)?  ++instancesSkipped;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    	non-compiled	[CE]  :  expected	57	None	replace
989	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
990	[BUG]  [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.name);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
991	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming  -  1);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming  -  1);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.skipRenaming  -  1);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.skipRenaming);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	70	None	replace
992	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.properties();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.properties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  newTypesToSkip.properties();	  JSTypeNative[]    props    =    prop.typesToSkip,    newTypesToSkip.values();    	non-compiled	[CE]  ';'  expected	156	None	replace
993	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.skipRenaming);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.skipRenaming);	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  ';'  expected	19	None	replace
994	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getDeclaredProperties();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getDeclaredProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getDeclaredProperties();	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  ';'  expected	19	None	replace
995	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.name);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typesToSkip,  typeSystem.getProperties(prop.name);	  JSTypeNative[]    props    =    prop.typesToSkip,    typeSystem.getProperties();    	non-compiled	[CE]  ';'  expected	19	None	replace
996	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVAL  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVAL  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVAL	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
997	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  instancesSkipped);  }	  ++instancesSkipped;    Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    instancesSkipped);    	non-compiled	[CE]  ')'  expected	160	None	replace
998	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/propsSkipped "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/propsSkipped "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "/propsSkipped "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "/   "));    	non-compiled	[CE]  	112	None	replace
999	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.singleTypeProps)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(prop.singleTypeProps)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(prop.singleTypeProps)  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	50	None	add
1000	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	50	2	add
1001	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	50	2	add
1002	[BUG]  [BUGGY]  JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
1003	[BUG]  [BUGGY]  if(compiler.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [CE]  cannot  find  symbol  skipRenaming  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(compiler.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(compiler.skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  ComparisonFailure());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    ComparisonFailure());    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	126	None	replace
1004	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  skipRenaming));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  skipRenaming));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_PER_PROPERTY,  prop.name,  rootType.toString(),  skipRenaming));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
1005	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
1006	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
1007	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	5	None	replace
1008	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    ++propsRenamed;    	non-compiled	[CE]  incompatible  types	5	None	replace
1009	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties;  [CE]  cannot  find  symbol  propertiesToProperties  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProperties;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProperties;    	non-compiled	[CE]  cannot  find  symbol  propertiesToProperties	174	None	replace
1010	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	82	None	replace
1011	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	82	None	replace
1012	[BUG]  [BUGGY]  ||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1013	[BUG]  [BUGGY]  ||  singleTypeProps!=  null)  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  singleTypeProps!=  null)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  singleTypeProps!=  null)  {  ++singleTypeProps;  }	  if(singleTypeProps!=    null)    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1014	[BUG]  [BUGGY]  Collections.sort(prop.properties,  tt.owner);  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  tt.owner);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  tt.owner);	  Collections.sort(prop.properties,    tt);    	non-compiled	[CE]  cannot  find  symbol  properties	33	None	replace
1015	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1016	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1017	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming,  instancesSkipped);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1018	[BUG]  [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  prop.skipRenaming);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    prop.skipRenaming);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
1019	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	1	None	add
1020	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    ++propsRenamed;  ++propsRenamed;  }  else  {  ++singleTypeProps;	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
1021	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  prop.skipRenaming?  getProperty(prop.name):  null;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  prop.skipRenaming?  getProperty(prop.name):  null;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  propsRenamed  =  prop.skipRenaming?  getProperty(prop.name):  null;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	1	None	add
1022	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  prop.skipRenaming?  getProperties().get(prop.name):  null;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  prop.skipRenaming?  getProperties().get(prop.name):  null;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  propsRenamed  =  prop.skipRenaming?  getProperties().get(prop.name):  null;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	1	None	add
1023	[BUG]  [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++propsRenamed;    ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++propsRenamed;        ++propsRenamed;    Property  propsRenamed  =  getProperty(prop.name);  ++propsRenamed;	  	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	1	None	add
1024	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.getProperties();  [CE]  cannot  find  symbol  propertiesForProperties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProperties.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrors.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProperties	146	None	replace
1025	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties.getProperties();  [CE]  cannot  find  symbol  propertiesToProperties  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProperties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProperties.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToErrors.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToProperties	146	None	replace
1026	[BUG]  [BUGGY]  if(!singleTypeProps)  {  ++singleTypeProps;  }  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!singleTypeProps)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!singleTypeProps)  {  ++singleTypeProps;  }	  if(!skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	28	None	replace
1027	[BUG]  [BUGGY]  if(compiler!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(compiler!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(compiler!=  null)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString());  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	127	None	replace
1028	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.name),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(prop.name),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(prop.name),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  method  getSourceName  in  class  NodeUtil  cannot  be  applied  to  given  types;	116	None	replace
1029	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  Context.report(JSError.make(NodeUtil.getSourceName(prop.skipRenaming),    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	116	None	replace
1030	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1031	[BUG]  [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    If(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1032	[BUG]  [BUGGY]  if(checkLevelForProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  checkLevelForProps  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(checkLevelForProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(checkLevelForProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProps	9	None	replace
1033	[BUG]  [BUGGY]  Context.checkState(false, "Unknown  type ");  [CE]  cannot  find  symbol  Context  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(false, "Unknown  type ");  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(false, "Unknown  type ");	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  Context	9	None	replace
1034	[BUG]  [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesSkipped;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	instancesSkipped  =(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)&&  ++instancesSkipped;	  if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	132	None	replace
1035	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  propsSkipped)  {  ++propsSkipped;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  propsSkipped)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  propsSkipped)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(propsSkipped)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	178	None	replace
1036	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.values();  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.values();	  JSTypeNative[]    props    =    prop.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	40	None	replace
1037	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	68	None	add
1038	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  newName));	  	non-compiled	[CE]  cannot  find  symbol  node	68	None	add
1039	[BUG]  [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;    ++singleTypeProps;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;        ++singleTypeProps;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Name()));	  	non-compiled	[CE]  cannot  find  symbol  node	68	None	add
1040	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.findTypes();  [CE]  cannot  find  symbol  propertiesForProperties  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProperties.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorMap.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProperties	200	None	replace
1041	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString()));  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString()));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString()));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString()));    	non-compiled	[CE]  cannot  find  symbol  node	103	None	replace
1042	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(rootType.toString());  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(rootType.toString());    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	150	None	replace
1043	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProperties.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProperties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorForProperties.getProperties();	  JSTypeNative[]    props    =    prop.propers.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	166	None	replace
1044	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propers.getProperties(prop.skipRenaming);  [CE]  cannot  find  symbol  propers  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propers.getProperties(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propers.getProperties(prop.skipRenaming);	  JSTypeNative[]    props    =    prop.propers.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propers	166	None	replace
1045	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	add
1046	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenaming	8	None	add
1047	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString());	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
1048	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(), "   ");  [CE]  cannot  find  symbol  node  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(), "   ");  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(), "   ");	  	non-compiled	[CE]  cannot  find  symbol  node	75	None	add
1049	[BUG]  [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;    ++instancesSkipped;  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;        ++instancesSkipped;    instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));	  	non-compiled	[CE]  	75	None	add
1050	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
1051	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
1052	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "... ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "... ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
1053	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "... ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "... ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalStateException( "... ");  }	  	compilable	  [FE]  IllegalStateException  	131	60	add
1054	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp;  [CE]  cannot  find  symbol  propertiesForProp  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProp;	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp;    	non-compiled	[CE]  cannot  find  symbol  propertiesForProp	175	None	replace
1055	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  prop.skipRenaming);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming,  prop.skipRenaming);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
1056	[BUG]  [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  prop.type);  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  skipRenaming,  prop.type);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  skipRenaming,  prop.type);	  Collections.sort(prop.properties,    skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	32	None	replace
1057	[BUG]  [BUGGY]  Collections.sort(this.properties,  prop.name);  [CE]  cannot  find  symbol  Collections  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(this.properties,  prop.name);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this.properties,  prop.name);	  Collections.sort(this.properties);    	non-compiled	[CE]  cannot  find  symbol  Collections	34	None	replace
1058	[BUG]  [BUGGY]  Collections.sort(this,  prop.properties);  [CE]  cannot  find  symbol  properties  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(this,  prop.properties);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this,  prop.properties);	  Collections.sort(this.properties);    	non-compiled	[CE]  cannot  find  symbol  properties	34	None	replace
1059	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1060	[BUG]  [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1061	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesRenamed;    	compilable	  [FE]  IllegalArgumentException  	130	60	replace
1062	[BUG]  [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++instancesRenamed;    	compilable	  [FE]  IllegalArgumentException  	130	60	replace
1063	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  ++singleTypeProps;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1064	[BUG]  [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  ++singleTypeProps;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1065	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  prop.skipRenaming  =  false;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  prop.skipRenaming  =  false;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1066	[BUG]  [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  prop.skipRenaming  =  false;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  prop.skipRenaming  =  false;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesRenamed;  }  else  {  prop.skipRenaming  =  false;  }	  ++instancesRenamed;    	compilable	  [FE]  ComparisonFailure  	130	2	replace
1067	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	4	None	replace
1068	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	4	None	replace
1069	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	148	None	replace
1070	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	148	None	replace
1071	[BUG]  [BUGGY]  Integer  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Integer  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Integer  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	6	None	replace
1072	[BUG]  [BUGGY]  JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeProperty  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1073	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getSingleTypeProps().size();  ++propsRenamed;  }	  ++propsRenamed;    int    propsRenamed    =    getSingleTypeProps().size();    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
1074	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),  skipRenaming));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),  skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),  skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  ';'  expected	172	None	replace
1075	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  	172	None	replace
1076	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),   "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  	172	None	replace
1077	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  prop.skipRenaming,  rootType.toString(),   "   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    skipRenaming));    	non-compiled	[CE]  	172	None	replace
1078	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skipRenaming));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	53	None	replace
1079	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  If(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    If(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  ';'  expected	87	None	add
1080	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipped)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipped)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skipped	87	None	add
1081	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
1082	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
1083	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
1084	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)  {  ++propsSkipped;  }  else  if(prop.skipRenaming)  {  ++propsSkipped;  }	  	compilable	  [FE]  ComparisonFailure  	87	2	add
1085	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	65	None	replace
1086	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    null);    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	65	None	replace
1087	[BUG]  [BUGGY]  if(node.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(node.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(node.skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	12	None	replace
1088	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.separator!=  null)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  separator  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.separator!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.separator!=  null)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||    prop.singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  separator	188	None	replace
1089	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  true));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  true));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  true));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
1090	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Prop.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  true));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false));    	non-compiled	[CE]  ';'  expected	110	None	replace
1091	[BUG]  [BUGGY]  if(prop.skipped)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipped)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped)  {  if(singleTypeProps!=  null)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1092	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.size()  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1093	[BUG]  [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null  &&  singleTypeProps.length  >  0)  {  if(prop.skipRenaming)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
1094	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
1095	[BUG]  [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  ++instancesSkipped;  }	  ++instancesSkipped;    ++instancesSkipped;    	compilable	  [FE]  ComparisonFailure  	76	2	replace
1096	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  skipRenaming);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	72	None	replace
1097	[BUG]  [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  prop.name);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps;  NodeUtil.removeChild(prop.skipRenaming,  prop.name);	  ++singleTypeProps;    NodeUtil.removeChild(prop.skipRenaming);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	72	None	replace
1098	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.types;  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.types;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.types;	  JSTypeNative[]    props    =    prop.skipRenaming;    	non-compiled	[CE]  incompatible  types	16	None	replace
1099	[BUG]  [BUGGY]  JSTypeNative  props  =  prop.propertiesToError();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative  props  =  prop.propertiesToError();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative  props  =  prop.propertiesToError();	  JSTypeNative[]    props    =    prop.propertiesToError();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1100	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToError();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToError();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToError();	  JSTypeNative[]    props    =    prop.propertiesToError();    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",   "));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(), ",   "));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    prop.skipRenaming,       "       "));    	non-compiled	[CE]  	45	None	replace
1102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skippingRenaming));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skippingRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  skippingRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    newName));    	non-compiled	[CE]  ';'  expected	46	None	replace
1103	[BUG]  [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name,  skipRenaming);  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  int  singleTypeProps  =  propertiesToErrorFor(prop.name,  skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	int  singleTypeProps  =  propertiesToErrorFor(prop.name,  skipRenaming);	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(prop.name);    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	74	None	replace
1104	[BUG]  [BUGGY]  if(singleTypeProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  incompatible  types	192	None	replace
1105	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(singleTypeProps!=  null)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	add
1106	[BUG]  [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)        {        ++propsSkipped;        }        else        {        ++singleTypeProps;        }        if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!skipRenaming)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenaming	10	None	add
1107	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.values();  [CE]  cannot  find  symbol  propertiesForProperties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProperties.values();	  JSTypeNative[]    props    =    prop.propertiesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProperties	39	None	replace
1108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ");    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	94	None	replace
1109	[BUG]  [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesRenamed)  {  ++instancesSkipped;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  }	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  incompatible  types	137	None	replace
1110	[BUG]  [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;  Node  instancesSkipped  =  getInstancesSkipped(node.getLastChild());	  ++instancesSkipped;    Node    instancesSkipped    =    getInstancesSkipped(node.getLastChild());    	non-compiled	[CE]  variable  instancesSkipped  is  already  defined  in  method  renameProperties()	137	None	replace
1111	[BUG]  [BUGGY]  JSTypeNative[]  propNames  =  prop.propertyNames.findTypes();  [CE]  cannot  find  symbol  propertyNames  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  propNames  =  prop.propertyNames.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  propNames  =  prop.propertyNames.findTypes();	  JSTypeNative[]    props    =    prop.propertyNames.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertyNames	38	None	replace
1112	[BUG]  [BUGGY]  Collections.sort(prop.propertiesToSkip);  [CE]  cannot  find  symbol  propertiesToSkip  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.propertiesToSkip);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.propertiesToSkip);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  propertiesToSkip	114	None	replace
1113	[BUG]  [BUGGY]  Collections.sort(prop.propsSkipped);  [CE]  cannot  find  symbol  propsSkipped  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.propsSkipped);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.propsSkipped);	  Collections.sort(prop.propertiesToError);    	non-compiled	[CE]  cannot  find  symbol  propsSkipped	114	None	replace
1114	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	152	None	replace
1115	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(prop.skipRenaming);  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(prop.skipRenaming);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	152	None	replace
1116	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	194	None	replace
1117	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray;  [CE]  cannot  find  symbol  propertiesToErrorArray  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray;	  JSTypeNative[]    props    =    prop.propertiesToError;    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorArray	123	None	replace
1118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.skipRenaming,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   ");	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       ");    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	143	None	replace
1119	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(propsRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  if(propsRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    if(propsRenamed)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incompatible  types	108	None	add
1120	[BUG]  [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	180	None	replace
1121	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	180	None	replace
1122	[BUG]  [BUGGY]  parent.replaceChild(node,  prop.name);  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  parent.replaceChild(node,  prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	parent.replaceChild(node,  prop.name);	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  node	180	None	replace
1123	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.singleTypeProps!=  null)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	107	None	replace
1124	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps  ==  null)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.singleTypeProps  ==  null)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.singleTypeProps  ==  null)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	107	None	replace
1125	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippingRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming  ||  prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skippingRenaming	189	None	add
1126	[BUG]  [BUGGY]  if(prop.skipped  >  maxTypeProps)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipped  >  maxTypeProps)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped  >  maxTypeProps)  {  ++propsSkipped;  }	  if(prop.skipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	173	None	replace
1127	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	109	2	replace
1128	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    	compilable	  [FE]  ComparisonFailure  	109	2	replace
1129	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++this.propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  propsRenamed  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++this.propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++this.propsRenamed;  }  else  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  propsRenamed	109	None	replace
1130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  checkLevelForProp  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  prop.name,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  checkLevelForProp	98	None	replace
1131	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    while(prop.skipRenaming)    {    ++propsSkipped;    }    timeout    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
1132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skippingRenaming);  [CE]  cannot  find  symbol  node  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skippingRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "* ",  skippingRenaming);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "*   ",    tt);    	non-compiled	[CE]  cannot  find  symbol  node	96	None	replace
1133	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSked;  }  else  {  return;  }  [CE]  cannot  find  symbol  instancesSked  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  return;  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSked;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    return;    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSked;  }  else  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  instancesSked	62	None	add
1134	[BUG]  [BUGGY]  ++prop.skipRenaming  =  prop.skipRenaming;  [CE]  bad  operand  type  boolean  for  unary  operator  '++'  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++prop.skipRenaming  =  prop.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++prop.skipRenaming  =  prop.skipRenaming;	  ++prop.skipRenaming;    	non-compiled	[CE]  bad  operand  type  boolean  for  unary  operator  '++'	29	None	replace
1135	[BUG]  [BUGGY]  ++singleTypeProps.skipRenaming;  [CE]  int  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++singleTypeProps.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++singleTypeProps.skipRenaming;	  ++prop.skipRenaming;    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
1136	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skippingRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippingRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  if(!prop.skippingRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    if(!prop.skippingRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skippingRenaming	104	None	add
1137	[BUG]  [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  for(!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!prop.skipRenaming)  {  ++propsSkipped;  }  for(!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!prop.skipRenaming)    {    ++propsSkipped;    }    for(!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  not  a  statement	104	None	add
1138	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorArray  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorArray.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorArray.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToError.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorArray	153	None	replace
1139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
1140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
1141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.inVALIDATION,  rootType.toString());  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.inVALIDATION,  rootType.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.inVALIDATION,  rootType.toString());	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
1142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
1143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  false);  [CE]  cannot  find  symbol  node  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  false);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  prop.skipRenaming,  prop.name,  rootType.toString(),  false);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    false);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
1144	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp.getTypes();  [CE]  cannot  find  symbol  propertiesToProp  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToProp.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToProp.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToProp	122	None	replace
1145	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.getTypes();  [CE]  cannot  find  symbol  propertiesForProperties  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProperties.getTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProperties.getTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.getTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProperties	122	None	replace
1146	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),'  '));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),'  '));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),'  '));	  Context.report(JSError.make(SourceNameUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	102	None	replace
1147	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	119	None	add
1148	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(prop.singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(prop.singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	119	None	add
1149	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenaming	119	None	add
1150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  &&!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	141	2	replace
1151	[BUG]  [BUGGY]  if(prop.skipRenaming  &&!prop.skipRenaming)  {  ++propsSkipped;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  &&!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  &&!prop.skipRenaming)  {  ++propsSkipped;  }	  if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	141	2	replace
1152	[BUG]  [BUGGY]  if(!propsRenaming.skipRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  propsRenaming  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!propsRenaming.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!propsRenaming.skipRenaming)  {  ++singleTypeProps;  }	  if(!singleTypeProps.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  propsRenaming	26	None	replace
1153	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForSkip.getProperties();  [CE]  cannot  find  symbol  propertiesForSkip  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForSkip.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForSkip.getProperties();	  JSTypeNative[]    props    =    prop.propertiesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesForSkip	18	None	replace
1154	[BUG]  [BUGGY]  if(switchRenaming)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  switchRenaming  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(switchRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(switchRenaming)  {  ++singleTypeProps;  }	  if(skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  switchRenaming	48	None	replace
1155	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.findTypes();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.rootTypes.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
1156	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProp.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProp  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorForProp.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProp	35	None	replace
1157	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProperties.findTypes();  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProperties.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorForProperties.findTypes();	  JSTypeNative[]    props    =    rootTypes.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	35	None	replace
1158	[BUG]  [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  getInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    getInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
1159	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp.findTypes();  [CE]  cannot  find  symbol  propertiesForProp  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesForProp.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesForProp.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propertiesForProp	197	None	replace
1160	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.findTypes();  [CE]  package  property  does  not  exist  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertiesToSkip.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertiesToSkip.findTypes();	  JSTypeNative[]    props    =    prop.propertiesToErrorForProp.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	197	None	replace
1161	[BUG]  [BUGGY]  InstancesSkipped  ++instancesSkipped;  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  ++instancesSkipped;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  ++instancesSkipped;	  ++instancesSkipped;    InstancesSkipped    ++instancesSkipped;    	non-compiled	[CE]  ';'  expected	133	None	replace
1162	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.properties.getProperties();  [CE]  package  property  does  not  exist  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.properties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.properties.getProperties();	  JSTypeNative[]    props    =    prop.properties.getProperties();    	non-compiled	[CE]  package  property  does  not  exist	21	None	replace
1163	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  NodeTraversal.traverse(compiler,  node,  codingConvention,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),   "   "));  }	  ++singleTypeProps;    NodeTraversal.traverse(compiler,    node,    codingConvention,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	128	None	replace
1164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  new  Property(prop.skipRenaming));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  new  Property(prop.skipRenaming));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  typeSystem.toString(),  new  Property(prop.skipRenaming));	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
1165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming),  typeSystem);  [CE]  cannot  find  symbol  node  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming),  typeSystem);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  new  Property(prop.skipRenaming),  typeSystem);	  NodeTraversal.traverse(compiler,    node,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Property(prop.skipRenaming));    	non-compiled	[CE]  cannot  find  symbol  node	171	None	replace
1166	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	201	None	replace
1167	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [CE]  cannot  find  symbol  node  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  propsRenamed  =  getPropertiesRenamed(node);  ++propsRenamed;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    ++propsRenamed;    	non-compiled	[CE]  cannot  find  symbol  node	201	None	replace
1168	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
1169	[BUG]  [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++instancesSkipped;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(instancesSkipped  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++instancesSkipped;  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  IllegalArgumentException  	58	60	add
1170	[BUG]  [BUGGY]  ||(propsSkipped  ==  null  &&  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(propsSkipped  ==  null  &&  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(propsSkipped  ==  null  &&  propsRenamed.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY))  {  ++propsSkipped;  }	  if(singleTypeProps    ==    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1171	[BUG]  [BUGGY]  ||(propsSkipped  ==  null  &&  propsRenamed.contains(prop.name)))  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(propsSkipped  ==  null  &&  propsRenamed.contains(prop.name)))  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(propsSkipped  ==  null  &&  propsRenamed.contains(prop.name)))  {  ++propsSkipped;  }	  if(singleTypeProps    ==    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1172	[BUG]  [BUGGY]  ||(propsSkipped  ==  null  &&  propsToSkip.contains(prop.name)))  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||(propsSkipped  ==  null  &&  propsToSkip.contains(prop.name)))  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||(propsSkipped  ==  null  &&  propsToSkip.contains(prop.name)))  {  ++propsSkipped;  }	  if(singleTypeProps    ==    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
1173	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	182	None	replace
1174	[BUG]  [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	182	None	replace
1175	[BUG]  [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	182	None	replace
1176	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	182	None	replace
1177	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.rootTypesToSkip.getProperties();  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.rootTypesToSkip.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.rootTypesToSkip.getProperties();	  JSTypeNative[]    props    =    rootTypesToSkip.getProperties();    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	20	None	replace
1178	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||! "prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skipRenaming  ||! "prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming  ||! "prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  unclosed  string  literal	140	None	add
1179	[BUG]  [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skippingRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  if(prop.skippingRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||!prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skippingRenaming  ||!prop.skipRenaming)  {  ++propsSkipped;  }	  	non-compiled	[CE]  cannot  find  symbol  skippingRenaming	140	None	add
1180	[BUG]  [BUGGY]  propsSkipped  =  ++prop.skipRenaming;  [CE]  bad  operand  type  boolean  for  unary  operator  '++'  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  =  ++prop.skipRenaming;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped  =  ++prop.skipRenaming;	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  type  boolean  for  unary  operator  '++'	105	None	replace
1181	[BUG]  [BUGGY]  Property  propsSkipped  =  getPropertiesSkipped(prop.name);  [CE]  variable  propsSkipped  is  already  defined  in  method  renameProperties()  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Property  propsSkipped  =  getPropertiesSkipped(prop.name);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Property  propsSkipped  =  getPropertiesSkipped(prop.name);	  if(!prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  variable  propsSkipped  is  already  defined  in  method  renameProperties()	105	None	replace
1182	[BUG]  [BUGGY]  Context.checkState(skipRenaming);  [CE]  cannot  find  symbol  skipRenaming  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(skipRenaming);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(skipRenaming);	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(propsSkipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	14	None	replace
1183	[BUG]  [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(skipRenaming  ||  prop.skipRenaming)  {  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(skipRenaming  ||  prop.skipRenaming)  {	  if(prop.skipRenaming)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    if(propsSkipped)    {    ++propsSkipped;    }    else    {    ++singleTypeProps;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1184	[BUG]  [BUGGY]  ++simpleTypeProps;  [CE]  cannot  find  symbol  simpleTypeProps  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++simpleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++simpleTypeProps;	  ++skipRenaming;    	non-compiled	[CE]  cannot  find  symbol  simpleTypeProps	30	None	replace
1185	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.parent.findTypes();  [CE]  cannot  find  symbol  parent  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.parent.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.parent.findTypes();	  JSTypeNative[]    props    =    parent.findTypes();    	non-compiled	[CE]  cannot  find  symbol  parent	37	None	replace
1186	[BUG]  [BUGGY]  propsSkipped  =!singleTypeProps;  [CE]  bad  operand  type  int  for  unary  operator  '!'  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  =!singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped  =!singleTypeProps;	  if(!singleTypeProps)    {    ++propsSkipped;    }    	non-compiled	[CE]  bad  operand  type  int  for  unary  operator  '!'	27	None	replace
1187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  =  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	propsSkipped  =  ++singleTypeProps;	  if(!singleTypeProps)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	27	2	replace
1188	[BUG]  [BUGGY]  propsSkipped  =  ++singleTypeProps;  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  propsSkipped  =  ++singleTypeProps;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	propsSkipped  =  ++singleTypeProps;	  if(!singleTypeProps)    {    ++propsSkipped;    }    	compilable	  [FE]  ComparisonFailure  	27	2	replace
1189	[BUG]  [BUGGY]  if(singleTypeProps.contains(prop.name))  {  ++propsSkipped;  }  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.contains(prop.name))  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.contains(prop.name))  {  ++propsSkipped;  }	  if(prop.skipRenaming)    {    ++propsSkipped;    }    if(prop.skipRenaming)    {    ++propsSkipped;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	88	None	replace
1190	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getProperty(prop.name);  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getProperty(prop.name);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	151	None	replace
1191	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++singleTypeProps;  int  singleTypeProps  =  propertiesToErrorFor(rootType.toString());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ++singleTypeProps;    int    singleTypeProps    =    propertiesToErrorFor(rootType.toString());    	non-compiled	[CE]  variable  singleTypeProps  is  already  defined  in  method  renameProperties()	71	None	replace
1192	[BUG]  [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.checkState(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }	  if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    	non-compiled	[CE]  ';'  expected	187	None	replace
1193	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));  [CE]  cannot  find  symbol  node  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),  null));	          Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),    new    Name()));    	non-compiled	[CE]  cannot  find  symbol  node	169	None	replace
1194	[BUG]  [BUGGY]  if(prop.skipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  cannot  find  symbol  skipped  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipped  <  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(prop.skipRenaming    <    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  skipped	86	None	replace
1195	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propers.findTypes();  [CE]  cannot  find  symbol  propers  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propers.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propers.findTypes();	  JSTypeNative[]    props    =    prop.properties.findTypes();    	non-compiled	[CE]  cannot  find  symbol  propers	199	None	replace
1196	[BUG]  [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProp.types.findTypes();  [CE]  package  propertiesToErrorForProp  does  not  exist  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  propertiesToErrorForProp.types.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  propertiesToErrorForProp.types.findTypes();	  JSTypeNative[]    props    =    prop.types.findTypes();    	non-compiled	[CE]  package  propertiesToErrorForProp  does  not  exist	155	None	replace
1197	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.types.findTypes(prop.skipRenaming);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.types.findTypes(prop.skipRenaming);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.types.findTypes(prop.skipRenaming);	  JSTypeNative[]    props    =    prop.types.findTypes();    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
1198	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.types.findTypes();  [CE]  package  property  does  not  exist  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.types.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.types.findTypes();	  JSTypeNative[]    props    =    prop.types.findTypes();    	non-compiled	[CE]  package  property  does  not  exist	155	None	replace
1199	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  int  cannot  be  dereferenced  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	120	None	replace
1200	[BUG]  [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  int  cannot  be  dereferenced  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  else  {  return;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	120	None	replace
1201	[BUG]  [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [CE]  incomparable  types:  int  and  <null>  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(singleTypeProps  ==  null)  {  ++singleTypeProps;  }  else  {  return;  }	  if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    return;    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	120	None	replace
1202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString());  [CE]  cannot  find  symbol  rootType  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  rootType	42	None	replace
1203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());  [CE]  cannot  find  symbol  rootType  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  prop.skipRenaming.toString());	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString());    	non-compiled	[CE]  cannot  find  symbol  rootType	42	None	replace
1204	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	195	2	add
1205	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	compilable	  [FE]  ComparisonFailure  	195	2	add
1206	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming    ||    prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	195	None	add
1207	[BUG]  [BUGGY]  ||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1208	[BUG]  [BUGGY]  ||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  singleTypeProps!=  null  &&  singleTypeProps.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++propsSkipped;  }	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1209	[BUG]  [BUGGY]  ||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||  singleTypeProps!=  null  &&  propsSkipped.size()  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY);	  if(singleTypeProps!=    null)    {    ++propsSkipped;    }    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
1210	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.typeSystem.findTypes();  [CE]  cannot  find  symbol  typeSystem  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.typeSystem.findTypes();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.typeSystem.findTypes();	  JSTypeNative[]    props    =    typeSystem.findTypes();    	non-compiled	[CE]  cannot  find  symbol  typeSystem	36	None	replace
1211	[BUG]  [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.type);  [CE]  cannot  find  symbol  type  [FE]                        ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  typeSystem.findTypes(prop.type);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  typeSystem.findTypes(prop.type);	  JSTypeNative[]    props    =    typeSystem.findTypes();    	non-compiled	[CE]  cannot  find  symbol  type	36	None	replace
1212	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	159	2	replace
1213	[BUG]  [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming  ||  prop.skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  ComparisonFailure  	159	2	replace
1214	[BUG]  [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  skipRenaming  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(!skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(!skipRenaming)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  skipRenaming	159	None	replace
1215	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	159	None	replace
1216	[BUG]  [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]          ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.singleTypeProps!=  null)  {  ++propsRenamed;  }	  if(prop.skipRenaming)    {    ++propsRenamed;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	159	None	replace
1217	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++inVALIDATION_WARNINGS_PER_PROPERTY;  Property  propsRenamed  =  getPropertiesRenamed(node);  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  cannot  find  symbol  inVALIDATION_WARNINGS_PER_PROPERTY	149	None	replace
1218	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  ++singleTypeProps;  }  [CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)  {  ++propsRenamed;  Property  propsRenamed  =  getPropertiesRenamed(node);  }  else  {  ++singleTypeProps;  }	  ++propsRenamed;    Property    propsRenamed    =    getPropertiesRenamed(node);    	non-compiled	[CE]  variable  propsRenamed  is  already  defined  in  method  renameProperties()	149	None	replace
1219	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	181	None	add
1220	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	181	None	add
1221	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	add	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	181	60	add
1222	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	181	60	add
1223	[BUG]  [BUGGY]  JSTypeNative[]  propNames  =  prop.propertyNames;  [CE]  cannot  find  symbol  propertyNames  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  propNames  =  prop.propertyNames;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  propNames  =  prop.propertyNames;	  JSTypeNative[]    props    =    prop.propertyNames;    	non-compiled	[CE]  cannot  find  symbol  propertyNames	17	None	replace
1224	[BUG]  [BUGGY]  JSTypeNative[]  props  =  property.propertyNames;  [CE]  cannot  find  symbol  property  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  property.propertyNames;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  property.propertyNames;	  JSTypeNative[]    props    =    prop.propertyNames;    	non-compiled	[CE]  cannot  find  symbol  property	17	None	replace
1225	[BUG]  [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));  [CE]  cannot  find  symbol  node  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesRenamed;  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesRenamed;    Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  nativeTypes.toString(), "   "));	  	non-compiled	[CE]  cannot  find  symbol  node	129	None	add
1226	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  new  Property());  [CE]  cannot  find  symbol  properties  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  new  Property());	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
1227	[BUG]  [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  parent);  [CE]  cannot  find  symbol  properties  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  prop.skipRenaming,  parent);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  prop.skipRenaming,  parent);	  Collections.sort(prop.properties,    prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  properties	164	None	replace
1228	[BUG]  [BUGGY]  Collections.sort(this.properties,  new  Property());  [CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(this.properties,  new  Property());  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(this.properties,  new  Property());	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  constructor  Property  in  class  DisambiguateProperties<T>.Property  cannot  be  applied  to  given  types;	165	None	replace
1229	[BUG]  [BUGGY]  Collections.sort(prop.properties,  new  Property(0));  [CE]  cannot  find  symbol  properties  [FE]                      ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.properties,  new  Property(0));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.properties,  new  Property(0));	  Collections.sort(prop.properties,    new    Property());    	non-compiled	[CE]  cannot  find  symbol  properties	165	None	replace
1230	[BUG]  [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1231	[BUG]  [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(instancesSkipped  <  T>)  {  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name);  }	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
1232	[BUG]  [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	++instancesSkipped;  InstancesSkipped  <  T>  instancesSkipped  =  findInstancesSkipped(node,  checkLevelForProp,  prop.name,  instancesRenamed);	  ++instancesSkipped;    InstancesSkipped    <    T>    instancesSkipped    =    findInstancesSkipped(node,    checkLevelForProp,    prop.name);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1233	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++propsRenamed;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++propsRenamed;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++propsRenamed;  }	  ++propsRenamed;    ||!prop.skipRenaming)    {    ++propsRenamed;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1234	[BUG]  [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkip;  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  ||!prop.skipRenaming)  {  ++propsSkip;  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	||!prop.skipRenaming)  {  ++propsSkip;	  ++propsRenamed;    ||!prop.skipRenaming)    {    ++propsRenamed;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
1235	[BUG]  [BUGGY]  if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  props  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(props.skipRenaming  >  MAX_INVALDIATION_WARNINGS_PER_PROPERTY)  {  ++singleTypeProps;  }	  if(singleTypeProps.skipRenaming    >    MAX_INVALDIATION_WARNINGS_PER_PROPERTY)    {    ++propsSkipped;    }    	non-compiled	[CE]  cannot  find  symbol  props	85	None	replace
1236	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.rootTypesToSkip.values();  [CE]  cannot  find  symbol  rootTypesToSkip  [FE]                          ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.rootTypesToSkip.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.rootTypesToSkip.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  cannot  find  symbol  rootTypesToSkip	41	None	replace
1237	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.values();  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.rootTypes.values();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.rootTypes.values();	  JSTypeNative[]    props    =    rootTypesToSkip.values();    	non-compiled	[CE]  incompatible  types	41	None	replace
1238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),   "   "));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),   "   "));  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	NodeTraversal.traverse(compiler,  rootType,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  property.toString(),   "   "));	  NodeTraversal.traverse(compiler,    rootType,    checkLevelForProp,    Warnings.INVALIDATION_ON_TYPE,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  	111	None	replace
1239	[BUG]  [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToErrorForProp;  [CE]  ']'  expected  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToErrorForProp;  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  new  JSTypeNative[prop.propertiesToErrorForProp;	  JSTypeNative[]    props    =    prop.properties;    	non-compiled	[CE]  ']'  expected	22	None	replace
1240	[BUG]  [BUGGY]  Collections.sort(prop.skipRenaming,  prop.type);  [CE]  cannot  find  symbol  type  [FE]                  ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Collections.sort(prop.skipRenaming,  prop.type);  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Collections.sort(prop.skipRenaming,  prop.type);	  Collections.sort(prop.skipRenaming);    	non-compiled	[CE]  cannot  find  symbol  type	31	None	replace
1241	[BUG]  [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  null));  [CE]  cannot  find  symbol  node  [FE]            ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  null));  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	Context.report(JSError.make(NodeUtil.getSourceName(node),  checkLevelForProp,  Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,  prop.name,  rootType.toString(),  null));	  Context.report(JSError.make(NodeUtil.getSourceName(node),    checkLevelForProp,    Warnings.INVALIDATION_WARNINGS_PER_PROPERTY,    prop.name,    rootType.toString(),       "       "));    	non-compiled	[CE]  cannot  find  symbol  node	55	None	replace
1242	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  incomparable  types:  int  and  <null>  [FE]    ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  incomparable  types:  int  and  <null>	179	None	add
1243	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  singleTypeProps  [FE]      ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(prop.singleTypeProps!=  null)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  singleTypeProps	179	None	add
1244	[BUG]  [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [CE]  cannot  find  symbol  skipRenaming  [FE]        ComparisonFailure    [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  if(prop.skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }  [BUGGY]      }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	if(prop.skipRenaming)    {    ++singleTypeProps;    }    else    {    ++singleTypeProps;    }    if(!skipRenaming)  {  ++singleTypeProps;  }  else  {  ++singleTypeProps;  }	  	non-compiled	[CE]  cannot  find  symbol  skipRenaming	179	None	add
1245	[BUG]  [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.getProperties();  [CE]  cannot  find  symbol  propertiesToErrorForProperties  [FE]                ComparisonFailure      [CONTEXT]      compiler.report(JSError.make(  NodeUtil.getSourceName(node),  node,  checkLevelForProp,  Warnings.INVALIDATION_ON_TYPE,  prop.name,  rootType.toString(),       "     "));  }  }  }  }  else  {  if  (prop.skipRenaming)  {      [BUGGY]  JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.getProperties();  [BUGGY]      ++propsSkipped;  }  else  {  ++singleTypeProps;  }  }  [CLASS]  DisambiguateProperties  Warnings  Property  AbstractScopingCallback  FindExternProperties  FindRenameableProperties  JSTypeSystem  ConcreteTypeSystem  [METHOD]  renameProperties  [RETURN_TYPE]  void  [VARIABLES]  TypeSystem  typeSystem  Set  allTypes  invalidatingTypes  newTypesToSkip  renameNodes  reported  rootTypesToSkip  typesToSkip  CheckLevel  checkLevelForProp  Node  node  UnionFind  types  String  field  name  newName  qName  suggestion  Logger  logger  int  MAX_INVALDIATION_WARNINGS_PER_PROPERTY  count  instancesRenamed  instancesSkipped  nextUniqueId  originalTypesSize  propsRenamed  propsSkipped  singleTypeProps  TightenTypes  tt  Stack  scopes  Multimap  invalidationMap  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  changed  skipRenaming  T  rootType  DiagnosticType  INVALIDATION  INVALIDATION_ON_TYPE  CodingConvention  codingConvention  convention  JSTypeNative[]  nativeTypes  Map  propNames  properties  propertiesToErrorFor  rootTypes  Property  prop  	projects/Closure118/src/com/google/javascript/jscomp/DisambiguateProperties.java	0.18257418583505536	609	609	2	replace	JSTypeNative[]  props  =  prop.propertiesToErrorForProperties.getProperties();	  JSTypeNative[]    props    =    prop.propertyNames.getProperties();    	non-compiled	[CE]  cannot  find  symbol  propertiesToErrorForProperties	121	None	replace
