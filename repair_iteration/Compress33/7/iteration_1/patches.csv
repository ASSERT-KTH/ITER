bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	replace
2	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	replace
3	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	replace
4	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	7	2	replace
5	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	7	2	replace
6	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
7	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
8	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
9	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
10	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
11	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
12	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
13	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
14	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);	      	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  in.write(signatureLength);  [CE]  [FE]                  CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  in.write(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength);	      	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  in.mark(signatureLength);  [CE]  [FE]                    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  in.mark(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength);	      	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength);  [CE]  [FE]                      CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength);	      	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength);  [CE]  [FE]                        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  byte[]  signature  =  in.read(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength);	      	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  in.close();  [CE]  [FE]                          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  in.close();  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.close();	      	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  [FE]                            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length);	      	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	4	None	replace
22	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	4	None	replace
23	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	4	None	replace
24	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
25	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
26	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
27	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
28	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	6	None	add
29	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  If  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  If  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    If  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  ';'  expected	6	None	add
30	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	6	None	add
31	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	6	None	add
32	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength);	      	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  [FE]                  CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	      	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  [FE]                    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in);	      	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
36	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
37	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
38	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	6	None	add
39	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
40	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
41	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
42	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
43	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	4	None	replace
44	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [CE]  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
46	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
47	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  [FE]                CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	      	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  [FE]                  CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	      	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  [FE]                    CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated);	      	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	4	None	replace
51	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
52	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();    [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [BUGGY]    return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
