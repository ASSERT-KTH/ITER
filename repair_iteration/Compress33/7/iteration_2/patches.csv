bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	22	None	replace
2	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	22	None	replace
3	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	22	None	replace
4	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	22	None	replace
5	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  cannot  find  symbol  DFLATE  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DFLATE)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  DFLATE	22	None	replace
6	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  PACK200))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  PACK200))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  PACK200))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	22	None	replace
7	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
8	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength,  decompressConcatenated);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength,  decompressConcatenated);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
9	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
10	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength,  DEFLATE);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength,  DEFLATE);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
11	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  0);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  0);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  0);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
12	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
13	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  BZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
14	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  BZIP2,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  BZIP2,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  BZIP2,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
15	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
16	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DFLATE))  {  [CE]  cannot  find  symbol  DFLATE  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  cannot  find  symbol  DFLATE	25	None	replace
17	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP2))  {  [CE]  cannot  find  symbol  GZIP2  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  cannot  find  symbol  GZIP2	25	None	replace
18	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
19	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  3);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  3);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  3);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
20	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
21	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  1);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  1);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
22	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
23	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
24	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  10);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  10);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  10);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  	47	None	replace
25	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [CE]  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  	21	None	replace
26	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	21	None	replace
27	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	21	None	replace
28	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	21	None	replace
29	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
30	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
31	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
32	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
33	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  cannot  find  symbol  descompressConcatenated  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  descompressConcatenated	8	None	replace
34	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
35	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	50	None	replace
36	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	50	None	replace
37	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	50	None	replace
38	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(GzipCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	if(GzipCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(Signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	31	2	replace
39	[BUG]  [BUGGY]  if(GzipCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(GzipCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(GzipCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(Signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	31	2	replace
40	[BUG]  [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(GZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(Signature,    signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	31	None	replace
41	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  cannot  find  symbol  SignatureLength  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  SignatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if    (BZip2CompressorInputStream.matches(signature,    SignatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  SignatureLength	30	None	replace
42	[BUG]  [BUGGY]  byte[]  signature  =  in.read();  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read();  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read();	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
43	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully(signatureLength);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.readFully(signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.readFully(signatureLength);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
44	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
45	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  4);  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  4);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  4);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
46	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  1);  [CE]  [FE]                                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  1);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
47	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  12);  [CE]  [FE]                                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  12);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
48	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	23	None	replace
49	[BUG]  [BUGGY]  if(DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  cannot  find  symbol  DeFLATE  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  DeFLATE	23	None	replace
50	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	replace
51	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	replace
52	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	replace
53	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
54	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
55	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
56	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  	34	None	replace
57	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  	34	None	replace
58	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  	34	None	replace
59	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [CE]  cannot  find  symbol  SignatureLength  [FE]        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  SignatureLength	38	None	replace
60	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	5	None	replace
61	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
62	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
63	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength  +  1);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
64	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  1);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  1);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
65	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  4);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  4);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  4);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
66	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength  +  12);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
67	[BUG]  [BUGGY]  if  (in.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.markSupported())  {  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
68	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	41	None	replace
69	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported()  ||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.markSupported()  ||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	41	None	replace
70	[BUG]  [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	41	None	replace
71	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength);    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  1);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  1);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength);    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength);    	non-compiled	[CE]  	14	None	replace
74	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
75	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  in)  {  [CE]  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  in)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  in)  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  	36	None	replace
76	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DELETE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DELETE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DELETE))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
77	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
78	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
79	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
80	[BUG]  [BUGGY]  if  (in.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.markSupported())  {  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
81	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
82	[BUG]  [BUGGY]  if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
83	[BUG]  [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
84	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
85	[BUG]  [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  signatureLength)  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  signatureLength)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.markSupported()  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  signatureLength)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
86	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [CE]  [FE]        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  	1	None	replace
87	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
88	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
89	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
90	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
91	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
92	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
93	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  in.mark(signatureLength),  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  in.mark(signatureLength),  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signatureLength,  in.mark(signatureLength),  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
94	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  GZIP,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  GZIP,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  GZIP,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
95	[BUG]  [BUGGY]  if  (GZIP.matches(signature,  DEFLATE,  GZIP))  {  [CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZIP.matches(signature,  DEFLATE,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZIP.matches(signature,  DEFLATE,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;	12	None	replace
96	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
97	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
98	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
99	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
100	[BUG]  [BUGGY]  if  (GZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	12	None	replace
101	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  GZIP,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  GZIP,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  GZIP,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
102	[BUG]  [BUGGY]  if  (GZIP.matches(signature,  decompressConcatenated,  BZip2CompressorInputStream))  {  [CE]  cannot  find  symbol  BZip2CompressorInputStream  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZIP.matches(signature,  decompressConcatenated,  BZip2CompressorInputStream))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZIP.matches(signature,  decompressConcatenated,  BZip2CompressorInputStream))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  cannot  find  symbol  BZip2CompressorInputStream	27	None	replace
103	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
104	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
105	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  PACK200))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  PACK200))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  PACK200))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
106	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  -  1);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
107	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  +  12);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
108	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  +  1);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
109	[BUG]  [BUGGY]  in.mark(signature.length);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signature.length);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signature.length);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
110	[BUG]  [BUGGY]  in.mark(signatureLength  -  12);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  -  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  -  12);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
111	[BUG]  [BUGGY]  in.mark(signatureLength  +  2);  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  +  2);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  +  2);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
112	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	4	None	add
113	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  If  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  If  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    If  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  ';'  expected	4	None	add
114	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  SignatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	4	None	add
115	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(Signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	4	None	add
116	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  SignatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	4	None	add
117	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
118	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
119	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
120	[BUG]  [BUGGY]  if  (DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  DeFLATE  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (DeFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  DeFLATE	46	None	replace
121	[BUG]  [BUGGY]  if  (decompressConcatenated.matches(signature,  BZip2CompressorInputStream)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  BZip2CompressorInputStream  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated.matches(signature,  BZip2CompressorInputStream)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated.matches(signature,  BZip2CompressorInputStream)||  DEFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  BZip2CompressorInputStream	46	None	replace
122	[BUG]  [BUGGY]  if  (DEFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (DEFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (DEFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;	46	None	replace
123	[BUG]  [BUGGY]  if  (decompressConcatenated.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	46	None	replace
124	[BUG]  [BUGGY]  if  (DFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  DFLATE  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (DFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (DFLATE.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  DFLATE	46	None	replace
125	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  DEFLATE.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  DEFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  DEFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	46	None	replace
126	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated,  BZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	46	None	replace
127	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	replace
128	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
129	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE),  decompressConcatenated)  {  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  	13	None	replace
130	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
131	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
132	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
133	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	35	None	replace
134	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	35	None	replace
135	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	35	None	replace
136	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	42	None	replace
137	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	42	None	replace
138	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	42	None	replace
139	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	42	None	replace
140	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [CE]  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  	44	None	replace
141	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)  {  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
142	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength),  decompressConcatenated)  {  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  	44	None	replace
143	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
144	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  BZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
145	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
146	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
147	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
148	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
149	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	43	None	replace
150	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	43	None	replace
151	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  	43	None	replace
152	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  DELETE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  DELETE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  DELETE))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	43	None	replace
153	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	43	None	replace
154	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	24	None	replace
155	[BUG]  [BUGGY]  if  (DeFLATE.matches(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  DeFLATE  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (DeFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (DeFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  DeFLATE	24	None	replace
156	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	6	None	replace
157	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	2	None	replace
158	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	39	None	replace
159	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	39	None	replace
160	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	39	None	replace
161	[BUG]  [BUGGY]  if  (in.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.markSupported())  {  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
162	[BUG]  [BUGGY]  if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	51	None	replace
163	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	51	None	replace
164	[BUG]  [BUGGY]  if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated  &&  BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	51	None	replace
165	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported()  ||  decompressConcatenated)  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported()  ||  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  in.markSupported()  ||  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	51	None	replace
166	[BUG]  [BUGGY]  if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.markSupported()  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	45	None	replace
167	[BUG]  [BUGGY]  if  (in.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.markSupported())  {  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (in.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (in.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
168	[BUG]  [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (!BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	45	None	replace
169	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
170	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
171	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  1);  [CE]  [FE]                                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  1);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  [FE]                                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
173	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);  [CE]  [FE]                                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
174	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  in.close();  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  in.close();  }	  in.close();    	non-compiled	[CE]  	19	None	replace
175	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	non-compiled	[CE]  	19	None	replace
176	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    	non-compiled	[CE]  	19	None	replace
177	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	19	2	replace
178	[BUG]  [BUGGY]  if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]                                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	19	2	replace
179	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
180	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
181	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
182	[BUG]  [BUGGY]  if(GZIPCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  cannot  find  symbol  GZIPCompressorInputStream  [FE]          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(GZIPCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(GZIPCompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    If    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  GZIPCompressorInputStream	29	None	replace
183	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length);	  InputStream    in    =    new    BZip2InputStream(signatureLength);    	non-compiled	[CE]  	17	None	replace
184	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  +  1);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength  +  1);	  InputStream    in    =    new    BZip2InputStream(signatureLength);    	non-compiled	[CE]  	17	None	replace
185	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);	  InputStream    in    =    new    BZip2InputStream(signatureLength);    	non-compiled	[CE]  	17	None	replace
186	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);	  InputStream    in    =    new    BZip2InputStream(signatureLength);    	non-compiled	[CE]  	17	None	replace
187	[BUG]  [BUGGY]  in.write(signatureLength  +  12);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  +  12);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
188	[BUG]  [BUGGY]  in.write(signatureLength  +  1);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  +  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  +  1);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
189	[BUG]  [BUGGY]  in.write(signatureLength  -  1);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  -  1);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
190	[BUG]  [BUGGY]  in.write(signature.length);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signature.length);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signature.length);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
191	[BUG]  [BUGGY]  in.write(signatureLength  -  12);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  -  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  -  12);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
192	[BUG]  [BUGGY]  in.write(signatureLength  +  2);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  +  2);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  +  2);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
193	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
194	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
195	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
196	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA),  decompressConcatenated)  {  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA))    {    	non-compiled	[CE]  	11	None	replace
197	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(in);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
198	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  DEFLATE);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  DEFLATE);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  	49	None	replace
199	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	replace
200	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip1CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip1CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if  (BZip2CompressorInputStream.matches(signature,  signatureLength)&&  BZip1CompressorInputStream.matches(signature,  signatureLength))  {	  	non-compiled	[CE]  'catch'  without  'try'	4	None	add
201	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressUntilEOF)  {  [CE]  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressUntilEOF)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressUntilEOF)  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  	21	None	replace
202	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
203	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  11);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  11);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength  +  11);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
204	[BUG]  [BUGGY]  in.write(signatureLength  +  11);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.write(signatureLength  +  11);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.write(signatureLength  +  11);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
205	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signature))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signature))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signature))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
206	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
207	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompress,  DEFLATE,  signatureLength))  {  [CE]  cannot  find  symbol  decompress  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompress,  DEFLATE,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompress,  DEFLATE,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  decompress	10	None	replace
208	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
209	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
210	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  decompressEOF  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressEOF)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  decompressEOF	35	None	replace
211	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	23	None	replace
212	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
213	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
214	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  0);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  0);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  	33	None	replace
215	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature,  GZIP))  {  [CE]  cannot  find  symbol  deFLATE  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(deFLATE,  signature,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  cannot  find  symbol  deFLATE	12	None	replace
216	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
217	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
218	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
219	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  UntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	44	None	replace
220	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	if  (BZip2CompressorInputStream.matches(signature,  0))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	compilable	  [FE]  CompressorException  	44	2	replace
221	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0))  {  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  0))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	compilable	  [FE]  CompressorException  	44	2	replace
222	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  UntilEOF)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  cannot  find  symbol  UntilEOF  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  UntilEOF)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  UntilEOF)||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	44	None	replace
223	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZIP2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZIP2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZIP2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE),    decompressConcatenated)    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	44	None	replace
224	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  12);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  12);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  +  12);	  InputStream    in    =    new    BZip2CompressorInputStream(signatureLength);    	non-compiled	[CE]  	14	None	replace
225	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
226	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(decompressConcatenated,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
227	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	36	None	replace
228	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0)&&  BZip2CompressorInputStream.matches(signature,  0))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	if  (BZip2CompressorInputStream.matches(signature,  0)&&  BZip2CompressorInputStream.matches(signature,  0))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	5	2	replace
229	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0)&&  BZip2CompressorInputStream.matches(signature,  0))  {  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  0)&&  BZip2CompressorInputStream.matches(signature,  0))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  0)&&  BZip2CompressorInputStream.matches(signature,  0))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	compilable	  [FE]  CompressorException  	5	2	replace
230	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  GZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
231	[BUG]  [BUGGY]  if  (GZIP.matches(signature,  decompressConcatenated,  BZIP))  {  [CE]  cannot  find  symbol  BZIP  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZIP.matches(signature,  decompressConcatenated,  BZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZIP.matches(signature,  decompressConcatenated,  BZIP))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  cannot  find  symbol  BZIP	27	None	replace
232	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  BZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
233	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  BZIP2))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  BZIP2))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  BZIP2))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
234	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  DEFLATE)  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  DEFLATE)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  BZIP2)||  DEFLATE)  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    BZIP2))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
235	[BUG]  [BUGGY]  in.flush();  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.flush();  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.flush();	  in.close();    	non-compiled	[CE]  	19	None	replace
236	[BUG]  [BUGGY]  in.markSupported();  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.markSupported();  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.markSupported();	  in.close();    	non-compiled	[CE]  	19	None	replace
237	[BUG]  [BUGGY]  in.reset();  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.reset();  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.reset();	  in.close();    	non-compiled	[CE]  	19	None	replace
238	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	24	None	replace
239	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	24	None	replace
240	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
241	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [CE]  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  	3	None	replace
242	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DELETE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DELETE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DELETE))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	replace
243	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature)||  in.markSupported())  {  [CE]  cannot  find  symbol  deFLATE  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(deFLATE,  signature)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  deFLATE	51	None	replace
244	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  GZIP))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  GZIP))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  GZIP))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	43	None	replace
245	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
246	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
247	[BUG]  [BUGGY]  in.seek(signatureLength);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.seek(signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.seek(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
248	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.mark(signatureLength  +  11);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.mark(signatureLength  +  11);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
249	[BUG]  [BUGGY]  InputStream  in  =  new  GZIP2CompressorInputStream(signature.length);  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  GZIP2CompressorInputStream(signature.length);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  GZIP2CompressorInputStream(signature.length);	  InputStream    in    =    new    BZip2CompressorInputStream(signature.length);    	non-compiled	[CE]  	20	None	replace
250	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	6	None	replace
251	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature)&&  in.markSupported())  {  [CE]  cannot  find  symbol  deFLATE  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(deFLATE,  signature)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(deFLATE,  signature)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  deFLATE	52	None	replace
252	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  decompressConcatenated)  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  in.markSupported()  ||  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
253	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
254	[BUG]  [BUGGY]  InputStream  in  =  new  GZIP2CompressorInputStream(in);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  GZIP2CompressorInputStream(in);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  GZIP2CompressorInputStream(in);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  	34	None	replace
255	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  [FE]                          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  	34	None	replace
256	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	39	None	replace
257	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	46	None	replace
258	[BUG]  [BUGGY]  if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	46	None	replace
259	[BUG]  [BUGGY]  if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [CE]  boolean  cannot  be  dereferenced  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (decompressConcatenated.matches(signature,  decompressConcatenated)||  DEFLATE.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	46	None	replace
260	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  DEFLATE.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    DEFLATE.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	46	None	replace
261	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	26	None	replace
262	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  4),  decompressConcatenated)  {  [CE]  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  4),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  4),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    	non-compiled	[CE]  	26	None	replace
263	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	45	None	replace
264	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  DEFLATE);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  DEFLATE);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
265	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
266	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signatureLength,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signatureLength,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
267	[BUG]  [BUGGY]  if  (GZIP2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  cannot  find  symbol  GZIP2CompressorInputStream  [FE]          CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZIP2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZIP2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    If    (BZip2CompressorInputStream.matches(signature,    signatureLength)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  GZIP2CompressorInputStream	29	None	replace
268	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(decompressConcatenated,  signature)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	41	None	replace
269	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
270	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(deFLATE,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [CE]  cannot  find  symbol  deFLATE  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(deFLATE,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(deFLATE,  LZMA)||  BZip2CompressorInputStream.matches(signature,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  deFLATE	22	None	replace
271	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  decompressConcatenated)  {	  if(BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  	22	None	replace
272	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  in)  {  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  in)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  DEFLATE),  in)  {	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    	non-compiled	[CE]  	23	None	replace
273	[BUG]  [BUGGY]  in.setLength(signatureLength);  [CE]  [FE]                        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.setLength(signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.setLength(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  	16	None	replace
274	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  DEFLATE)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    DEFLATE))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	24	None	replace
275	[BUG]  [BUGGY]  in.defaultWrite(signatureLength);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  in.defaultWrite(signatureLength);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	in.defaultWrite(signatureLength);	  in.write(signatureLength);    	non-compiled	[CE]  	15	None	replace
276	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  DEFLATE)  {  [CE]  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  DEFLATE)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  LZMA)||  BZip2CompressorInputStream.matches(signature,  signatureLength),  DEFLATE)  {	  if    (BZip2CompressorInputStream.matches(signature,    LZMA)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  	3	None	replace
277	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
278	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	39	None	replace
279	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  [CE]  cannot  find  symbol  descompressConcatenated  [FE]              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  cannot  find  symbol  descompressConcatenated	39	None	replace
280	[BUG]  [BUGGY]  if  (GZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (GZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (GZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	39	None	replace
281	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  GZIP,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    decompressConcatenated,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	27	None	replace
282	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [CE]  [FE]                              CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  in.close();    	non-compiled	[CE]  	19	None	replace
283	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  10,  signatureLength);  }  [CE]  [FE]                                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  10,  signatureLength);  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  10,  signatureLength);  }	  in.close();    	non-compiled	[CE]  	19	None	replace
284	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	non-compiled	[CE]  	19	None	replace
285	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  -  1);  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  -  1);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.getBytes(signatureLength  -  1);	  byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  	32	None	replace
286	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  BZIP2);  [CE]  [FE]                            CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  BZIP2);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	byte[]  signature  =  in.read(signatureLength,  BZIP2);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  	18	None	replace
287	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	replace
288	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated)&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength)&&    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
289	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  decompressConcatenated)  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    in.markSupported())    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	52	None	replace
290	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)&&  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)&&  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)&&  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
291	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  in.markSupported())  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  in.markSupported())  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  in.markSupported())  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
292	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    decompressConcatenated))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	replace
293	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [CE]  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  	48	None	replace
294	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  DEFLATE))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	21	None	replace
295	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)&&  BZip2CompressorInputStream.matches(signature,  signatureLength,  LZMA))  {	  if(BZip2CompressorInputStream.matches(signature,    DEFLATE)&&    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	21	None	replace
296	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP),  decompressConcatenated)  {  [CE]  [FE]                    CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP),  decompressConcatenated)  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  GZIP),  decompressConcatenated)  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  	12	None	replace
297	[BUG]  [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  LZMA))  {  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();      [BUGGY]  if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  LZMA))  {  [BUGGY]      return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	if  (BZip2CompressorInputStream.matches(signature,  DEFLATE,  LZMA))  {	  if    (BZip2CompressorInputStream.matches(signature,    DEFLATE,    GZIP))    {    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	replace
