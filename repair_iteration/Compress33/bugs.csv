bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] if (in == null) { [FE] CompressorException [CONTEXT] throws CompressorException { [BUGGY] if (in == null) { [BUGGY] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	206	206	2	replace	
2	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throws CompressorException { [BUGGY] [BUGGY] if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	206	206	2	add	
3	[BUG] [BUGGY] if (!in.markSupported()) { [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } [BUGGY] if (!in.markSupported()) { [BUGGY] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	
4	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } [BUGGY] [BUGGY] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	
5	[BUG] [BUGGY] final byte[] signature = new byte[12]; [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } [BUGGY] final byte[] signature = new byte[12]; [BUGGY] in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	
6	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } [BUGGY] [BUGGY] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	
7	[BUG] [BUGGY] in.mark(signature.length); [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; [BUGGY] in.mark(signature.length); [BUGGY] try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	
8	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throws CompressorException { if (in == null) { throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; [BUGGY] [BUGGY] in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	
9	[BUG] [BUGGY] int signatureLength = IOUtils.readFully(in, signature); [FE] CompressorException [CONTEXT] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [BUGGY] int signatureLength = IOUtils.readFully(in, signature); [BUGGY] in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	
10	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throw new IllegalArgumentException("Stream must not be null."); } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { [BUGGY] [BUGGY] int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	add	
11	[BUG] [BUGGY] in.reset(); [FE] CompressorException [CONTEXT] } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); [BUGGY] in.reset(); [BUGGY]  if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	
12	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] } if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); [BUGGY] [BUGGY] in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	
13	[BUG] [BUGGY] if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [FE] CompressorException [CONTEXT] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); [BUGGY] if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	replace	
14	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] if (!in.markSupported()) { throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); [BUGGY] [BUGGY] if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	220	220	2	add	
15	[BUG] [BUGGY] return new BZip2CompressorInputStream(in, decompressConcatenated); [FE] CompressorException [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new BZip2CompressorInputStream(in, decompressConcatenated); [BUGGY] } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	
16	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] throw new IllegalArgumentException("Mark is not supported."); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] [BUGGY] return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	
17	[BUG] [BUGGY] if (GzipCompressorInputStream.matches(signature, signatureLength)) { [FE] CompressorException [CONTEXT] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } [BUGGY] if (GzipCompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	224	224	2	replace	
18	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } [BUGGY] [BUGGY] if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	224	224	2	add	
19	[BUG] [BUGGY] return new GzipCompressorInputStream(in, decompressConcatenated); [FE] CompressorException [CONTEXT] in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new GzipCompressorInputStream(in, decompressConcatenated); [BUGGY] } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	225	225	2	replace	
20	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] in.mark(signature.length); try { int signatureLength = IOUtils.readFully(in, signature); in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { [BUGGY] [BUGGY] return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	225	225	2	add	
21	[BUG] [BUGGY] if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [FE] CompressorException [CONTEXT] in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } [BUGGY] if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	228	228	2	replace	
22	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] in.reset(); if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } [BUGGY] [BUGGY] if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	228	228	2	add	
23	[BUG] [BUGGY] if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { [FE] CompressorException [CONTEXT] } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } [BUGGY] if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	232	232	2	replace	
24	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } [BUGGY] [BUGGY] if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	232	232	2	add	
25	[BUG] [BUGGY] if (ZCompressorInputStream.matches(signature, signatureLength)) { [FE] CompressorException [CONTEXT] } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } [BUGGY] if (ZCompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	236	236	2	replace	
26	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } [BUGGY] [BUGGY] if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	236	236	2	add	
27	[BUG] [BUGGY] if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { [FE] CompressorException [CONTEXT] if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  [BUGGY] if (XZUtils.matches(signature, signatureLength) &&    XZUtils.isXZCompressionAvailable()) { [BUGGY] XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	241	242	2	replace	
28	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  [BUGGY] [BUGGY] if (XZUtils.matches(signature, signatureLength) &&    XZUtils.isXZCompressionAvailable()) { XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	241	242	2	add	
29	[BUG] [BUGGY] if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { [FE] CompressorException [CONTEXT] if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } [BUGGY] if (LZMAUtils.matches(signature, signatureLength) &&    LZMAUtils.isLZMACompressionAvailable()) { [BUGGY] LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); } throw new CompressorException("No Compressor found for the stream signature."); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	246	247	2	replace	
30	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) { return new XZCompressorInputStream(in, decompressConcatenated); } [BUGGY] [BUGGY] if (LZMAUtils.matches(signature, signatureLength) &&    LZMAUtils.isLZMACompressionAvailable()) { LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); } throw new CompressorException("No Compressor found for the stream signature."); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	246	247	2	add	
31	[BUG] [BUGGY] } [FE] CompressorException [CONTEXT] return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); [BUGGY] } [BUGGY]  throw new CompressorException("No Compressor found for the stream signature."); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	253	253	2	replace	
32	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] return new XZCompressorInputStream(in, decompressConcatenated); } if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); [BUGGY] [BUGGY] } throw new CompressorException("No Compressor found for the stream signature."); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	253	253	2	add	
33	[BUG] [BUGGY] throw new CompressorException("No Compressor found for the stream signature."); [FE] CompressorException [CONTEXT] if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); } [BUGGY] throw new CompressorException("No Compressor found for the stream signature."); [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	255	255	2	replace	
34	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) { return new LZMACompressorInputStream(in); } } catch (IOException e) { throw new CompressorException("Failed to detect Compressor from InputStream.", e); } [BUGGY] [BUGGY] throw new CompressorException("No Compressor found for the stream signature."); } [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	255	255	2	add	
35	[BUG] [BUGGY] public CompressorStreamFactory() { [FE] CompressorException [CONTEXT] [BUGGY] public CompressorStreamFactory() { [BUGGY] this.decompressUntilEOF = null; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	149	149	2	replace	
36	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] [BUGGY] [BUGGY] public CompressorStreamFactory() { this.decompressUntilEOF = null; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	149	149	2	add	
37	[BUG] [BUGGY] private volatile boolean decompressConcatenated = false; [FE] CompressorException [CONTEXT] [BUGGY] private volatile boolean decompressConcatenated = false; [BUGGY]  [CLASS] CompressorStreamFactory  [VARIABLES] 	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	144	144	2	replace	
38	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] [BUGGY] [BUGGY] private volatile boolean decompressConcatenated = false; [CLASS] CompressorStreamFactory  [VARIABLES] 	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	144	144	2	add	
39	[BUG] [BUGGY] this.decompressUntilEOF = null; [FE] CompressorException [CONTEXT] public CompressorStreamFactory() { [BUGGY] this.decompressUntilEOF = null; [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	150	150	2	replace	
40	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public CompressorStreamFactory() { [BUGGY] [BUGGY] this.decompressUntilEOF = null; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	150	150	2	add	
41	[BUG] [BUGGY] } [FE] CompressorException [CONTEXT] public CompressorStreamFactory() { this.decompressUntilEOF = null; [BUGGY] } [BUGGY]  [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	151	151	2	replace	
42	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public CompressorStreamFactory() { this.decompressUntilEOF = null; [BUGGY] [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory()  [VARIABLES] boolean decompressConcatenated String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	151	151	2	add	
43	[BUG] [BUGGY] public CompressorStreamFactory(boolean decompressUntilEOF) { [FE] CompressorException [CONTEXT] [BUGGY] public CompressorStreamFactory(boolean decompressUntilEOF) { [BUGGY] this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  this.decompressConcatenated = decompressUntilEOF; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	163	163	2	replace	
44	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] [BUGGY] [BUGGY] public CompressorStreamFactory(boolean decompressUntilEOF) { this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  this.decompressConcatenated = decompressUntilEOF; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	163	163	2	add	
45	[BUG] [BUGGY] private volatile boolean decompressConcatenated = false; [FE] CompressorException [CONTEXT] [BUGGY] private volatile boolean decompressConcatenated = false; [BUGGY]  [CLASS] CompressorStreamFactory  [VARIABLES] 	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	144	144	2	replace	
46	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] [BUGGY] [BUGGY] private volatile boolean decompressConcatenated = false; [CLASS] CompressorStreamFactory  [VARIABLES] 	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	144	144	2	add	
47	[BUG] [BUGGY] this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF); [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { [BUGGY] this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF); [BUGGY]  this.decompressConcatenated = decompressUntilEOF; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	164	164	2	replace	
48	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { [BUGGY] [BUGGY] this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  this.decompressConcatenated = decompressUntilEOF; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	164	164	2	add	
49	[BUG] [BUGGY] this.decompressConcatenated = decompressUntilEOF; [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  [BUGGY] this.decompressConcatenated = decompressUntilEOF; [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	166	166	2	replace	
50	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  [BUGGY] [BUGGY] this.decompressConcatenated = decompressUntilEOF; } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	166	166	2	add	
51	[BUG] [BUGGY] } [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  this.decompressConcatenated = decompressUntilEOF; [BUGGY] } [BUGGY]  [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	167	167	2	replace	
52	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public CompressorStreamFactory(boolean decompressUntilEOF) { this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);  this.decompressConcatenated = decompressUntilEOF; [BUGGY] [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] <init> [RETURN_TYPE] CompressorStreamFactory(boolean)  boolean decompressUntilEOF [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	167	167	2	add	
53	[BUG] [BUGGY] if (this.decompressUntilEOF != null) { [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { [BUGGY] if (this.decompressUntilEOF != null) { [BUGGY] throw new IllegalStateException("Cannot override the setting defined by the constructor"); } this.decompressConcatenated = decompressConcatenated; } [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	187	187	2	replace	
54	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { [BUGGY] [BUGGY] if (this.decompressUntilEOF != null) { throw new IllegalStateException("Cannot override the setting defined by the constructor"); } this.decompressConcatenated = decompressConcatenated; } [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	187	187	2	add	
55	[BUG] [BUGGY] this.decompressConcatenated = decompressConcatenated; [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { if (this.decompressUntilEOF != null) { throw new IllegalStateException("Cannot override the setting defined by the constructor"); } [BUGGY] this.decompressConcatenated = decompressConcatenated; [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	190	190	2	replace	
56	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { if (this.decompressUntilEOF != null) { throw new IllegalStateException("Cannot override the setting defined by the constructor"); } [BUGGY] [BUGGY] this.decompressConcatenated = decompressConcatenated; } [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	190	190	2	add	
57	[BUG] [BUGGY] } [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { if (this.decompressUntilEOF != null) { throw new IllegalStateException("Cannot override the setting defined by the constructor"); } this.decompressConcatenated = decompressConcatenated; [BUGGY] } [BUGGY]  [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	191	191	2	replace	
58	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] public void setDecompressConcatenated(boolean decompressConcatenated) { if (this.decompressUntilEOF != null) { throw new IllegalStateException("Cannot override the setting defined by the constructor"); } this.decompressConcatenated = decompressConcatenated; [BUGGY] [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] setDecompressConcatenated [RETURN_TYPE] void  boolean decompressConcatenated [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.8164965809277261	191	191	2	add	
59	[BUG] [BUGGY] return new Pack200CompressorInputStream(in); [FE] CompressorException [CONTEXT] if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] return new Pack200CompressorInputStream(in); [BUGGY] } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.7071067811865475	229	229	2	replace	
60	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] if (BZip2CompressorInputStream.matches(signature, signatureLength)) { return new BZip2CompressorInputStream(in, decompressConcatenated); } if (GzipCompressorInputStream.matches(signature, signatureLength)) { return new GzipCompressorInputStream(in, decompressConcatenated); } if (Pack200CompressorInputStream.matches(signature, signatureLength)) { [BUGGY] [BUGGY] return new Pack200CompressorInputStream(in); } if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) { return new FramedSnappyCompressorInputStream(in); } if (ZCompressorInputStream.matches(signature, signatureLength)) { return new ZCompressorInputStream(in); }  [CLASS] CompressorStreamFactory [METHOD] createCompressorInputStream [RETURN_TYPE] CompressorInputStream  InputStream in [VARIABLES] byte[] signature boolean decompressConcatenated decompressUntilEOF InputStream in String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z IOException e Boolean decompressUntilEOF int signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.7071067811865475	229	229	2	add	
61	[BUG] [BUGGY] return decompressConcatenated; [FE] CompressorException [CONTEXT] boolean getDecompressConcatenated() { [BUGGY] return decompressConcatenated; [BUGGY] } [CLASS] CompressorStreamFactory [METHOD] getDecompressConcatenated [RETURN_TYPE] boolean  [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z name Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.5	372	372	2	replace	
62	[BUG] [BUGGY] [FE] CompressorException [CONTEXT] boolean getDecompressConcatenated() { [BUGGY] [BUGGY] return decompressConcatenated; } [CLASS] CompressorStreamFactory [METHOD] getDecompressConcatenated [RETURN_TYPE] boolean  [VARIABLES] boolean decompressConcatenated decompressUntilEOF String BZIP2 DEFLATE GZIP LZMA PACK200 SNAPPY_FRAMED SNAPPY_RAW XZ Z name Boolean decompressUntilEOF  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	0.5	372	372	2	add	
