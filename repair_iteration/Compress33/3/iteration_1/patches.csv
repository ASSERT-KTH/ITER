bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  in.getInputStream();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
2	[BUG]  [BUGGY]  in.mark(signature.length);  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  in.mark(signature.length);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(signature.length);	      	non-compiled	[CE]  cannot  find  symbol  signature	15	None	replace
3	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  this.in.getInputStream();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
4	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
5	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes());  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes());	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
6	[BUG]  [BUGGY]  InputStream  in  =  in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  in.readIn();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readIn();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
7	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes();  [CE]  cannot  find  symbol  [FE]                                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  in.getBytes();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes();	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
8	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[0];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[0];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
9	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[0];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
10	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[5];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[5];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
11	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[5];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[5];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
12	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[3];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[3];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
13	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[3];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[3];	  final    byte[]    signature    =    new    byte[6];    	compilable	  [FE]  CompressorException  	2	2	replace
14	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[10];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  signature  =  new  byte[10];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
15	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[10);  [CE]  ']'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[10);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  signature  =  new  byte[10);	  	non-compiled	[CE]  ']'  expected	11	None	add
16	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[11];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[11];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  signature  =  new  byte[11];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
17	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  Final  byte[]  signature  =  new  byte[10];  [CE]  not  a  statement  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  Final  byte[]  signature  =  new  byte[10];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    Final  byte[]  signature  =  new  byte[10];	  	non-compiled	[CE]  not  a  statement	11	None	add
18	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  Signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  Signature  =  new  byte[10];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  Signature  =  new  byte[10];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
19	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[12];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
20	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[9];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  byte[]  signature  =  new  byte[9];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  byte[]  signature  =  new  byte[9];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
21	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
22	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  Final  byte[]  signature  =  new  byte[256];  [CE]  not  a  statement  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  Final  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    Final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  not  a  statement	13	None	add
23	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  Signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  Signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  Signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
24	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  sign  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  sign  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  sign  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
25	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
26	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
27	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
28	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[3];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
29	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[0];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
30	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  Final  byte[]  signature  =  new  byte[1];  [CE]  not  a  statement  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  Final  byte[]  signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    Final  byte[]  signature  =  new  byte[1];	  	non-compiled	[CE]  not  a  statement	5	None	add
31	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  Signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  Signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  Signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
32	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  byte[]  signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    byte[]  signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
33	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[6];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
34	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[7];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[7];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
35	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[5];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
36	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[8];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[8];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[8];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
37	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[6);  [CE]  ']'  expected  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[6);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[6);	  	non-compiled	[CE]  ']'  expected	1	None	add
38	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  Final  byte[]  signature  =  new  byte[6];  [CE]  not  a  statement  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  Final  byte[]  signature  =  new  byte[6];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    Final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  not  a  statement	1	None	add
39	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  Signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  Signature  =  new  byte[6];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  Signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
40	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  signature  =  new  byte[16];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
41	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  Final  byte[]  signature  =  new  byte[16];  [CE]  not  a  statement  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  Final  byte[]  signature  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    Final  byte[]  signature  =  new  byte[16];	  	non-compiled	[CE]  not  a  statement	3	None	add
42	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  Signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  Signature  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  Signature  =  new  byte[16];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
43	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[32];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[32];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  signature  =  new  byte[32];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
44	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[17];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[17];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  signature  =  new  byte[17];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
45	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  byte[]  signature  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    byte[]  signature  =  new  byte[16];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
46	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[64];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[64];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
47	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[64];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[64];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
48	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[128];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[128];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
49	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[128];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[128];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
50	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND];	  final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	14	None	replace
51	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[248];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[248];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
52	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[248];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[248];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
53	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[8];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[8];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[8];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
54	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[6];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
55	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[7];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[7];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
56	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[9];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[9];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[9];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
57	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[8);  [CE]  ']'  expected  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[8);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[8);	  	non-compiled	[CE]  ']'  expected	16	None	add
58	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[5];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
59	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[8];  final  byte[]  signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[8];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	add
60	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
61	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[5];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
62	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[3];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
63	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[6];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
64	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
65	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  Final  byte[]  signature  =  new  byte[4];  [CE]  not  a  statement  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  Final  byte[]  signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    Final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  not  a  statement	7	None	add
66	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  Signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[4];  final  byte[]  Signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[4];    final  byte[]  Signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
67	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
68	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[3];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
69	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  Final  byte[]  signature  =  new  byte[2];  [CE]  not  a  statement  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  Final  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    Final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  not  a  statement	9	None	add
70	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
71	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  Signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  Signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  Signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
72	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  sign  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  sign  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  sign  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
73	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
74	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  int[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  int[]  signature  =  new  byte[1];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  int[]  signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
75	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  int[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  int[]  signature  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  int[]  signature  =  new  byte[16];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
76	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  sign  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  sign  =  new  byte[16];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  sign  =  new  byte[16];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
77	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  byte[]  signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
78	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  int[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  final  int[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    final  int[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	add
79	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  createCompressorInputStream(in);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
81	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
82	[BUG]  [BUGGY]  byte[]  signature  =  in.getSignature();  [CE]  cannot  find  symbol  [FE]                            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  in.getSignature();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getSignature();	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
83	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [CE]  cannot  find  symbol  [FE]                              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ");	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
84	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  int[]  signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[10];  final  int[]  signature  =  new  byte[10];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[10];    final  int[]  signature  =  new  byte[10];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	add
85	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  int[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  int[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  int[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
86	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  static  final  byte[]  signature  =  new  byte[256];  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  static  final  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    static  final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
87	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[512];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[512];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[512];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
88	[BUG]  [BUGGY]  in.markSupported();  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  in.markSupported();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.markSupported();	      	non-compiled	[CE]  cannot  find  symbol  signature	15	None	replace
89	[BUG]  [BUGGY]  in.defaultRead();  [CE]  cannot  find  symbol  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  in.defaultRead();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.defaultRead();	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
90	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  InputStream  in  =  this.in.readIn();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readIn();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
91	[BUG]  [BUGGY]  byte[]  signature  =  in.read();  [CE]  incompatible  types  [FE]                            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  in.read();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read();	      	non-compiled	[CE]  incompatible  types	15	None	replace
92	[BUG]  [BUGGY]  in.defaultWrite();  [CE]  cannot  find  symbol  [FE]                              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  in.defaultWrite();  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.defaultWrite();	      	non-compiled	[CE]  cannot  find  symbol	15	None	replace
93	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[15];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[16];  final  byte[]  signature  =  new  byte[15];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[16];    final  byte[]  signature  =  new  byte[15];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
94	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  static  final  byte[]  signature  =  new  byte[2];  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[2];  static  final  byte[]  signature  =  new  byte[2];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[2];    static  final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
95	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
96	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  byte[]  signature  =  new  byte[256];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
97	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[228];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[228];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
98	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[228];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[228];	  final    byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	14	2	replace
99	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[6];  final  byte[]  signature  =  new  byte[4];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[6];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
100	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
101	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
102	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
103	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
104	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
105	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
106	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[256];    final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	add
107	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
108	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
109	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
110	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
111	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
112	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[1];    final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
113	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[7];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[7];	  final    byte[]    signature    =    new    byte[8];    	compilable	  [FE]  CompressorException  	17	2	replace
114	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }    [BUGGY]  final  byte[]  signature  =  new  byte[7];  [BUGGY]    in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[7];	  final    byte[]    signature    =    new    byte[8];    	compilable	  [FE]  CompressorException  	17	2	replace
