bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
2	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
3	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
4	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
5	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in);  [CE]  no  suitable  method  found  for  valueOf(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(InputStream)	104	None	replace
6	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.valueOf(decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	104	None	replace
7	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
8	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	104	2	replace
9	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(signature);  [CE]  no  suitable  method  found  for  valueOf(byte[])  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(signature);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(byte[])	104	None	replace
10	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  valueOf(boolean,InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean,InputStream)	104	None	replace
11	[BUG]  [BUGGY]  final  byte[]  Signature  =  new  byte[256];  [CE]  cannot  find  symbol  signature  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  Signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  Signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	23	None	replace
12	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[256];  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
13	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	replace
14	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[512];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	23	2	replace
15	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[512];  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[512];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	23	2	replace
16	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion());	  final    byte[]    signature    =    new    byte[256];    final    byte[]    Signature    =    new    byte[256];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	replace
17	[BUG]  [BUGGY]  final  int  signatureLength  =  in.readInt();  static  final  byte[]  signature  =  new  byte[256];  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int  signatureLength  =  in.readInt();  static  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int  signatureLength  =  in.readInt();  static  final  byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
18	[BUG]  [BUGGY]  final  int  signatureLength  =  in.length();  static  final  byte[]  signature  =  new  byte[256];  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int  signatureLength  =  in.length();  static  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int  signatureLength  =  in.length();  static  final  byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
19	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[512];  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[512];	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
20	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
21	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
22	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getBytes());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in,  in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
23	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  BZIP2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  BZIP2);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  BZIP2);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
24	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes()  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes()  +  1);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes()  +  1);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
25	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  in.read());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  in.read());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
26	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamInputStream(in);	  final    byte[]    signature    =    new    byte[256];    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
27	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamInputStream(in.read());	  final    byte[]    signature    =    new    byte[256];    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
28	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.MILLIS_PER_SECOND];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.MILLIS_PER_SECOND];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.MILLIS_PER_SECOND];	  final    byte[]    signature    =    new    byte[228];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	98	None	replace
29	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.SECONDS_PER_SECOND];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.SECONDS_PER_SECOND];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[228  *  DateTimeConstants.SECONDS_PER_SECOND];	  final    byte[]    signature    =    new    byte[228];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	98	None	replace
30	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1024];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[1024];	  final    byte[]    signature    =    new    byte[128];    	compilable	  [FE]  CompressorException  	49	2	replace
31	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1024];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1024];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1024];	  final    byte[]    signature    =    new    byte[128];    	compilable	  [FE]  CompressorException  	49	2	replace
32	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	102	None	replace
33	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	102	None	replace
34	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	102	None	replace
35	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	102	None	replace
36	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	102	None	replace
37	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	102	None	replace
38	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	102	None	replace
39	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[32];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[32];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[32];    	compilable	  [FE]  CompressorException  	43	2	replace
40	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[32];  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[32];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[32];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[32];    	compilable	  [FE]  CompressorException  	43	2	replace
41	[BUG]  [BUGGY]  final  byte[]  sign  =  new  byte[16];  [CE]  cannot  find  symbol  signature  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  sign  =  new  byte[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  sign  =  new  byte[16];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    sign    =    new    byte[16];    	non-compiled	[CE]  cannot  find  symbol  signature	76	None	replace
42	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[16];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    sign    =    new    byte[16];    	compilable	  [FE]  CompressorException  	76	2	replace
43	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[16];  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[16];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    sign    =    new    byte[16];    	compilable	  [FE]  CompressorException  	76	2	replace
44	[BUG]  [BUGGY]  final  int  signatureLength  =  in.length();  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int  signatureLength  =  in.length();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int  signatureLength  =  in.length();	  final    byte[]    signature    =    new    byte[256];    Final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
45	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[128];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[128];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[128];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
46	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[228];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[228];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[228];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
47	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[328];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[328];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[328];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
48	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[512];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[512];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
49	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  Final  byte[]  signature  =  new  byte[128];  [CE]  not  a  statement  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  Final  byte[]  signature  =  new  byte[128];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    Final  byte[]  signature  =  new  byte[128];	  	non-compiled	[CE]  not  a  statement	48	None	add
50	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  Signature  =  new  byte[128];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  Signature  =  new  byte[128];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  Signature  =  new  byte[128];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
51	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
52	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[528];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[128];  final  byte[]  signature  =  new  byte[528];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[128];    final  byte[]  signature  =  new  byte[528];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	add
53	[BUG]  [BUGGY]  in.mark(signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(signatureLength);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	2	None	replace
54	[BUG]  [BUGGY]  in.mark(in.length);  [CE]  cannot  find  symbol  length  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(in.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(in.length);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
55	[BUG]  [BUGGY]  in.mark(decompressConcatenated);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(decompressConcatenated);	  in.mark(signature.length);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	2	None	replace
56	[BUG]  [BUGGY]  in.mark(this.signature.length);  [CE]  cannot  find  symbol  signature  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(this.signature.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(this.signature.length);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signature	2	None	replace
57	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  [CE]  cannot  find  symbol  signature  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(signature.length  -  1);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(signature.length  -  1);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signature	2	None	replace
58	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
59	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
60	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
61	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
62	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
63	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
64	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
65	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
66	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
67	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
68	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
69	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
70	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in);  [CE]  no  suitable  method  found  for  valueOf(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(InputStream)	110	None	replace
71	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[15];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[15];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[15];    	compilable	  [FE]  CompressorException  	93	2	replace
72	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[15];  [FE]  CompressorException  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[15];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[15];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[15];    	compilable	  [FE]  CompressorException  	93	2	replace
73	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
74	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  Final  byte[]  signature  =  new  byte[64];  [CE]  not  a  statement  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  Final  byte[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    Final  byte[]  signature  =  new  byte[64];	  	non-compiled	[CE]  not  a  statement	46	None	add
75	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  Signature  =  new  byte[64];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  Signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  Signature  =  new  byte[64];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
76	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  sign  =  new  byte[64];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  sign  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  sign  =  new  byte[64];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
77	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  byte[]  signature  =  new  byte[64];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  byte[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    byte[]  signature  =  new  byte[64];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
78	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressConcatenated;  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressConcatenated;  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256],  decompressConcatenated;	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	21	None	replace
79	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressUntilEOF);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
81	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  0);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  0);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
82	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  DEFLATE);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
83	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  signatureLength);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  -1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  -1);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE,  -1);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
85	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[248];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[248];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
86	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
87	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[25248];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[25248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[25248];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
88	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[249];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[249];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[249];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
89	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[247];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[247];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[247];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
90	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[224];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[224];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[224];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
91	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[250];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[250];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[250];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
92	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[225];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[225];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[225];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
93	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[1];  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[1];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
94	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[2];  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[2];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
95	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[0];  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[0];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
96	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[6];  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[6];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
97	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[4];  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[4];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
98	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[3];  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[3];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
99	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes( ".UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
100	[BUG]  [BUGGY]  byte[]  signature  =  in,  in.getBytes( "UTF-8 ");  [CE]  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in,  in.getBytes( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in,  in.getBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  	83	None	replace
101	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [CE]  cannot  find  symbol  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes( ",UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
102	[BUG]  [BUGGY]  byte[]  signature  =  this.in.getBytes( "UTF-8 ");  [CE]  cannot  find  symbol  in  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  this.in.getBytes( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  this.in.getBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  cannot  find  symbol  in	83	None	replace
103	[BUG]  [BUGGY]  byte[]  signature  =  inputStream.getBytes( "UTF-8 ");  [CE]  cannot  find  symbol  inputStream  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  inputStream.getBytes( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  inputStream.getBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  cannot  find  symbol  inputStream	83	None	replace
104	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn(),  in);  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.readIn(),  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readIn(),  in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  ';'  expected	90	None	replace
105	[BUG]  [BUGGY]  InputStream  in  =  _in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  _in.readIn();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  _in.readIn();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
106	[BUG]  [BUGGY]  InputStream  in  =  this.in.readFully();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.readFully();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readFully();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
107	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in,  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(this.in,  in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
108	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[1];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[1];	  final    byte[]    signature    =    new    byte[10];    final    int[]    signature    =    new    byte[10];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	84	None	replace
109	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[10];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[10];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[10];	  final    byte[]    signature    =    new    byte[10];    final    int[]    signature    =    new    byte[10];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	84	None	replace
110	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[6];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[6];	  final    byte[]    signature    =    new    byte[10];    final    int[]    signature    =    new    byte[10];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	84	None	replace
111	[BUG]  [BUGGY]  final  int[]  signature  =  new  byte[10];  [CE]  incompatible  types  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  byte[10];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  byte[10];	  final    byte[]    signature    =    new    byte[10];    final    int[]    signature    =    new    byte[10];    	non-compiled	[CE]  incompatible  types	84	None	replace
112	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[2];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[2];	  final    byte[]    signature    =    new    byte[10];    final    int[]    signature    =    new    byte[10];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	84	None	replace
113	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[6];	  final    byte[]    signature    =    new    byte[6];    final    byte[]    signature    =    new    byte[6);    	compilable	  [FE]  CompressorException  	37	2	replace
114	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[6];  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[6];	  final    byte[]    signature    =    new    byte[6];    final    byte[]    signature    =    new    byte[6);    	compilable	  [FE]  CompressorException  	37	2	replace
115	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
116	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
117	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
118	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
119	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
120	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
121	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
122	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
123	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
124	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
125	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
126	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
127	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(signature);  [CE]  no  suitable  method  found  for  valueOf(byte[])  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.valueOf(signature);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(byte[])	111	None	replace
128	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
129	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  Final  byte[]  signature  =  new  byte[0];  [CE]  not  a  statement  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  Final  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    Final  byte[]  signature  =  new  byte[0];	  	non-compiled	[CE]  not  a  statement	8	None	add
130	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[1];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
131	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  Signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  Signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  Signature  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
132	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  sign  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  sign  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  sign  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
133	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  int[]  signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  int[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  int[]  signature  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
134	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  byte[]  signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    byte[]  signature  =  new  byte[0];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
135	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[7];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[7];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	113	None	add
136	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	113	None	add
137	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[8];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[8];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[8];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	113	None	add
138	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[9];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[9];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[9];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	113	None	add
139	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	113	None	add
140	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[7);  [CE]  ']'  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  final  byte[]  signature  =  new  byte[7);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    final  byte[]  signature  =  new  byte[7);	  	non-compiled	[CE]  ']'  expected	113	None	add
141	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  Final  byte[]  signature  =  new  byte[7];  [CE]  not  a  statement  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[7];  Final  byte[]  signature  =  new  byte[7];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[7];    Final  byte[]  signature  =  new  byte[7];	  	non-compiled	[CE]  not  a  statement	113	None	add
142	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	106	None	replace
143	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	106	None	replace
144	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	106	None	replace
145	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseInt(in);  [CE]  no  suitable  method  found  for  parseInt(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseInt(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseInt(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream)	106	None	replace
146	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	106	None	replace
147	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in).booleanValue();  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in).booleanValue();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in).booleanValue();	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	106	None	replace
148	[BUG]  [BUGGY]  InputStream  in  =  in.readInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.readInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
149	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream(),  DEFLATE);  [CE]  ';'  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.getInputStream(),  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.getInputStream(),  DEFLATE);	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  ';'  expected	1	None	replace
150	[BUG]  [BUGGY]  InputStream  in  =  in.openStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.openStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.openStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
151	[BUG]  [BUGGY]  InputStream  in  =  in.getOutputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.getOutputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.getOutputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
152	[BUG]  [BUGGY]  InputStream  in  =  in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.read();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.read();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
153	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[228];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[228];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  signature  =  new  byte[228];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
154	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
155	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[229];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[229];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  signature  =  new  byte[229];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
156	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  Final  byte[]  signature  =  new  byte[228];  [CE]  not  a  statement  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  Final  byte[]  signature  =  new  byte[228];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    Final  byte[]  signature  =  new  byte[228];	  	non-compiled	[CE]  not  a  statement	97	None	add
157	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  Signature  =  new  byte[228];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  Signature  =  new  byte[228];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  Signature  =  new  byte[228];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
158	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[248];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  signature  =  new  byte[248];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
159	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[512];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[512];    	compilable	  [FE]  CompressorException  	87	2	replace
160	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[512];  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[512];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[512];    	compilable	  [FE]  CompressorException  	87	2	replace
161	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in);  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getInputStream(),  in);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  ';'  expected	3	None	replace
162	[BUG]  [BUGGY]  InputStream  in  =  _in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  _in.getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  _in.getInputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
163	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream( "UTF-8 ");  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getInputStream( "UTF-8 ");	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
164	[BUG]  [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getOutputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
165	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(true);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream(true);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getInputStream(true);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
166	[BUG]  [BUGGY]  final  byte[]  sign  =  new  byte[256];  [CE]  cannot  find  symbol  signature  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  sign  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  sign  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    final    byte[]    sign    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	24	None	replace
167	[BUG]  [BUGGY]  final  byte[]  Signature  =  new  byte[16];  [CE]  cannot  find  symbol  signature  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  Signature  =  new  byte[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  Signature  =  new  byte[16];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    Signature    =    new    byte[16];    	non-compiled	[CE]  cannot  find  symbol  signature	42	None	replace
168	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
169	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
170	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
171	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
172	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
173	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
174	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	112	None	replace
175	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	105	None	replace
176	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	105	None	replace
177	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	105	None	replace
178	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	105	None	replace
179	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	105	None	replace
180	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  in.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  in.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  in.length);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	105	None	replace
181	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(InputStream,boolean)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(InputStream,boolean)	100	None	replace
182	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	100	None	replace
183	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	100	None	replace
184	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.markSupported();  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.markSupported();  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  in.markSupported();  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	100	None	replace
185	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[448];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[448];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
186	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[448];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[448];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[448];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
187	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[252];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[252];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
188	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[252];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[252];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[252];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
189	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
190	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[6];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
191	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
192	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[5)];  [CE]  ']'  expected  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[5)];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  signature  =  new  byte[5)];	  	non-compiled	[CE]  ']'  expected	10	None	add
193	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  signature  =  new  byte[7];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  signature  =  new  byte[7];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
194	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  Final  byte[]  signature  =  new  byte[5];  [CE]  not  a  statement  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  Final  byte[]  signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    Final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  not  a  statement	10	None	add
195	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  Signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[5];  final  byte[]  Signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[5];    final  byte[]  Signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
196	[BUG]  [BUGGY]  InputStream  in  =  in.readFully();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.readFully();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readFully();	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
197	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(in);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
198	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(in,  DEFLATE);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
199	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(in,  decompressConcatenated);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
200	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[1];	  final    byte[]    signature    =    new    byte[1];    Final    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	30	2	replace
201	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];	  final    byte[]    signature    =    new    byte[1];    Final    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	30	2	replace
202	[BUG]  [BUGGY]  final  byte[]  Signature  =  new  byte[1];  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  Signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  Signature  =  new  byte[1];	  final    byte[]    signature    =    new    byte[1];    final    byte[]    Signature    =    new    byte[1];    	non-compiled	[CE]  cannot  find  symbol  signature	31	None	replace
203	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
204	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
205	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	107	None	replace
206	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
207	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
208	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
209	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	107	None	replace
210	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	103	None	replace
211	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	103	None	replace
212	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in);  [CE]  no  suitable  method  found  for  valueOf(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(InputStream)	103	None	replace
213	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	103	None	replace
214	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.parseInt(in);  [CE]  no  suitable  method  found  for  parseInt(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.parseInt(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.parseInt(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream)	103	None	replace
215	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  0);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
216	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createInputStream(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createInputStream(in);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
217	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  IOUtils.readFully(signature));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  IOUtils.readFully(signature));  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  IOUtils.readFully(signature));	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
218	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  null);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  null);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  null);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
219	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressUntilEOF);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
220	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[0];	  final    byte[]    signature    =    new    byte[1];    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	32	2	replace
221	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[0];  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[0];	  final    byte[]    signature    =    new    byte[1];    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	32	2	replace
222	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[2];	  final    byte[]    signature    =    new    byte[1];    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	32	2	replace
223	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[2];  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[2];	  final    byte[]    signature    =    new    byte[1];    byte[]    signature    =    new    byte[1];    	compilable	  [FE]  CompressorException  	32	2	replace
224	[BUG]  [BUGGY]  InputStream  in  =  getInputStream( "UTF-8 ");  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream( "UTF-8 ");	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
225	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream(in.getVersion());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
226	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream(in.getCharset());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
227	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
228	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  in);  [CE]  ';'  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(),  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream(),  in);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	4	None	replace
229	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream(in);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
230	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.readInt());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.readInt());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamReader(in.readInt());	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
231	[BUG]  [BUGGY]  InputStream  in  =  in.defaultRead();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.defaultRead();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.defaultRead();	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
232	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamReader(in.read());	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
233	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
234	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
235	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
236	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
237	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
238	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.valueOf(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
239	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	109	None	replace
240	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	95	None	add
241	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	95	None	add
242	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	95	None	add
243	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	95	None	add
244	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);  byte[]  signature  =  new  byte[256];  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
245	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(decompressConcatenated);  byte[]  signature  =  new  byte[256];  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(decompressConcatenated);  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayInputStream  in  =  new  ByteArrayInputStream(decompressConcatenated);  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
246	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    byte[]  signature  =  new  byte[256];  this.decompressUntilEOF  =  IOUtils.readFully(in,  DEFLATE);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	95	None	add
247	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4096];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[4096];	  final    byte[]    signature    =    new    byte[64];    	compilable	  [FE]  CompressorException  	47	2	replace
248	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4096];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4096];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4096];	  final    byte[]    signature    =    new    byte[64];    	compilable	  [FE]  CompressorException  	47	2	replace
249	[BUG]  [BUGGY]  byte[]  signature  =  in,  in.getSignature();  [CE]  ';'  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in,  in.getSignature();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in,  in.getSignature();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  ';'  expected	82	None	replace
250	[BUG]  [BUGGY]  byte[]  signature  =  in.toByteArray();  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.toByteArray();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.toByteArray();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
251	[BUG]  [BUGGY]  Byte[]  signature  =  in.getSignature();  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  Byte[]  signature  =  in.getSignature();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	Byte[]  signature  =  in.getSignature();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
252	[BUG]  [BUGGY]  byte[]  signature  =  in.getSimpleName();  [CE]  cannot  find  symbol  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getSimpleName();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getSimpleName();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
253	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[256];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[256];	  final    byte[]    signature    =    new    byte[256];    final    int[]    signature    =    new    byte[256];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	85	None	replace
254	[BUG]  [BUGGY]  final  int[]  signature  =  new  byte[256];  [CE]  incompatible  types  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    final    int[]    signature    =    new    byte[256];    	non-compiled	[CE]  incompatible  types	85	None	replace
255	[BUG]  [BUGGY]  final  int[]  signature  =  new  Integer[256];  [CE]  incompatible  types  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  Integer[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  Integer[256];	  final    byte[]    signature    =    new    byte[256];    final    int[]    signature    =    new    byte[256];    	non-compiled	[CE]  incompatible  types	85	None	replace
256	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[512];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[512];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[512];	  final    byte[]    signature    =    new    byte[256];    final    int[]    signature    =    new    byte[256];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	85	None	replace
257	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  1];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  1];	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	50	None	replace
258	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.markSupported());  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.markSupported());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.markSupported());	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  ';'  expected	50	None	replace
259	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated;  [CE]  cannot  find  symbol  DateTimeConstants  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated;  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated;	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	50	None	replace
260	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.getCharset());  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.getCharset());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  in.getCharset());	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  ';'  expected	50	None	replace
261	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  DEFLATE);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  DEFLATE);	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  ';'  expected	50	None	replace
262	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10);  [CE]  ']'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[10);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[10);	  final    byte[]    signature    =    new    byte[10];    final    byte[]    signature    =    new    byte[10);    	non-compiled	[CE]  ']'  expected	15	None	replace
263	[BUG]  [BUGGY]  InputStream  in  =  in.defaultWriteInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.defaultWriteInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.defaultWriteInputStream();	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
264	[BUG]  [BUGGY]  InputStream  in  =  in.defaultWrite();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.defaultWrite();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.defaultWrite();	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
265	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE);	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
266	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  [CE]  cannot  find  symbol  signature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  signature	88	None	replace
267	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  signature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  signature	88	None	replace
268	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  CompressorException( " ");  }  [CE]  cannot  find  symbol  signature  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  throw  new  CompressorException( " ");  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  signature	88	None	replace
269	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  try  {  in.reset();  }  catch(IOException  e)  {  }  [CE]  illegal  start  of  expression  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  try  {  in.reset();  }  catch(IOException  e)  {  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  try  {  in.reset();  }  catch(IOException  e)  {  }	  in.markSupported();    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
270	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.reset();  }  [CE]  cannot  find  symbol  signature  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.reset();  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  in.reset();  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  signature	88	None	replace
271	[BUG]  [BUGGY]  final  int[]  signature  =  new  byte[1];  [CE]  incompatible  types  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  byte[1];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  byte[1];	  final    byte[]    signature    =    new    byte[1];    final    int[]    signature    =    new    byte[1];    	non-compiled	[CE]  incompatible  types	74	None	replace
272	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[64];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
273	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[64];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[64];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
274	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[128];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[128];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
275	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[128];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[128];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[128];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
276	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[248];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
277	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[248];  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[248];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
278	[BUG]  [BUGGY]  final  int[]  signature  =  new  byte[2];  [CE]  incompatible  types  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  byte[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  byte[2];	  final    byte[]    signature    =    new    byte[2];    final    int[]    signature    =    new    byte[2];    	non-compiled	[CE]  incompatible  types	78	None	replace
279	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createInputStream(in,  decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
280	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  0);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  0);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
281	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signatureLength);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
282	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  0,  decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
283	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	108	None	replace
284	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	108	None	replace
285	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	108	None	replace
286	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	108	None	replace
287	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	108	None	replace
288	[BUG]  [BUGGY]  Byte[]  signature  =  in.getBytes();  [CE]  cannot  find  symbol  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  Byte[]  signature  =  in.getBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	Byte[]  signature  =  in.getBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
289	[BUG]  [BUGGY]  byte[]  signature  =  in,  in.getBytes();  [CE]  ';'  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in,  in.getBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in,  in.getBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  ';'  expected	7	None	replace
290	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes();  [CE]  cannot  find  symbol  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
291	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(in.getVersion());  [CE]  cannot  find  symbol  [FE]                                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes(in.getVersion());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes(in.getVersion());	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
292	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signature);  [CE]  cannot  find  symbol  [FE]                                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes(signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getBytes(signature);	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
293	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[17];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[17];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[17];    	compilable	  [FE]  CompressorException  	44	2	replace
294	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[17];  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[17];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[17];	  final    byte[]    signature    =    new    byte[16];    final    byte[]    signature    =    new    byte[17];    	compilable	  [FE]  CompressorException  	44	2	replace
295	[BUG]  [BUGGY]  byte[]  signature  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readInt();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readInt();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
296	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully();  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readFully();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readFully();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
297	[BUG]  [BUGGY]  byte[]  signature  =  in.readUTF();  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readUTF();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readUTF();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
298	[BUG]  [BUGGY]  byte[]  signature  =  in.read(in);  [CE]  no  suitable  method  found  for  read(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.read(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read(in);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(InputStream)	91	None	replace
299	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature);  [CE]  incompatible  types  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.read(signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read(signature);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  incompatible  types	91	None	replace
300	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
301	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
302	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
303	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
304	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
305	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
306	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
307	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated).booleanValue();	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	101	2	replace
308	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  valueOf(boolean,InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated,  in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean,InputStream)	101	None	replace
309	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(signature);  [CE]  no  suitable  method  found  for  valueOf(byte[])  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(signature);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(byte[])	101	None	replace
310	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.valueOf(decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Integer.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	101	None	replace
311	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[16];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[16];	  final    byte[]    signature    =    new    byte[16];    final    int[]    signature    =    new    byte[16];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	75	None	replace
312	[BUG]  [BUGGY]  final  int[]  signature  =  new  byte[16];  [CE]  incompatible  types  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  byte[16];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  byte[16];	  final    byte[]    signature    =    new    byte[16];    final    int[]    signature    =    new    byte[16];    	non-compiled	[CE]  incompatible  types	75	None	replace
313	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[64];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[64];	  final    byte[]    signature    =    new    byte[16];    final    int[]    signature    =    new    byte[16];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	75	None	replace
314	[BUG]  [BUGGY]  final  int[]  signature  =  new  int[4];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  int[]  signature  =  new  int[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  int[]  signature  =  new  int[4];	  final    byte[]    signature    =    new    byte[16];    final    int[]    signature    =    new    byte[16];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	75	None	replace
315	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
316	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    final  byte[]  signature  =  new  byte[4];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
317	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    final  byte[]  signature  =  new  byte[2];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
318	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  Final  byte[]  signature  =  new  byte[3];  [CE]  not  a  statement  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  Final  byte[]  signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    Final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  not  a  statement	12	None	add
319	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    final  byte[]  signature  =  new  byte[5];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
320	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  Signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  final  byte[]  Signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    final  byte[]  Signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
321	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  byte[]  signature  =  new  byte[3];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  byte[]  signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
322	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  2];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  2];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  2];	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	50	None	replace
323	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  3];  [CE]  cannot  find  symbol  DateTimeConstants  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND  +  3];	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  cannot  find  symbol  DateTimeConstants	50	None	replace
324	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	105	None	replace
325	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	105	None	replace
326	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	107	None	replace
327	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	108	None	replace
328	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten  [CE]  ')'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[1];  final  byte[]  signature  =  new  byte[1];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  ')'  expected	108	None	replace
329	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  decompressConcatenated  =  Boolean.parseBoolean(in,  DEFLATE);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	109	None	replace
330	[BUG]  [BUGGY]  byte[]  signature  =  in.decompressConcatenated.getBytes();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.decompressConcatenated.getBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.decompressConcatenated.getBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	7	None	replace
331	[BUG]  [BUGGY]  byte[]  signature  =  this.in.getBytes();  [CE]  cannot  find  symbol  in  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  this.in.getBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  this.in.getBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol  in	7	None	replace
332	[BUG]  [BUGGY]  byte[]  signature  =  in.toBytes();  [CE]  cannot  find  symbol  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.toBytes();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.toBytes();	  byte[]    signature    =    in.getBytes();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
333	[BUG]  [BUGGY]  byte[]  signature  =  in.markSupported();  [CE]  incompatible  types  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.markSupported();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.markSupported();	  in.markSupported();    	non-compiled	[CE]  incompatible  types	88	None	replace
334	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  System.arraycopy(in,  0,  signatureLength,  in.length);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  System.arraycopy(in,  0,  signatureLength,  in.length);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  System.arraycopy(in,  0,  signatureLength,  in.length);  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  signatureLength	88	None	replace
335	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressUntilEOF);  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressUntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256],  decompressUntilEOF);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    sign    =    new    byte[256];    	non-compiled	[CE]  ';'  expected	24	None	replace
336	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressUntilEOF;  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256],  decompressUntilEOF;	  final    byte[]    signature    =    new    byte[256];    final    byte[]    sign    =    new    byte[256];    	compilable	  [FE]  CompressorException  	24	2	replace
337	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressUntilEOF;  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256],  decompressUntilEOF;  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256],  decompressUntilEOF;	  final    byte[]    signature    =    new    byte[256];    final    byte[]    sign    =    new    byte[256];    	compilable	  [FE]  CompressorException  	24	2	replace
338	[BUG]  [BUGGY]  InputStream  in  =  this.in.defaultRead();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.defaultRead();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.defaultRead();	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
339	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.getCharset());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamReader(in.getCharset());	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
340	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.getInputStream());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.getInputStream());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamReader(in.getInputStream());	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
341	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamWriter(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamWriter(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStreamWriter(in,  DEFLATE);	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
342	[BUG]  [BUGGY]  InputStream  in  =  createIn.defaultWrite();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createIn.defaultWrite();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createIn.defaultWrite();	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
343	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[0]  =  new  byte[0];  [CE]  ']'  expected  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[0]  =  new  byte[0];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[0]  =  new  byte[0];	  	non-compiled	[CE]  ']'  expected	8	None	add
344	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  UntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  UntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  UntilEOF);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
345	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  byte[]);  [CE]  '.class'  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  byte[]);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  byte[]);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  '.class'  expected	81	None	replace
346	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  -1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  -1);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  -1);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
347	[BUG]  [BUGGY]  byte[]  signature  =  in.read(false);  [CE]  no  suitable  method  found  for  read(boolean)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.read(false);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read(false);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(boolean)	91	None	replace
348	[BUG]  [BUGGY]  byte[]  signature  =  in.read(BZIP2);  [CE]  no  suitable  method  found  for  read(String)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.read(BZIP2);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read(BZIP2);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  no  suitable  method  found  for  read(String)	91	None	replace
349	[BUG]  [BUGGY]  byte[]  signature  =  in.read(BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.read(BZIP);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.read(BZIP);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  cannot  find  symbol  BZIP	91	None	replace
350	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  false);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  false);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  false);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
351	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
352	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
353	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
354	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressUntilEOF  =  Boolean.valueOf(decompressConcatenated);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressUntilEOF  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressUntilEOF  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	104	None	replace
355	[BUG]  [BUGGY]  InputStream  in  =  decompressUntilEOF.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  decompressUntilEOF.getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  decompressUntilEOF.getInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
356	[BUG]  [BUGGY]  InputStream  in  =  inputStream.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  inputStream.getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  inputStream.getInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
357	[BUG]  [BUGGY]  InputStream  in  =  out.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  out.getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  out.getInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
358	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
359	[BUG]  [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  static  final  byte[]  signature  =  new  byte[256];  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
360	[BUG]  [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }  [CE]  cannot  find  symbol  signature  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	86	None	replace
361	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in);  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	86	None	replace
362	[BUG]  [BUGGY]  Final  byte[]  signature  =  new  byte[256];  [CE]  not  a  statement  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  Final  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	Final  byte[]  signature  =  new  byte[256];	  final    byte[]    signature    =    new    byte[256];    Final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  not  a  statement	22	None	replace
363	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
364	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.getBytes());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZip2InputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
365	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.getBytes());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIP2InputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
366	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
367	[BUG]  [BUGGY]  in.mark(symbol.length);  [CE]  cannot  find  symbol  symbol  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.mark(symbol.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.mark(symbol.length);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  symbol	2	None	replace
368	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[255];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[255];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
369	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[255];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[255];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[255];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
370	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[148];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[148];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
371	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[148];  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[148];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[148];	  final    byte[]    signature    =    new    byte[248];    	compilable	  [FE]  CompressorException  	52	2	replace
372	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[3];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
373	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[3];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
374	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[40];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[40];	  final    byte[]    signature    =    new    byte[64];    	compilable	  [FE]  CompressorException  	47	2	replace
375	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[40];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[40];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[40];	  final    byte[]    signature    =    new    byte[64];    	compilable	  [FE]  CompressorException  	47	2	replace
376	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readFully(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readFully(in);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
377	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readFully(in,  DEFLATE);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
378	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
379	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
380	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream();  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayInputStream  in  =  new  ByteArrayInputStream();	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
381	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayInputStream  in  =  new  ByteArrayInputStream(256);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
382	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayOutputStream  in  =  new  ByteArrayOutputStream();  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayOutputStream  in  =  new  ByteArrayOutputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayOutputStream  in  =  new  ByteArrayOutputStream();	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
383	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressor  in  =  new  ByteArrayCompressor(256,  256);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressor  in  =  new  ByteArrayCompressor(256,  256);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressor  in  =  new  ByteArrayCompressor(256,  256);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
384	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[3];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
385	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[3];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
386	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(this.in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
387	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  this.in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  this.in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readFully(in,  this.in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
388	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  this.in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  this.in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  IOUtils.readIn(in,  this.in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
389	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  Final  byte[]  signature  =  new  byte[248];  [CE]  not  a  statement  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  Final  byte[]  signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    Final  byte[]  signature  =  new  byte[248];	  	non-compiled	[CE]  not  a  statement	51	None	add
390	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  Signature  =  new  byte[248];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  Signature  =  new  byte[248];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  Signature  =  new  byte[248];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
391	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[428];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[428];	  final    byte[]    signature    =    new    byte[228];    	compilable	  [FE]  CompressorException  	98	2	replace
392	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[428];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[428];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[428];	  final    byte[]    signature    =    new    byte[228];    	compilable	  [FE]  CompressorException  	98	2	replace
393	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[32];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[32];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[32];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
394	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  int[]  signature  =  new  byte[64];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  int[]  signature  =  new  byte[64];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  int[]  signature  =  new  byte[64];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
395	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[65];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[65];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[65];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
396	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  GZIP);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  GZIP);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  GZIP);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
397	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  BZIP2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  BZIP2);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  BZIP2);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
398	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(DEFLATE,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(DEFLATE,  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(DEFLATE,  in);	  InputStream    in    =    createCompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	80	None	replace
399	[BUG]  [BUGGY]  InputStream  in  =  this.in.openStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.openStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.openStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
400	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.getInputStream(in);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
401	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	102	None	replace
402	[BUG]  [BUGGY]  byte[]  signature  =  in.readSignature();  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readSignature();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readSignature();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
403	[BUG]  [BUGGY]  byte[]  signature  =  this.in.getSignature();  [CE]  cannot  find  symbol  in  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  this.in.getSignature();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  this.in.getSignature();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol  in	82	None	replace
404	[BUG]  [BUGGY]  byte[]  signature  =  in.getSyntheticSignature();  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.getSyntheticSignature();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.getSyntheticSignature();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
405	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	replace
406	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
407	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	101	None	replace
408	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
409	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[4];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
410	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[4];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[4];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[4];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
411	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
412	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten  [CE]  ')'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcaten	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  ')'  expected	100	None	replace
413	[BUG]  [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  else  {  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  else  {  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(!in.markSupported())  {  final  byte[]  signature  =  new  byte[256];  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  }  else  {	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
414	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream().getInputStream();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream().getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
415	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	112	None	replace
416	[BUG]  [BUGGY]  static  final  byte[]  signature  =  new  byte[5];  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  static  final  byte[]  signature  =  new  byte[5];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	static  final  byte[]  signature  =  new  byte[5];	  final    byte[]    signature    =    new    byte[2];    static    final    byte[]    signature    =    new    byte[2];    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
417	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	103	None	replace
418	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(decompressConcatenated);	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
419	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in.read());  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(in.read());	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
420	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(in,  decompressConcatenated);	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
421	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
422	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated,  in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(decompressConcatenated,  in);	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
423	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  BZIPInputStream(in);	  in.defaultRead();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
424	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
425	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  UntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  UntilEOF);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  UntilEOF);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
426	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated,  signature);	  InputStream    in    =    createCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
427	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	replace
428	[BUG]  [BUGGY]  InputStream  in  =  this.in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.read();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.read();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
429	[BUG]  [BUGGY]  InputStream  in  =  this.in.readUTF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.readUTF();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readUTF();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
430	[BUG]  [BUGGY]  InputStream  in  =  this.in.readOut();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.readOut();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readOut();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	replace
431	[BUG]  [BUGGY]  int  signatureLength  =  Integer.parseInt(in);  [CE]  no  suitable  method  found  for  parseInt(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  int  signatureLength  =  Integer.parseInt(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	int  signatureLength  =  Integer.parseInt(in);	  final    byte[]    signature    =    new    byte[256];    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream)	25	None	replace
432	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
433	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[296];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[296];	  final    byte[]    signature    =    new    byte[228];    	compilable	  [FE]  CompressorException  	98	2	replace
434	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[296];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[296];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[296];	  final    byte[]    signature    =    new    byte[228];    	compilable	  [FE]  CompressorException  	98	2	replace
435	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	108	None	replace
436	[BUG]  [BUGGY]  int[]  signature  =  new  int[256];  [CE]  no  suitable  method  found  for  readFully(InputStream,int[])  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  int[]  signature  =  new  int[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	int[]  signature  =  new  int[256];	  final    byte[]    signature    =    new    byte[256];    final    int[]    signature    =    new    byte[256];    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int[])	85	None	replace
437	[BUG]  [BUGGY]  Integer  signature  =  in.mark(signature.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  Integer  signature  =  in.mark(signature.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	Integer  signature  =  in.mark(signature.length);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
438	[BUG]  [BUGGY]  sig.mark(signature.length);  [CE]  cannot  find  symbol  signature  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  sig.mark(signature.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	sig.mark(signature.length);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signature	2	None	replace
439	[BUG]  [BUGGY]  byte[]  signature  =  in.readMessage();  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readMessage();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readMessage();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
440	[BUG]  [BUGGY]  byte[]  signature  =  in.readMethod();  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readMethod();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readMethod();	  byte[]    signature    =    in.getSignature();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
441	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[10];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[10];	  final    byte[]    signature    =    new    byte[10];    final    byte[]    signature    =    new    byte[10);    	compilable	  [FE]  CompressorException  	15	2	replace
442	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[10];  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[10];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[10];	  final    byte[]    signature    =    new    byte[10];    final    byte[]    signature    =    new    byte[10);    	compilable	  [FE]  CompressorException  	15	2	replace
443	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[252];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[228];  final  byte[]  signature  =  new  byte[252];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[228];    final  byte[]  signature  =  new  byte[252];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	add
444	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  getInputStream(DEFLATE);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
445	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(in);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  in.readBytes(in);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
446	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signature  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	86	None	replace
447	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  static  final  byte[]  signature  =  new  byte[256];  }  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  static  final  byte[]  signature  =  new  byte[256];  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  static  final  byte[]  signature  =  new  byte[256];  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
448	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  [CE]  cannot  find  symbol  signature  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	86	None	replace
449	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  }  else  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  final    byte[]    signature    =    new    byte[256];    static    final    byte[]    signature    =    new    byte[256];    	non-compiled	[CE]  cannot  find  symbol  signature	86	None	replace
450	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
451	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  decompressConcatenated);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
452	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(DEFLATE));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(DEFLATE));  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  new  InputStream(in.getBytes(DEFLATE));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
453	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[9];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[9];	  final    byte[]    signature    =    new    byte[10];    final    byte[]    signature    =    new    byte[9];    	compilable	  [FE]  CompressorException  	20	2	replace
454	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[9];  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[9];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[9];	  final    byte[]    signature    =    new    byte[10];    final    byte[]    signature    =    new    byte[9];    	compilable	  [FE]  CompressorException  	20	2	replace
455	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated);  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256  *  DateTimeConstants.MILLIS_PER_SECOND],  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256    *    DateTimeConstants.MILLIS_PER_SECOND];    	non-compiled	[CE]  ';'  expected	50	None	replace
456	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();  byte[]  signature  =  new  byte[256];  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();  byte[]  signature  =  new  byte[256];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream();  byte[]  signature  =  new  byte[256];	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
457	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(decompressConcatenated);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(decompressConcatenated);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
458	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  256);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  256);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  256);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
459	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]    signature    =    new    byte[256];    ByteArrayCompressorInputStream  in  =  new  ByteArrayCompressorInputStream(256,  decompressConcatenated);	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
460	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1024];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[1024];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
461	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1024];  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[1024];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[1024];	  byte[]    signature    =    new    byte[256];    	compilable	  [FE]  CompressorException  	96	2	replace
462	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
463	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
464	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
465	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
466	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
467	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
468	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[0];  final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[0];    final  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	add
469	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.parseBoolean(in);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.parseBoolean(in);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.parseBoolean(in);  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	88	None	replace
470	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.getValue());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.getValue());  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.getValue());  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	88	None	replace
471	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.markSupported());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.markSupported());  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  Boolean.valueOf(in.markSupported());  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	88	None	replace
472	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  false;  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  false;  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(in.markSupported())  {  in.markSupported();  }  else  {  in.decompressConcatenated  =  false;  }	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	88	None	replace
473	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
474	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
475	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	102	None	replace
476	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
477	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[0];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	110	2	replace
478	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
479	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
480	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
481	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
482	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
483	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	46	None	add
484	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength));  [CE]  ';'  expected  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[64];  final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength));  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[64];    final  byte[]  signature  =  new  byte[64];  this.decompressConcatenated  =  Boolean.parseBoolean(in,  signatureLength));	  	non-compiled	[CE]  ';'  expected	46	None	add
485	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[256];  in.decompressConcatenated  =  Boolean.parseBoolean(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	100	None	replace
486	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.parseBoolean(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	100	None	replace
487	[BUG]  [BUGGY]  in.write(signature.length);  [CE]  cannot  find  symbol  signature  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  in.write(signature.length);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	in.write(signature.length);	  in.defaultWrite();    	non-compiled	[CE]  cannot  find  symbol  signature	92	None	replace
488	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE);	  in.defaultWrite();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
489	[BUG]  [BUGGY]  InputStream  in  =  this.in.readLine();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  this.in.readLine();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  this.in.readLine();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
490	[BUG]  [BUGGY]  InputStream  in  =  in.readLine();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.readLine();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readLine();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
491	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[3];  static  final  byte[]  signature  =  new  byte[3];  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[3];  static  final  byte[]  signature  =  new  byte[3];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[3];    static  final  byte[]  signature  =  new  byte[3];	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
492	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [CE]  cannot  find  symbol  signature  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signature	101	None	replace
493	[BUG]  [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [CE]  cannot  find  symbol  signature  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signature	101	None	replace
494	[BUG]  [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }  [CE]  cannot  find  symbol  signature  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature!=  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signature	101	None	replace
495	[BUG]  [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	if(signature  ==  null)  {  final  byte[]  signature  =  new  byte[256];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  }  else  {  in.close();  }	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signature	101	None	replace
496	[BUG]  [BUGGY]  InputStream  in  =  in.readUTF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.readUTF();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readUTF();	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
497	[BUG]  [BUGGY]  InputStream  in  =  in.readIO();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  InputStream  in  =  in.readIO();  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	InputStream  in  =  in.readIO();	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
498	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
499	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	byte[]  signature  =  new  byte[0];  this.decompressConcatenated  =  Boolean.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[1];    final    byte[]    signature    =    new    byte[1];    this.decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	compilable	  [FE]  CompressorException  	111	2	replace
500	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[252];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[252];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[252];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
501	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[24];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[248];  final  byte[]  signature  =  new  byte[24];  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final    byte[]    signature    =    new    byte[248];    final  byte[]  signature  =  new  byte[24];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	add
502	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Byte.valueOf(decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(boolean)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Byte.valueOf(decompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Byte.valueOf(decompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.valueOf(decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(boolean)	104	None	replace
503	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in,  signatureLength);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Integer.parseBoolean(in,  signatureLength);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	105	None	replace
504	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  descompressConcatenated);  [CE]  cannot  find  symbol  descompressConcatenated  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }      [BUGGY]  final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  descompressConcatenated);  [BUGGY]      in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];  decompressConcatenated  =  Boolean.parseBoolean(in,  descompressConcatenated);	  final    byte[]    signature    =    new    byte[256];    final    byte[]    signature    =    new    byte[256];    decompressConcatenated    =    Boolean.parseBoolean(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  descompressConcatenated	105	None	replace
