bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[6];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[6];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
2	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[6];  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[6];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[6];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
3	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[16];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[16];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
4	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  [FE]  CompressorException  [FE]      CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[16];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[16];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
5	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[1];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[1];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
6	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  [FE]  CompressorException  [FE]        CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[1];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[1];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
7	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[4];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[4];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
8	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  [FE]  CompressorException  [FE]          CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[4];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[4];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
9	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[2];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[2];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
10	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  [FE]  CompressorException  [FE]            CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[2];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[2];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
11	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[10];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[10];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
12	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  [FE]  CompressorException  [FE]              CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[10];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[10];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
13	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[256];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[256];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
14	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[256];  [FE]  CompressorException  [FE]                CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[256];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[256];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
15	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  signature  [FE]                  CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]    [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	  	final  byte[]  signature  =  new  byte[12];  	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
16	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[8];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	add	final  byte[]  signature  =  new  byte[8];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
17	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]  final  byte[]  signature  =  new  byte[8];  [BUGGY]  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	214	214	2	replace	final  byte[]  signature  =  new  byte[8];	final  byte[]  signature  =  new  byte[12];  	compilable	  [FE]  CompressorException  	5	2	replace
