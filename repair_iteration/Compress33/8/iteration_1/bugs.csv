bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  NullPointerException  	15	2	replace
2	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  NullPointerException  	15	2	replace
3	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
4	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
5	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	15	None	replace
6	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]          CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	15	None	replace
7	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new  BZip2CompressorInputStream(in,  decompressUntilEOF);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  NullPointerException  	15	2	replace
8	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]            CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  NullPointerException  	15	2	replace
9	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]              CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	15	None	replace
10	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	  	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
11	[BUG]  [BUGGY]    [FE]  CompressorException  [FE]                CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]    [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	  	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
12	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
13	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	compilable	  [FE]  CompressorException  	15	2	replace
14	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	15	None	replace
15	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream)  [FE]        CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream)	15	None	replace
16	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]          CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	15	None	replace
18	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	15	None	replace
19	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]        CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);  [BUGGY]  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	15	None	replace
